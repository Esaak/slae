        -:    0:Source:/home/ilya/slae_lab/slae/tests/Google_tests/lib/googletest/src/gtest-filepath.cc
        -:    0:Graph:/home/ilya/slae_lab/slae/cmake-build-debug-coverage/tests/Google_tests/lib/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/home/ilya/slae_lab/slae/cmake-build-debug-coverage/tests/Google_tests/lib/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:2
        -:    1:// Copyright 2008, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:#include "gtest/internal/gtest-filepath.h"
        -:   31:
        -:   32:#include <stdlib.h>
        -:   33:
        -:   34:#include "gtest/gtest-message.h"
        -:   35:#include "gtest/internal/gtest-port.h"
        -:   36:
        -:   37:#if GTEST_OS_WINDOWS_MOBILE
        -:   38:#include <windows.h>
        -:   39:#elif GTEST_OS_WINDOWS
        -:   40:#include <direct.h>
        -:   41:#include <io.h>
        -:   42:#else
        -:   43:#include <limits.h>
        -:   44:
        -:   45:#include <climits>  // Some Linux distributions define PATH_MAX here.
        -:   46:#endif              // GTEST_OS_WINDOWS_MOBILE
        -:   47:
        -:   48:#include "gtest/internal/gtest-string.h"
        -:   49:
        -:   50:#if GTEST_OS_WINDOWS
        -:   51:#define GTEST_PATH_MAX_ _MAX_PATH
        -:   52:#elif defined(PATH_MAX)
        -:   53:#define GTEST_PATH_MAX_ PATH_MAX
        -:   54:#elif defined(_XOPEN_PATH_MAX)
        -:   55:#define GTEST_PATH_MAX_ _XOPEN_PATH_MAX
        -:   56:#else
        -:   57:#define GTEST_PATH_MAX_ _POSIX_PATH_MAX
        -:   58:#endif  // GTEST_OS_WINDOWS
        -:   59:
        -:   60:#if GTEST_HAS_FILE_SYSTEM
        -:   61:
        -:   62:namespace testing {
        -:   63:namespace internal {
        -:   64:
        -:   65:#if GTEST_OS_WINDOWS
        -:   66:// On Windows, '\\' is the standard path separator, but many tools and the
        -:   67:// Windows API also accept '/' as an alternate path separator. Unless otherwise
        -:   68:// noted, a file path can contain either kind of path separators, or a mixture
        -:   69:// of them.
        -:   70:const char kPathSeparator = '\\';
        -:   71:const char kAlternatePathSeparator = '/';
        -:   72:const char kAlternatePathSeparatorString[] = "/";
        -:   73:#if GTEST_OS_WINDOWS_MOBILE
        -:   74:// Windows CE doesn't have a current directory. You should not use
        -:   75:// the current directory in tests on Windows CE, but this at least
        -:   76:// provides a reasonable fallback.
        -:   77:const char kCurrentDirectoryString[] = "\\";
        -:   78:// Windows CE doesn't define INVALID_FILE_ATTRIBUTES
        -:   79:const DWORD kInvalidFileAttributes = 0xffffffff;
        -:   80:#else
        -:   81:const char kCurrentDirectoryString[] = ".\\";
        -:   82:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:   83:#else
        -:   84:const char kPathSeparator = '/';
        -:   85:const char kCurrentDirectoryString[] = "./";
        -:   86:#endif  // GTEST_OS_WINDOWS
        -:   87:
        -:   88:// Returns whether the given character is a valid path separator.
function _ZN7testing8internalL15IsPathSeparatorEc called 114 returned 100% blocks executed 100%
      114:   89:static bool IsPathSeparator(char c) {
        -:   90:#if GTEST_HAS_ALT_PATH_SEP_
        -:   91:  return (c == kPathSeparator) || (c == kAlternatePathSeparator);
        -:   92:#else
      114:   93:  return c == kPathSeparator;
      114:   93-block  0
        -:   94:#endif
        -:   95:}
        -:   96:
        -:   97:// Returns the current working directory, or "" if unsuccessful.
function _ZN7testing8internal8FilePath13GetCurrentDirEv called 2 returned 100% blocks executed 61%
        2:   98:FilePath FilePath::GetCurrentDir() {
        -:   99:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE ||         \
        -:  100:    GTEST_OS_WINDOWS_RT || GTEST_OS_ESP8266 || GTEST_OS_ESP32 || \
        -:  101:    GTEST_OS_XTENSA || GTEST_OS_QURT
        -:  102:  // These platforms do not have a current directory, so we just return
        -:  103:  // something reasonable.
        -:  104:  return FilePath(kCurrentDirectoryString);
        -:  105:#elif GTEST_OS_WINDOWS
        -:  106:  char cwd[GTEST_PATH_MAX_ + 1] = {'\0'};
        -:  107:  return FilePath(_getcwd(cwd, sizeof(cwd)) == nullptr ? "" : cwd);
        -:  108:#else
        2:  109:  char cwd[GTEST_PATH_MAX_ + 1] = {'\0'};
        2:  110:  char* result = getcwd(cwd, sizeof(cwd));
        2:  110-block  0
call    0 returned 2
        -:  111:#if GTEST_OS_NACL
        -:  112:  // getcwd will likely fail in NaCl due to the sandbox, so return something
        -:  113:  // reasonable. The user may have provided a shim implementation for getcwd,
        -:  114:  // however, so fallback only when failure is detected.
        -:  115:  return FilePath(result == nullptr ? kCurrentDirectoryString : cwd);
        -:  116:#endif  // GTEST_OS_NACL
       2*:  117:  return FilePath(result == nullptr ? "" : cwd);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2:  117-block  0
    %%%%%:  117-block  1
        2:  117-block  2
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  117-block  3
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
        2:  117-block  4
call    9 returned 2
call   10 returned 2
        2:  117-block  5
    $$$$$:  117-block  6
call   11 never executed
    $$$$$:  117-block  7
call   12 never executed
    $$$$$:  117-block  8
    $$$$$:  117-block  9
        -:  118:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  119:}
        -:  120:
        -:  121:// Returns a copy of the FilePath with the case-insensitive extension removed.
        -:  122:// Example: FilePath("dir/file.exe").RemoveExtension("EXE") returns
        -:  123:// FilePath("dir/file"). If a case-insensitive extension is not
        -:  124:// found, returns a copy of the original FilePath.
function _ZNK7testing8internal8FilePath15RemoveExtensionEPKc called 0 returned 0% blocks executed 0%
    #####:  125:FilePath FilePath::RemoveExtension(const char* extension) const {
    #####:  126:  const std::string dot_extension = std::string(".") + extension;
    %%%%%:  126-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  126-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  126-block  2
call    7 never executed
call    8 never executed
    $$$$$:  126-block  3
call    9 never executed
    $$$$$:  126-block  4
call   10 never executed
    $$$$$:  126-block  5
    $$$$$:  126-block  6
    #####:  127:  if (String::EndsWithCaseInsensitive(pathname_, dot_extension)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  128:    return FilePath(
    #####:  129:        pathname_.substr(0, pathname_.length() - dot_extension.length()));
    %%%%%:  129-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  129-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  129-block  2
call    8 never executed
    $$$$$:  129-block  3
call    9 never executed
    $$$$$:  129-block  4
        -:  130:  }
    #####:  131:  return *this;
    %%%%%:  131-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  132:}
    %%%%%:  132-block  0
call    0 never executed
    $$$$$:  132-block  1
call    1 never executed
        -:  133:
        -:  134:// Returns a pointer to the last occurrence of a valid path separator in
        -:  135:// the FilePath. On Windows, for example, both '/' and '\' are valid path
        -:  136:// separators. Returns NULL if no path separator was found.
function _ZNK7testing8internal8FilePath21FindLastPathSeparatorEv called 0 returned 0% blocks executed 0%
    #####:  137:const char* FilePath::FindLastPathSeparator() const {
    #####:  138:  const char* const last_sep = strrchr(c_str(), kPathSeparator);
    %%%%%:  138-block  0
call    0 never executed
        -:  139:#if GTEST_HAS_ALT_PATH_SEP_
        -:  140:  const char* const last_alt_sep = strrchr(c_str(), kAlternatePathSeparator);
        -:  141:  // Comparing two pointers of which only one is NULL is undefined.
        -:  142:  if (last_alt_sep != nullptr &&
        -:  143:      (last_sep == nullptr || last_alt_sep > last_sep)) {
        -:  144:    return last_alt_sep;
        -:  145:  }
        -:  146:#endif
    #####:  147:  return last_sep;
        -:  148:}
        -:  149:
function _ZNK7testing8internal8FilePath19CalculateRootLengthEv called 0 returned 0% blocks executed 0%
    #####:  150:size_t FilePath::CalculateRootLength() const {
    #####:  151:  const auto& path = pathname_;
    #####:  152:  auto s = path.begin();
    %%%%%:  152-block  0
call    0 never executed
    #####:  153:  auto end = path.end();
call    0 never executed
        -:  154:#if GTEST_OS_WINDOWS
        -:  155:  if (end - s >= 2 && s[1] == ':' && (end - s == 2 || IsPathSeparator(s[2])) &&
        -:  156:      (('A' <= s[0] && s[0] <= 'Z') || ('a' <= s[0] && s[0] <= 'z'))) {
        -:  157:    // A typical absolute path like "C:\Windows" or "D:"
        -:  158:    s += 2;
        -:  159:    if (s != end) {
        -:  160:      ++s;
        -:  161:    }
        -:  162:  } else if (end - s >= 3 && IsPathSeparator(*s) && IsPathSeparator(*(s + 1)) &&
        -:  163:             !IsPathSeparator(*(s + 2))) {
        -:  164:    // Move past the "\\" prefix in a UNC path like "\\Server\Share\Folder"
        -:  165:    s += 2;
        -:  166:    // Skip 2 components and their following separators ("Server\" and "Share\")
        -:  167:    for (int i = 0; i < 2; ++i) {
        -:  168:      while (s != end) {
        -:  169:        bool stop = IsPathSeparator(*s);
        -:  170:        ++s;
        -:  171:        if (stop) {
        -:  172:          break;
        -:  173:        }
        -:  174:      }
        -:  175:    }
        -:  176:  } else if (s != end && IsPathSeparator(*s)) {
        -:  177:    // A drive-rooted path like "\Windows"
        -:  178:    ++s;
        -:  179:  }
        -:  180:#else
    #####:  181:  if (s != end && IsPathSeparator(*s)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  181-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  181-block  1
    %%%%%:  181-block  2
    %%%%%:  181-block  3
branch  7 never executed
branch  8 never executed
    #####:  182:    ++s;
    %%%%%:  182-block  0
call    0 never executed
        -:  183:  }
        -:  184:#endif
    #####:  185:  return static_cast<size_t>(s - path.begin());
    %%%%%:  185-block  0
call    0 never executed
call    1 never executed
        -:  186:}
        -:  187:
        -:  188:// Returns a copy of the FilePath with the directory part removed.
        -:  189:// Example: FilePath("path/to/file").RemoveDirectoryName() returns
        -:  190:// FilePath("file"). If there is no directory part ("just_a_file"), it returns
        -:  191:// the FilePath unmodified. If there is no file part ("just_a_dir/") it
        -:  192:// returns an empty FilePath ("").
        -:  193:// On Windows platform, '\' is the path separator, otherwise it is '/'.
function _ZNK7testing8internal8FilePath19RemoveDirectoryNameEv called 0 returned 0% blocks executed 0%
    #####:  194:FilePath FilePath::RemoveDirectoryName() const {
    #####:  195:  const char* const last_sep = FindLastPathSeparator();
    %%%%%:  195-block  0
call    0 never executed
    #####:  196:  return last_sep ? FilePath(last_sep + 1) : *this;
branch  0 never executed
branch  1 never executed
    %%%%%:  196-block  0
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  196-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  196-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  196-block  3
branch 12 never executed
branch 13 never executed
    %%%%%:  196-block  4
call   14 never executed
    %%%%%:  196-block  5
branch 15 never executed
branch 16 never executed
    %%%%%:  196-block  6
call   17 never executed
    %%%%%:  196-block  7
    %%%%%:  196-block  8
    $$$$$:  196-block  9
branch 18 never executed
branch 19 never executed
    $$$$$:  196-block 10
call   20 never executed
    $$$$$:  196-block 11
    $$$$$:  196-block 12
branch 21 never executed
branch 22 never executed
    $$$$$:  196-block 13
call   23 never executed
        -:  197:}
        -:  198:
        -:  199:// RemoveFileName returns the directory path with the filename removed.
        -:  200:// Example: FilePath("path/to/file").RemoveFileName() returns "path/to/".
        -:  201:// If the FilePath is "a_file" or "/a_file", RemoveFileName returns
        -:  202:// FilePath("./") or, on Windows, FilePath(".\\"). If the filepath does
        -:  203:// not have a file, like "just/a/dir/", it returns the FilePath unmodified.
        -:  204:// On Windows platform, '\' is the path separator, otherwise it is '/'.
function _ZNK7testing8internal8FilePath14RemoveFileNameEv called 0 returned 0% blocks executed 0%
    #####:  205:FilePath FilePath::RemoveFileName() const {
    #####:  206:  const char* const last_sep = FindLastPathSeparator();
    %%%%%:  206-block  0
call    0 never executed
    #####:  207:  std::string dir;
call    0 never executed
    #####:  208:  if (last_sep) {
branch  0 never executed
branch  1 never executed
    #####:  209:    dir = std::string(c_str(), static_cast<size_t>(last_sep + 1 - c_str()));
    %%%%%:  209-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  209-block  1
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$:  209-block  2
call    9 never executed
    $$$$$:  209-block  3
    $$$$$:  209-block  4
        -:  210:  } else {
    #####:  211:    dir = kCurrentDirectoryString;
    %%%%%:  211-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  212:  }
    #####:  213:  return FilePath(dir);
    %%%%%:  213-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  213-block  1
    #####:  214:}
    %%%%%:  214-block  0
call    0 never executed
    $$$$$:  214-block  1
call    1 never executed
        -:  215:
        -:  216:// Helper functions for naming files in a directory for xml output.
        -:  217:
        -:  218:// Given directory = "dir", base_name = "test", number = 0,
        -:  219:// extension = "xml", returns "dir/test.xml". If number is greater
        -:  220:// than zero (e.g., 12), returns "dir/test_12.xml".
        -:  221:// On Windows platform, uses \ as the separator rather than /.
function _ZN7testing8internal8FilePath12MakeFileNameERKS1_S3_iPKc called 0 returned 0% blocks executed 0%
    #####:  222:FilePath FilePath::MakeFileName(const FilePath& directory,
        -:  223:                                const FilePath& base_name, int number,
        -:  224:                                const char* extension) {
    #####:  225:  std::string file;
    %%%%%:  225-block  0
call    0 never executed
    #####:  226:  if (number == 0) {
branch  0 never executed
branch  1 never executed
    #####:  227:    file = base_name.string() + "." + extension;
    %%%%%:  227-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  227-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  227-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  227-block  3
call   10 never executed
    $$$$$:  227-block  4
    $$$$$:  227-block  5
        -:  228:  } else {
        -:  229:    file =
    #####:  230:        base_name.string() + "_" + StreamableToString(number) + "." + extension;
    %%%%%:  230-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  230-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  230-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  230-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  230-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  230-block  5
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    $$$$$:  230-block  6
call   22 never executed
    $$$$$:  230-block  7
call   23 never executed
    $$$$$:  230-block  8
call   24 never executed
    $$$$$:  230-block  9
    $$$$$:  230-block 10
call   25 never executed
    $$$$$:  230-block 11
    $$$$$:  230-block 12
    $$$$$:  230-block 13
    $$$$$:  230-block 14
        -:  231:  }
    #####:  232:  return ConcatPaths(directory, FilePath(file));
    %%%%%:  232-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  232-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  232-block  2
call    6 never executed
    %%%%%:  232-block  3
    $$$$$:  232-block  4
call    7 never executed
    $$$$$:  232-block  5
    #####:  233:}
call    0 never executed
    $$$$$:  233-block  0
call    1 never executed
        -:  234:
        -:  235:// Given directory = "dir", relative_path = "test.xml", returns "dir/test.xml".
        -:  236:// On Windows, uses \ as the separator rather than /.
function _ZN7testing8internal8FilePath11ConcatPathsERKS1_S3_ called 0 returned 0% blocks executed 0%
    #####:  237:FilePath FilePath::ConcatPaths(const FilePath& directory,
        -:  238:                               const FilePath& relative_path) {
    #####:  239:  if (directory.IsEmpty()) return relative_path;
    %%%%%:  239-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  239-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  240:  const FilePath dir(directory.RemoveTrailingPathSeparator());
    %%%%%:  240-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  241:  return FilePath(dir.string() + kPathSeparator + relative_path.string());
    %%%%%:  241-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  241-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  241-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  241-block  3
call   11 never executed
call   12 never executed
    $$$$$:  241-block  4
call   13 never executed
    $$$$$:  241-block  5
call   14 never executed
    $$$$$:  241-block  6
    $$$$$:  241-block  7
    #####:  242:}
call    0 never executed
    $$$$$:  242-block  0
call    1 never executed
        -:  243:
        -:  244:// Returns true if pathname describes something findable in the file-system,
        -:  245:// either a file, directory, or whatever.
function _ZNK7testing8internal8FilePath21FileOrDirectoryExistsEv called 0 returned 0% blocks executed 0%
    #####:  246:bool FilePath::FileOrDirectoryExists() const {
        -:  247:#if GTEST_OS_WINDOWS_MOBILE
        -:  248:  LPCWSTR unicode = String::AnsiToUtf16(pathname_.c_str());
        -:  249:  const DWORD attributes = GetFileAttributes(unicode);
        -:  250:  delete[] unicode;
        -:  251:  return attributes != kInvalidFileAttributes;
        -:  252:#else
    #####:  253:  posix::StatStruct file_stat{};
    #####:  254:  return posix::Stat(pathname_.c_str(), &file_stat) == 0;
    %%%%%:  254-block  0
call    0 never executed
call    1 never executed
        -:  255:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  256:}
        -:  257:
        -:  258:// Returns true if pathname describes a directory in the file-system
        -:  259:// that exists.
function _ZNK7testing8internal8FilePath15DirectoryExistsEv called 0 returned 0% blocks executed 0%
    #####:  260:bool FilePath::DirectoryExists() const {
    #####:  261:  bool result = false;
        -:  262:#if GTEST_OS_WINDOWS
        -:  263:  // Don't strip off trailing separator if path is a root directory on
        -:  264:  // Windows (like "C:\\").
        -:  265:  const FilePath& path(IsRootDirectory() ? *this
        -:  266:                                         : RemoveTrailingPathSeparator());
        -:  267:#else
    #####:  268:  const FilePath& path(*this);
        -:  269:#endif
        -:  270:
        -:  271:#if GTEST_OS_WINDOWS_MOBILE
        -:  272:  LPCWSTR unicode = String::AnsiToUtf16(path.c_str());
        -:  273:  const DWORD attributes = GetFileAttributes(unicode);
        -:  274:  delete[] unicode;
        -:  275:  if ((attributes != kInvalidFileAttributes) &&
        -:  276:      (attributes & FILE_ATTRIBUTE_DIRECTORY)) {
        -:  277:    result = true;
        -:  278:  }
        -:  279:#else
    #####:  280:  posix::StatStruct file_stat{};
    #####:  281:  result =
    #####:  282:      posix::Stat(path.c_str(), &file_stat) == 0 && posix::IsDir(file_stat);
    %%%%%:  282-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  282-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  282-block  2
    %%%%%:  282-block  3
        -:  283:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  284:
    #####:  285:  return result;
    %%%%%:  285-block  0
        -:  286:}
        -:  287:
        -:  288:// Returns true if pathname describes a root directory. (Windows has one
        -:  289:// root directory per disk drive. UNC share roots are also included.)
function _ZNK7testing8internal8FilePath15IsRootDirectoryEv called 0 returned 0% blocks executed 0%
    #####:  290:bool FilePath::IsRootDirectory() const {
    #####:  291:  size_t root_length = CalculateRootLength();
    %%%%%:  291-block  0
call    0 never executed
    #####:  292:  return root_length > 0 && root_length == pathname_.size() &&
branch  0 never executed
branch  1 never executed
    %%%%%:  292-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  292-block  1
    %%%%%:  292-block  2
    #####:  293:         IsPathSeparator(pathname_[root_length - 1]);
    %%%%%:  293-block  0
call    0 never executed
call    1 never executed
    %%%%%:  293-block  1
        -:  294:}
        -:  295:
        -:  296:// Returns true if pathname describes an absolute path.
function _ZNK7testing8internal8FilePath14IsAbsolutePathEv called 0 returned 0% blocks executed 0%
    #####:  297:bool FilePath::IsAbsolutePath() const { return CalculateRootLength() > 0; }
    %%%%%:  297-block  0
call    0 never executed
        -:  298:
        -:  299:// Returns a pathname for a file that does not currently exist. The pathname
        -:  300:// will be directory/base_name.extension or
        -:  301:// directory/base_name_<number>.extension if directory/base_name.extension
        -:  302:// already exists. The number will be incremented until a pathname is found
        -:  303:// that does not already exist.
        -:  304:// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.
        -:  305:// There could be a race condition if two or more processes are calling this
        -:  306:// function at the same time -- they could both pick the same filename.
function _ZN7testing8internal8FilePath22GenerateUniqueFileNameERKS1_S3_PKc called 0 returned 0% blocks executed 0%
    #####:  307:FilePath FilePath::GenerateUniqueFileName(const FilePath& directory,
        -:  308:                                          const FilePath& base_name,
        -:  309:                                          const char* extension) {
    #####:  310:  FilePath full_pathname;
    %%%%%:  310-block  0
call    0 never executed
    #####:  311:  int number = 0;
        -:  312:  do {
    #####:  313:    full_pathname.Set(MakeFileName(directory, base_name, number++, extension));
    %%%%%:  313-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  313-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  313-block  2
call    6 never executed
    $$$$$:  313-block  3
call    7 never executed
    $$$$$:  313-block  4
    #####:  314:  } while (full_pathname.FileOrDirectoryExists());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  315:  return full_pathname;
    %%%%%:  315-block  0
    %%%%%:  315-block  1
    =====:  316:}
    $$$$$:  316-block  0
call    0 never executed
        -:  317:
        -:  318:// Returns true if FilePath ends with a path separator, which indicates that
        -:  319:// it is intended to represent a directory. Returns false otherwise.
        -:  320:// This does NOT check that a directory (or file) actually exists.
function _ZNK7testing8internal8FilePath11IsDirectoryEv called 0 returned 0% blocks executed 0%
    #####:  321:bool FilePath::IsDirectory() const {
    #####:  322:  return !pathname_.empty() &&
    %%%%%:  322-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  322-block  1
    %%%%%:  322-block  2
    #####:  323:         IsPathSeparator(pathname_.c_str()[pathname_.length() - 1]);
    %%%%%:  323-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%:  323-block  1
        -:  324:}
        -:  325:
        -:  326:// Create directories so that path exists. Returns true if successful or if
        -:  327:// the directories already exist; returns false if unable to create directories
        -:  328:// for any reason.
function _ZNK7testing8internal8FilePath28CreateDirectoriesRecursivelyEv called 0 returned 0% blocks executed 0%
    #####:  329:bool FilePath::CreateDirectoriesRecursively() const {
    #####:  330:  if (!this->IsDirectory()) {
    %%%%%:  330-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  331:    return false;
    %%%%%:  331-block  0
        -:  332:  }
        -:  333:
    #####:  334:  if (pathname_.length() == 0 || this->DirectoryExists()) {
    %%%%%:  334-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  334-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  334-block  2
    %%%%%:  334-block  3
    %%%%%:  334-block  4
branch  6 never executed
branch  7 never executed
    #####:  335:    return true;
    %%%%%:  335-block  0
        -:  336:  }
        -:  337:
    #####:  338:  const FilePath parent(this->RemoveTrailingPathSeparator().RemoveFileName());
    %%%%%:  338-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  338-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  338-block  2
call    6 never executed
    $$$$$:  338-block  3
call    7 never executed
    $$$$$:  338-block  4
    #####:  339:  return parent.CreateDirectoriesRecursively() && this->CreateFolder();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  339-block  0
branch  3 never executed
branch  4 never executed
    %%%%%:  339-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  339-block  2
    %%%%%:  339-block  3
    #####:  340:}
    %%%%%:  340-block  0
call    0 never executed
    $$$$$:  340-block  1
call    1 never executed
        -:  341:
        -:  342:// Create the directory so that path exists. Returns true if successful or
        -:  343:// if the directory already exists; returns false if unable to create the
        -:  344:// directory for any reason, including if the parent directory does not
        -:  345:// exist. Not named "CreateDirectory" because that's a macro on Windows.
function _ZNK7testing8internal8FilePath12CreateFolderEv called 0 returned 0% blocks executed 0%
    #####:  346:bool FilePath::CreateFolder() const {
        -:  347:#if GTEST_OS_WINDOWS_MOBILE
        -:  348:  FilePath removed_sep(this->RemoveTrailingPathSeparator());
        -:  349:  LPCWSTR unicode = String::AnsiToUtf16(removed_sep.c_str());
        -:  350:  int result = CreateDirectory(unicode, nullptr) ? 0 : -1;
        -:  351:  delete[] unicode;
        -:  352:#elif GTEST_OS_WINDOWS
        -:  353:  int result = _mkdir(pathname_.c_str());
        -:  354:#elif GTEST_OS_ESP8266 || GTEST_OS_XTENSA || GTEST_OS_QURT
        -:  355:  // do nothing
        -:  356:  int result = 0;
        -:  357:#else
    #####:  358:  int result = mkdir(pathname_.c_str(), 0777);
    %%%%%:  358-block  0
call    0 never executed
call    1 never executed
        -:  359:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  360:
    #####:  361:  if (result == -1) {
branch  0 never executed
branch  1 never executed
    #####:  362:    return this->DirectoryExists();  // An error is OK if the directory exists.
    %%%%%:  362-block  0
call    0 never executed
        -:  363:  }
    #####:  364:  return true;  // No error.
    %%%%%:  364-block  0
        -:  365:}
        -:  366:
        -:  367:// If input name has a trailing separator character, remove it and return the
        -:  368:// name, otherwise return the name string unmodified.
        -:  369:// On Windows platform, uses \ as the separator, other platforms use /.
function _ZNK7testing8internal8FilePath27RemoveTrailingPathSeparatorEv called 0 returned 0% blocks executed 0%
    #####:  370:FilePath FilePath::RemoveTrailingPathSeparator() const {
    #####:  371:  return IsDirectory() ? FilePath(pathname_.substr(0, pathname_.length() - 1))
    %%%%%:  371-block  0
call    0 never executed
    %%%%%:  371-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  371-block  2
branch  5 never executed
branch  6 never executed
    %%%%%:  371-block  3
call    7 never executed
    %%%%%:  371-block  4
    $$$$$:  371-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:  371-block  6
call   10 never executed
    #####:  372:                       : *this;
branch  0 never executed
branch  1 never executed
    %%%%%:  372-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  372-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  372-block  2
        -:  373:}
        -:  374:
        -:  375:// Removes any redundant separators that might be in the pathname.
        -:  376:// For example, "bar///foo" becomes "bar/foo". Does not eliminate other
        -:  377:// redundancies that might be in a pathname involving "." or "..".
        -:  378:// Note that "\\Host\Share" does not contain a redundancy on Windows!
function _ZN7testing8internal8FilePath9NormalizeEv called 2 returned 100% blocks executed 83%
        2:  379:void FilePath::Normalize() {
        2:  380:  auto out = pathname_.begin();
        2:  380-block  0
call    0 returned 2
        -:  381:
        2:  382:  auto i = pathname_.cbegin();
call    0 returned 2
        -:  383:#if GTEST_OS_WINDOWS
        -:  384:  // UNC paths are treated specially
        -:  385:  if (pathname_.end() - i >= 3 && IsPathSeparator(*i) &&
        -:  386:      IsPathSeparator(*(i + 1)) && !IsPathSeparator(*(i + 2))) {
        -:  387:    *(out++) = kPathSeparator;
        -:  388:    *(out++) = kPathSeparator;
        -:  389:  }
        -:  390:#endif
      116:  391:  while (i != pathname_.end()) {
      116:  391-block  0
call    0 returned 116
call    1 returned 116
branch  2 taken 114
branch  3 taken 2 (fallthrough)
      114:  392:    const char character = *i;
      114:  392-block  0
call    0 returned 114
      114:  393:    if (!IsPathSeparator(character)) {
call    0 returned 114
branch  1 taken 102 (fallthrough)
branch  2 taken 12
      102:  394:      *(out++) = character;
      102:  394-block  0
call    0 returned 102
call    1 returned 102
      12*:  395:    } else if (out == pathname_.begin() || *std::prev(out) != kPathSeparator) {
       12:  395-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 10 (fallthrough)
branch  3 taken 2
       10:  395-block  1
call    4 returned 10
branch  5 taken 10 (fallthrough)
branch  6 taken 0 (throw)
       10:  395-block  2
call    7 returned 10
branch  8 taken 10 (fallthrough)
branch  9 taken 0
       12:  395-block  3
    %%%%%:  395-block  4
       12:  395-block  5
branch 10 taken 12 (fallthrough)
branch 11 taken 0
    $$$$$:  395-block  6
    $$$$$:  395-block  7
       12:  396:      *(out++) = kPathSeparator;
       12:  396-block  0
call    0 returned 12
call    1 returned 12
        -:  397:    }
      114:  398:    ++i;
      114:  398-block  0
call    0 returned 114
        -:  399:  }
        -:  400:
        2:  401:  pathname_.erase(out, pathname_.end());
        2:  401-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  401-block  1
    $$$$$:  401-block  2
    $$$$$:  401-block  3
        2:  402:}
        2:  402-block  0
        -:  403:
        -:  404:}  // namespace internal
        -:  405:}  // namespace testing
        -:  406:
        -:  407:#endif  // GTEST_HAS_FILE_SYSTEM
