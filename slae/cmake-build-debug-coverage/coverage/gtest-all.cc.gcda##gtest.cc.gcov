        -:    0:Source:/home/ilya/slae_lab/slae/tests/Google_tests/lib/googletest/src/gtest.cc
        -:    0:Graph:/home/ilya/slae_lab/slae/cmake-build-debug-coverage/tests/Google_tests/lib/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/home/ilya/slae_lab/slae/cmake-build-debug-coverage/tests/Google_tests/lib/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:2
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest.h"
        -:   34:
        -:   35:#include <ctype.h>
        -:   36:#include <stdarg.h>
        -:   37:#include <stdio.h>
        -:   38:#include <stdlib.h>
        -:   39:#include <time.h>
        -:   40:#include <wchar.h>
        -:   41:#include <wctype.h>
        -:   42:
        -:   43:#include <algorithm>
        -:   44:#include <chrono>  // NOLINT
        -:   45:#include <cmath>
        -:   46:#include <cstdint>
        -:   47:#include <initializer_list>
        -:   48:#include <iomanip>
        -:   49:#include <ios>
        -:   50:#include <iterator>
        -:   51:#include <limits>
        -:   52:#include <list>
        -:   53:#include <map>
        -:   54:#include <ostream>  // NOLINT
        -:   55:#include <sstream>
        -:   56:#include <unordered_set>
        -:   57:#include <vector>
        -:   58:
        -:   59:#include "gtest/gtest-assertion-result.h"
        -:   60:#include "gtest/gtest-spi.h"
        -:   61:#include "gtest/internal/custom/gtest.h"
        -:   62:#include "gtest/internal/gtest-port.h"
        -:   63:
        -:   64:#if GTEST_OS_LINUX
        -:   65:
        -:   66:#include <fcntl.h>   // NOLINT
        -:   67:#include <limits.h>  // NOLINT
        -:   68:#include <sched.h>   // NOLINT
        -:   69:// Declares vsnprintf().  This header is not available on Windows.
        -:   70:#include <strings.h>   // NOLINT
        -:   71:#include <sys/mman.h>  // NOLINT
        -:   72:#include <sys/time.h>  // NOLINT
        -:   73:#include <unistd.h>    // NOLINT
        -:   74:
        -:   75:#include <string>
        -:   76:
        -:   77:#elif GTEST_OS_ZOS
        -:   78:#include <sys/time.h>  // NOLINT
        -:   79:
        -:   80:// On z/OS we additionally need strings.h for strcasecmp.
        -:   81:#include <strings.h>   // NOLINT
        -:   82:
        -:   83:#elif GTEST_OS_WINDOWS_MOBILE  // We are on Windows CE.
        -:   84:
        -:   85:#include <windows.h>  // NOLINT
        -:   86:#undef min
        -:   87:
        -:   88:#elif GTEST_OS_WINDOWS  // We are on Windows proper.
        -:   89:
        -:   90:#include <windows.h>  // NOLINT
        -:   91:#undef min
        -:   92:
        -:   93:#ifdef _MSC_VER
        -:   94:#include <crtdbg.h>  // NOLINT
        -:   95:#endif
        -:   96:
        -:   97:#include <io.h>         // NOLINT
        -:   98:#include <sys/stat.h>   // NOLINT
        -:   99:#include <sys/timeb.h>  // NOLINT
        -:  100:#include <sys/types.h>  // NOLINT
        -:  101:
        -:  102:#if GTEST_OS_WINDOWS_MINGW
        -:  103:#include <sys/time.h>  // NOLINT
        -:  104:#endif                 // GTEST_OS_WINDOWS_MINGW
        -:  105:
        -:  106:#else
        -:  107:
        -:  108:// cpplint thinks that the header is already included, so we want to
        -:  109:// silence it.
        -:  110:#include <sys/time.h>  // NOLINT
        -:  111:#include <unistd.h>    // NOLINT
        -:  112:
        -:  113:#endif  // GTEST_OS_LINUX
        -:  114:
        -:  115:#if GTEST_HAS_EXCEPTIONS
        -:  116:#include <stdexcept>
        -:  117:#endif
        -:  118:
        -:  119:#if GTEST_CAN_STREAM_RESULTS_
        -:  120:#include <arpa/inet.h>   // NOLINT
        -:  121:#include <netdb.h>       // NOLINT
        -:  122:#include <sys/socket.h>  // NOLINT
        -:  123:#include <sys/types.h>   // NOLINT
        -:  124:#endif
        -:  125:
        -:  126:#include "src/gtest-internal-inl.h"
        -:  127:
        -:  128:#if GTEST_OS_WINDOWS
        -:  129:#define vsnprintf _vsnprintf
        -:  130:#endif  // GTEST_OS_WINDOWS
        -:  131:
        -:  132:#if GTEST_OS_MAC
        -:  133:#ifndef GTEST_OS_IOS
        -:  134:#include <crt_externs.h>
        -:  135:#endif
        -:  136:#endif
        -:  137:
        -:  138:#if GTEST_HAS_ABSL
        -:  139:#include "absl/debugging/failure_signal_handler.h"
        -:  140:#include "absl/debugging/stacktrace.h"
        -:  141:#include "absl/debugging/symbolize.h"
        -:  142:#include "absl/flags/parse.h"
        -:  143:#include "absl/flags/usage.h"
        -:  144:#include "absl/strings/str_cat.h"
        -:  145:#include "absl/strings/str_replace.h"
        -:  146:#endif  // GTEST_HAS_ABSL
        -:  147:
        -:  148:// Checks builtin compiler feature |x| while avoiding an extra layer of #ifdefs
        -:  149:// at the callsite.
        -:  150:#if defined(__has_builtin)
        -:  151:#define GTEST_HAS_BUILTIN(x) __has_builtin(x)
        -:  152:#else
        -:  153:#define GTEST_HAS_BUILTIN(x) 0
        -:  154:#endif  // defined(__has_builtin)
        -:  155:
        -:  156:namespace testing {
        -:  157:
        -:  158:using internal::CountIf;
        -:  159:using internal::ForEach;
        -:  160:using internal::GetElementOr;
        -:  161:using internal::Shuffle;
        -:  162:
        -:  163:// Constants.
        -:  164:
        -:  165:// A test whose test suite name or test name matches this filter is
        -:  166:// disabled and not run.
        -:  167:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -:  168:
        -:  169:// A test suite whose name matches this filter is considered a death
        -:  170:// test suite and will be run before test suites whose name doesn't
        -:  171:// match this filter.
        -:  172:static const char kDeathTestSuiteFilter[] = "*DeathTest:*DeathTest/*";
        -:  173:
        -:  174:// A test filter that matches everything.
        -:  175:static const char kUniversalFilter[] = "*";
        -:  176:
        -:  177:// The default output format.
        -:  178:static const char kDefaultOutputFormat[] = "xml";
        -:  179:// The default output file.
        -:  180:static const char kDefaultOutputFile[] = "test_detail";
        -:  181:
        -:  182:// The environment variable name for the test shard index.
        -:  183:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -:  184:// The environment variable name for the total number of test shards.
        -:  185:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -:  186:// The environment variable name for the test shard status file.
        -:  187:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -:  188:
        -:  189:namespace internal {
        -:  190:
        -:  191:// The text used in failure messages to indicate the start of the
        -:  192:// stack trace.
        -:  193:const char kStackTraceMarker[] = "\nStack trace:\n";
        -:  194:
        -:  195:// g_help_flag is true if and only if the --help flag or an equivalent form
        -:  196:// is specified on the command line.
        -:  197:bool g_help_flag = false;
        -:  198:
        -:  199:#if GTEST_HAS_FILE_SYSTEM
        -:  200:// Utility function to Open File for Writing
function _ZN7testing8internalL18OpenFileForWritingERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  201:static FILE* OpenFileForWriting(const std::string& output_file) {
    #####:  202:  FILE* fileout = nullptr;
    #####:  203:  FilePath output_file_path(output_file);
    %%%%%:  203-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  204:  FilePath output_dir(output_file_path.RemoveFileName());
    %%%%%:  204-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  205:
    #####:  206:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%:  206-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  206-block  1
branch  3 never executed
branch  4 never executed
    #####:  207:    fileout = posix::FOpen(output_file.c_str(), "w");
    %%%%%:  207-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  207-block  1
        -:  208:  }
    #####:  209:  if (fileout == nullptr) {
    %%%%%:  209-block  0
branch  0 never executed
branch  1 never executed
    #####:  210:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file << "\"";
    %%%%%:  210-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  210-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  210-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  210-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  210-block  4
call   13 never executed
    $$$$$:  210-block  5
call   14 never executed
    $$$$$:  210-block  6
        -:  211:  }
    #####:  212:  return fileout;
    %%%%%:  212-block  0
    #####:  213:}
    %%%%%:  213-block  0
call    0 never executed
call    1 never executed
    $$$$$:  213-block  1
call    2 never executed
    $$$$$:  213-block  2
call    3 never executed
        -:  214:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  215:
        -:  216:}  // namespace internal
        -:  217:
        -:  218:// Bazel passes in the argument to '--test_filter' via the TESTBRIDGE_TEST_ONLY
        -:  219:// environment variable.
function _ZN7testingL16GetDefaultFilterEv called 2 returned 100% blocks executed 80%
        2:  220:static const char* GetDefaultFilter() {
        -:  221:  const char* const testbridge_test_only =
        2:  222:      internal::posix::GetEnv("TESTBRIDGE_TEST_ONLY");
        2:  222-block  0
call    0 returned 2
        2:  223:  if (testbridge_test_only != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  224:    return testbridge_test_only;
    %%%%%:  224-block  0
        -:  225:  }
        2:  226:  return kUniversalFilter;
        2:  226-block  0
        -:  227:}
        -:  228:
        -:  229:// Bazel passes in the argument to '--test_runner_fail_fast' via the
        -:  230:// TESTBRIDGE_TEST_RUNNER_FAIL_FAST environment variable.
function _ZN7testingL18GetDefaultFailFastEv called 2 returned 100% blocks executed 80%
        2:  231:static bool GetDefaultFailFast() {
        -:  232:  const char* const testbridge_test_runner_fail_fast =
        2:  233:      internal::posix::GetEnv("TESTBRIDGE_TEST_RUNNER_FAIL_FAST");
        2:  233-block  0
call    0 returned 2
        2:  234:  if (testbridge_test_runner_fail_fast != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  235:    return strcmp(testbridge_test_runner_fail_fast, "1") == 0;
    %%%%%:  235-block  0
        -:  236:  }
        2:  237:  return false;
        2:  237-block  0
        -:  238:}
        -:  239:
        -:  240:}  // namespace testing
        -:  241:
        -:  242:GTEST_DEFINE_bool_(
        -:  243:    fail_fast,
        -:  244:    testing::internal::BoolFromGTestEnv("fail_fast",
        -:  245:                                        testing::GetDefaultFailFast()),
        -:  246:    "True if and only if a test failure should stop further test execution.");
        -:  247:
        -:  248:GTEST_DEFINE_bool_(
        -:  249:    also_run_disabled_tests,
        -:  250:    testing::internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -:  251:    "Run disabled tests too, in addition to the tests normally being run.");
        -:  252:
        -:  253:GTEST_DEFINE_bool_(
        -:  254:    break_on_failure,
        -:  255:    testing::internal::BoolFromGTestEnv("break_on_failure", false),
        -:  256:    "True if and only if a failed assertion should be a debugger "
        -:  257:    "break-point.");
        -:  258:
        -:  259:GTEST_DEFINE_bool_(catch_exceptions,
        -:  260:                   testing::internal::BoolFromGTestEnv("catch_exceptions",
        -:  261:                                                       true),
        -:  262:                   "True if and only if " GTEST_NAME_
        -:  263:                   " should catch exceptions and treat them as test failures.");
        -:  264:
        -:  265:GTEST_DEFINE_string_(
        -:  266:    color, testing::internal::StringFromGTestEnv("color", "auto"),
        -:  267:    "Whether to use colors in the output.  Valid values: yes, no, "
        -:  268:    "and auto.  'auto' means to use colors if the output is "
        -:  269:    "being sent to a terminal and the TERM environment variable "
        -:  270:    "is set to a terminal type that supports colors.");
        -:  271:
        -:  272:GTEST_DEFINE_string_(
        -:  273:    filter,
        -:  274:    testing::internal::StringFromGTestEnv("filter",
        -:  275:                                          testing::GetDefaultFilter()),
        -:  276:    "A colon-separated list of glob (not regex) patterns "
        -:  277:    "for filtering the tests to run, optionally followed by a "
        -:  278:    "'-' and a : separated list of negative patterns (tests to "
        -:  279:    "exclude).  A test is run if it matches one of the positive "
        -:  280:    "patterns and does not match any of the negative patterns.");
        -:  281:
        -:  282:GTEST_DEFINE_bool_(
        -:  283:    install_failure_signal_handler,
        -:  284:    testing::internal::BoolFromGTestEnv("install_failure_signal_handler",
        -:  285:                                        false),
        -:  286:    "If true and supported on the current platform, " GTEST_NAME_
        -:  287:    " should "
        -:  288:    "install a signal handler that dumps debugging information when fatal "
        -:  289:    "signals are raised.");
        -:  290:
        -:  291:GTEST_DEFINE_bool_(list_tests, false, "List all tests without running them.");
        -:  292:
        -:  293:// The net priority order after flag processing is thus:
        -:  294://   --gtest_output command line flag
        -:  295://   GTEST_OUTPUT environment variable
        -:  296://   XML_OUTPUT_FILE environment variable
        -:  297://   ''
        -:  298:GTEST_DEFINE_string_(
        -:  299:    output,
        -:  300:    testing::internal::StringFromGTestEnv(
        -:  301:        "output", testing::internal::OutputFlagAlsoCheckEnvVar().c_str()),
        -:  302:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -:  303:    "optionally followed by a colon and an output file name or directory. "
        -:  304:    "A directory is indicated by a trailing pathname separator. "
        -:  305:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -:  306:    "If a directory is specified, output files will be created "
        -:  307:    "within that directory, with file-names based on the test "
        -:  308:    "executable's name and, if necessary, made unique by adding "
        -:  309:    "digits.");
        -:  310:
        -:  311:GTEST_DEFINE_bool_(
        -:  312:    brief, testing::internal::BoolFromGTestEnv("brief", false),
        -:  313:    "True if only test failures should be displayed in text output.");
        -:  314:
        -:  315:GTEST_DEFINE_bool_(print_time,
        -:  316:                   testing::internal::BoolFromGTestEnv("print_time", true),
        -:  317:                   "True if and only if " GTEST_NAME_
        -:  318:                   " should display elapsed time in text output.");
        -:  319:
        -:  320:GTEST_DEFINE_bool_(print_utf8,
        -:  321:                   testing::internal::BoolFromGTestEnv("print_utf8", true),
        -:  322:                   "True if and only if " GTEST_NAME_
        -:  323:                   " prints UTF8 characters as text.");
        -:  324:
        -:  325:GTEST_DEFINE_int32_(
        -:  326:    random_seed, testing::internal::Int32FromGTestEnv("random_seed", 0),
        -:  327:    "Random number seed to use when shuffling test orders.  Must be in range "
        -:  328:    "[1, 99999], or 0 to use a seed based on the current time.");
        -:  329:
        -:  330:GTEST_DEFINE_int32_(
        -:  331:    repeat, testing::internal::Int32FromGTestEnv("repeat", 1),
        -:  332:    "How many times to repeat each test.  Specify a negative number "
        -:  333:    "for repeating forever.  Useful for shaking out flaky tests.");
        -:  334:
        -:  335:GTEST_DEFINE_bool_(
        -:  336:    recreate_environments_when_repeating,
        -:  337:    testing::internal::BoolFromGTestEnv("recreate_environments_when_repeating",
        -:  338:                                        false),
        -:  339:    "Controls whether global test environments are recreated for each repeat "
        -:  340:    "of the tests. If set to false the global test environments are only set "
        -:  341:    "up once, for the first iteration, and only torn down once, for the last. "
        -:  342:    "Useful for shaking out flaky tests with stable, expensive test "
        -:  343:    "environments. If --gtest_repeat is set to a negative number, meaning "
        -:  344:    "there is no last run, the environments will always be recreated to avoid "
        -:  345:    "leaks.");
        -:  346:
        -:  347:GTEST_DEFINE_bool_(show_internal_stack_frames, false,
        -:  348:                   "True if and only if " GTEST_NAME_
        -:  349:                   " should include internal stack frames when "
        -:  350:                   "printing test failure stack traces.");
        -:  351:
        -:  352:GTEST_DEFINE_bool_(shuffle,
        -:  353:                   testing::internal::BoolFromGTestEnv("shuffle", false),
        -:  354:                   "True if and only if " GTEST_NAME_
        -:  355:                   " should randomize tests' order on every run.");
        -:  356:
        -:  357:GTEST_DEFINE_int32_(
        -:  358:    stack_trace_depth,
        -:  359:    testing::internal::Int32FromGTestEnv("stack_trace_depth",
        -:  360:                                         testing::kMaxStackTraceDepth),
        -:  361:    "The maximum number of stack frames to print when an "
        -:  362:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -:  363:
        -:  364:GTEST_DEFINE_string_(
        -:  365:    stream_result_to,
        -:  366:    testing::internal::StringFromGTestEnv("stream_result_to", ""),
        -:  367:    "This flag specifies the host name and the port number on which to stream "
        -:  368:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -:  369:    "Linux.");
        -:  370:
        -:  371:GTEST_DEFINE_bool_(
        -:  372:    throw_on_failure,
        -:  373:    testing::internal::BoolFromGTestEnv("throw_on_failure", false),
        -:  374:    "When this flag is specified, a failed assertion will throw an exception "
        -:  375:    "if exceptions are enabled or exit the program with a non-zero code "
        -:  376:    "otherwise. For use with an external test framework.");
        -:  377:
        -:  378:#if GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  379:GTEST_DEFINE_string_(
        -:  380:    flagfile, testing::internal::StringFromGTestEnv("flagfile", ""),
        -:  381:    "This flag specifies the flagfile to read command-line flags from.");
        -:  382:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  383:
        -:  384:namespace testing {
        -:  385:namespace internal {
        -:  386:
        -:  387:const uint32_t Random::kMaxRange;
        -:  388:
        -:  389:// Generates a random number from [0, range), using a Linear
        -:  390:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -:  391:// than kMaxRange.
function _ZN7testing8internal6Random8GenerateEj called 0 returned 0% blocks executed 0%
    #####:  392:uint32_t Random::Generate(uint32_t range) {
        -:  393:  // These constants are the same as are used in glibc's rand(3).
        -:  394:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####:  395:  state_ = static_cast<uint32_t>(1103515245ULL * state_ + 12345U) % kMaxRange;
        -:  396:
    #####:  397:  GTEST_CHECK_(range > 0) << "Cannot generate a number in the range [0, 0).";
    %%%%%:  397-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  397-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  397-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  397-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  397-block  4
call   13 never executed
    $$$$$:  397-block  5
call   14 never executed
    $$$$$:  397-block  6
call   15 never executed
    #####:  398:  GTEST_CHECK_(range <= kMaxRange)
    %%%%%:  398-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  398-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  398-block  2
call    6 never executed
    %%%%%:  398-block  3
call    7 never executed
    $$$$$:  398-block  4
call    8 never executed
    #####:  399:      << "Generation of a number in [0, " << range << ") was requested, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  399-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  399-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  400:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    %%%%%:  400-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  400-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  400-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  400-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:  401:
        -:  402:  // Converting via modulus introduces a bit of downward bias, but
        -:  403:  // it's simple, and a linear congruential generator isn't too good
        -:  404:  // to begin with.
    #####:  405:  return state_ % range;
    %%%%%:  405-block  0
    %%%%%:  405-block  1
        -:  406:}
        -:  407:
        -:  408:// GTestIsInitialized() returns true if and only if the user has initialized
        -:  409:// Google Test.  Useful for catching the user mistake of not initializing
        -:  410:// Google Test before calling RUN_ALL_TESTS().
function _ZN7testing8internalL18GTestIsInitializedEv called 4 returned 100% blocks executed 100%
        4:  411:static bool GTestIsInitialized() { return GetArgvs().size() > 0; }
        4:  411-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  411-block  1
call    3 returned 4
call    4 returned 4
        4:  411-block  2
        -:  412:
        -:  413:// Iterates over a vector of TestSuites, keeping a running sum of the
        -:  414:// results of calling a given int-returning method on each.
        -:  415:// Returns the sum.
function _ZN7testing8internalL20SumOverTestSuiteListERKSt6vectorIPNS_9TestSuiteESaIS3_EEMS2_KFivE called 5 returned 100% blocks executed 91%
        5:  416:static int SumOverTestSuiteList(const std::vector<TestSuite*>& case_list,
        -:  417:                                int (TestSuite::*method)() const) {
        5:  418:  int sum = 0;
       10:  419:  for (size_t i = 0; i < case_list.size(); i++) {
        5:  419-block  0
       10:  419-block  1
call    0 returned 10
branch  1 taken 5
branch  2 taken 5 (fallthrough)
       5*:  420:    sum += (case_list[i]->*method)();
        5:  420-block  0
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
    %%%%%:  420-block  1
        5:  420-block  2
        5:  420-block  3
call    3 returned 5
        -:  421:  }
        5:  422:  return sum;
        5:  422-block  0
        -:  423:}
        -:  424:
        -:  425:// Returns true if and only if the test suite passed.
function _ZN7testing8internalL15TestSuitePassedEPKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####:  426:static bool TestSuitePassed(const TestSuite* test_suite) {
    #####:  427:  return test_suite->should_run() && test_suite->Passed();
    %%%%%:  427-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  427-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  427-block  2
    %%%%%:  427-block  3
    %%%%%:  427-block  4
        -:  428:}
        -:  429:
        -:  430:// Returns true if and only if the test suite failed.
function _ZN7testing8internalL15TestSuiteFailedEPKNS_9TestSuiteE called 2 returned 100% blocks executed 88%
        2:  431:static bool TestSuiteFailed(const TestSuite* test_suite) {
       2*:  432:  return test_suite->should_run() && test_suite->Failed();
        2:  432-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2:  432-block  1
call    3 returned 2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    %%%%%:  432-block  2
        2:  432-block  3
        2:  432-block  4
        -:  433:}
        -:  434:
        -:  435:// Returns true if and only if test_suite contains at least one test that
        -:  436:// should run.
function _ZN7testing8internalL18ShouldRunTestSuiteEPKNS_9TestSuiteE called 2 returned 100% blocks executed 100%
        2:  437:static bool ShouldRunTestSuite(const TestSuite* test_suite) {
        2:  438:  return test_suite->should_run();
        2:  438-block  0
call    0 returned 2
        -:  439:}
        -:  440:
        -:  441:// AssertHelper constructor.
function _ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_ called 0 returned 0% blocks executed 0%
    #####:  442:AssertHelper::AssertHelper(TestPartResult::Type type, const char* file,
    #####:  443:                           int line, const char* message)
    #####:  444:    : data_(new AssertHelperData(type, file, line, message)) {}
    %%%%%:  444-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  444-block  1
    $$$$$:  444-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  444-block  3
call    6 never executed
        -:  445:
function _ZN7testing8internal12AssertHelperD2Ev called 0 returned 0% blocks executed 0%
    #####:  446:AssertHelper::~AssertHelper() { delete data_; }
    %%%%%:  446-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  446-block  1
call    2 never executed
call    3 never executed
        -:  447:
        -:  448:// Message assignment, for assertion streaming support.
function _ZNK7testing8internal12AssertHelperaSERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####:  449:void AssertHelper::operator=(const Message& message) const {
    #####:  450:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%:  450-block  0
call    0 never executed
    #####:  451:      data_->type, data_->file, data_->line,
    %%%%%:  451-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  452:      AppendUserMessage(data_->message, message),
    %%%%%:  452-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  452-block  1
call    3 never executed
    $$$$$:  452-block  2
call    4 never executed
    $$$$$:  452-block  3
    #####:  453:      UnitTest::GetInstance()->impl()->CurrentOsStackTraceExceptTop(1)
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  453-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$:  453-block  1
call    8 never executed
        -:  454:      // Skips the stack frame for this function itself.
        -:  455:  );  // NOLINT
    #####:  456:}
        -:  457:
        -:  458:namespace {
        -:  459:
        -:  460:// When TEST_P is found without a matching INSTANTIATE_TEST_SUITE_P
        -:  461:// to creates test cases for it, a synthetic test case is
        -:  462:// inserted to report ether an error or a log message.
        -:  463://
        -:  464:// This configuration bit will likely be removed at some point.
        -:  465:constexpr bool kErrorOnUninstantiatedParameterizedTest = true;
        -:  466:constexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;
        -:  467:
        -:  468:// A test that fails at a given file/line location with a given message.
        -:  469:class FailureTest : public Test {
        -:  470: public:
function _ZN7testing8internal12_GLOBAL__N_111FailureTestC2ERKNS0_12CodeLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  471:  explicit FailureTest(const CodeLocation& loc, std::string error_message,
        -:  472:                       bool as_error)
    #####:  473:      : loc_(loc),
    #####:  474:        error_message_(std::move(error_message)),
    %%%%%:  474-block  0
call    0 never executed
call    1 never executed
    #####:  475:        as_error_(as_error) {}
    %%%%%:  475-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  475-block  1
call    4 never executed
        -:  476:
function _ZN7testing8internal12_GLOBAL__N_111FailureTest8TestBodyEv called 0 returned 0% blocks executed 0%
    #####:  477:  void TestBody() override {
    #####:  478:    if (as_error_) {
    %%%%%:  478-block  0
branch  0 never executed
branch  1 never executed
    #####:  479:      AssertHelper(TestPartResult::kNonFatalFailure, loc_.file.c_str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  479-block  0
call    3 never executed
    $$$$$:  479-block  1
call    4 never executed
    $$$$$:  479-block  2
    #####:  480:                   loc_.line, "") = Message() << error_message_;
    %%%%%:  480-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  480-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  480-block  2
call    6 never executed
    %%%%%:  480-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    $$$$$:  480-block  4
call   11 never executed
        -:  481:    } else {
    #####:  482:      std::cout << error_message_ << std::endl;
    %%%%%:  482-block  0
call    0 never executed
call    1 never executed
        -:  483:    }
    #####:  484:  }
    %%%%%:  484-block  0
        -:  485:
        -:  486: private:
        -:  487:  const CodeLocation loc_;
        -:  488:  const std::string error_message_;
        -:  489:  const bool as_error_;
        -:  490:};
        -:  491:
        -:  492:}  // namespace
        -:  493:
function _ZN7testing8internal33GetIgnoredParameterizedTestSuitesB5cxx11Ev called 2 returned 100% blocks executed 100%
        2:  494:std::set<std::string>* GetIgnoredParameterizedTestSuites() {
        2:  495:  return UnitTest::GetInstance()->impl()->ignored_parameterized_test_suites();
        2:  495-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        -:  496:}
        -:  497:
        -:  498:// Add a given test_suit to the list of them allow to go un-instantiated.
function _ZN7testing8internal13MarkAsIgnoredC2EPKc called 0 returned 0% blocks executed 0%
    #####:  499:MarkAsIgnored::MarkAsIgnored(const char* test_suite) {
    #####:  500:  GetIgnoredParameterizedTestSuites()->insert(test_suite);
    %%%%%:  500-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  500-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  500-block  2
call    8 never executed
call    9 never executed
    $$$$$:  500-block  3
call   10 never executed
    $$$$$:  500-block  4
call   11 never executed
    $$$$$:  500-block  5
    #####:  501:}
        -:  502:
        -:  503:// If this parameterized test suite has no instantiations (and that
        -:  504:// has not been marked as okay), emit a test case reporting that.
function _ZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEb called 0 returned 0% blocks executed 0%
    #####:  505:void InsertSyntheticTestCase(const std::string& name, CodeLocation location,
        -:  506:                             bool has_test_p) {
    #####:  507:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
    %%%%%:  507-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  508:  if (ignored.find(name) != ignored.end()) return;
    %%%%%:  508-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  508-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  508-block  2
    $$$$$:  508-block  3
    $$$$$:  508-block  4
        -:  509:
    #####:  510:  const char kMissingInstantiation[] =  //
        -:  511:      " is defined via TEST_P, but never instantiated. None of the test cases "
        -:  512:      "will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only "
        -:  513:      "ones provided expand to nothing."
        -:  514:      "\n\n"
        -:  515:      "Ideally, TEST_P definitions should only ever be included as part of "
        -:  516:      "binaries that intend to use them. (As opposed to, for example, being "
        -:  517:      "placed in a library that may be linked in to get other utilities.)";
        -:  518:
    #####:  519:  const char kMissingTestCase[] =  //
        -:  520:      " is instantiated via INSTANTIATE_TEST_SUITE_P, but no tests are "
        -:  521:      "defined via TEST_P . No test cases will run."
        -:  522:      "\n\n"
        -:  523:      "Ideally, INSTANTIATE_TEST_SUITE_P should only ever be invoked from "
        -:  524:      "code that always depend on code that provides TEST_P. Failing to do "
        -:  525:      "so is often an indication of dead code, e.g. the last TEST_P was "
        -:  526:      "removed but the rest got left behind.";
        -:  527:
        -:  528:  std::string message =
    #####:  529:      "Parameterized test suite " + name +
    %%%%%:  529-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  529-block  1
    %%%%%:  529-block  2
    %%%%%:  529-block  3
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  529-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  529-block  5
call   10 never executed
    $$$$$:  529-block  6
call   11 never executed
    $$$$$:  529-block  7
    $$$$$:  529-block  8
    #####:  530:      (has_test_p ? kMissingInstantiation : kMissingTestCase) +
    %%%%%:  530-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  530-block  1
call    4 never executed
    $$$$$:  530-block  2
        -:  531:      "\n\n"
        -:  532:      "To suppress this error for this test suite, insert the following line "
        -:  533:      "(in a non-header) in the namespace it is defined in:"
        -:  534:      "\n\n"
    #####:  535:      "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  535-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  535-block  1
call    3 never executed
    $$$$$:  535-block  2
call    4 never executed
    $$$$$:  535-block  3
    #####:  536:      name + ");";
    %%%%%:  536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  537:
    #####:  538:  std::string full_name = "UninstantiatedParameterizedTestSuite<" + name + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  538-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  538-block  1
call    6 never executed
    $$$$$:  538-block  2
call    7 never executed
    $$$$$:  538-block  3
    #####:  539:  RegisterTest(  //
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  540:      "GoogleTestVerification", full_name.c_str(),
        -:  541:      nullptr,  // No type parameter.
        -:  542:      nullptr,  // No value parameter.
function _ZZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEbENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  543:      location.file.c_str(), location.line, [message, location] {
    %%%%%:  543-block  0
call    0 never executed
    $$$$$:  543-block  1
call    1 never executed
    $$$$$:  543-block  2
    #####:  544:        return new FailureTest(location, message,
    #####:  545:                               kErrorOnUninstantiatedParameterizedTest);
    %%%%%:  545-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  545-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  545-block  2
call    7 never executed
    %%%%%:  545-block  3
    $$$$$:  545-block  4
call    8 never executed
    $$$$$:  545-block  5
    $$$$$:  545-block  6
branch  9 never executed
branch 10 never executed
    $$$$$:  545-block  7
call   11 never executed
        -:  546:      });
    #####:  547:}
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  547-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  547-block  1
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$:  547-block  2
branch  9 never executed
branch 10 never executed
    $$$$$:  547-block  3
call   11 never executed
    $$$$$:  547-block  4
call   12 never executed
    $$$$$:  547-block  5
call   13 never executed
        -:  548:
function _ZN7testing8internal34RegisterTypeParameterizedTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  549:void RegisterTypeParameterizedTestSuite(const char* test_suite_name,
        -:  550:                                        CodeLocation code_location) {
    #####:  551:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterTestSuite(
    %%%%%:  551-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  551-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  551-block  2
call    8 never executed
    $$$$$:  551-block  3
call    9 never executed
        -:  552:      test_suite_name, code_location);
    #####:  553:}
        -:  554:
function _ZN7testing8internal47RegisterTypeParameterizedTestSuiteInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  555:void RegisterTypeParameterizedTestSuiteInstantiation(const char* case_name) {
    #####:  556:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterInstantiation(
    %%%%%:  556-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  557:      case_name);
    #####:  558:}
        -:  559:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry17RegisterTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  560:void TypeParameterizedTestSuiteRegistry::RegisterTestSuite(
        -:  561:    const char* test_suite_name, CodeLocation code_location) {
    #####:  562:  suites_.emplace(std::string(test_suite_name),
    %%%%%:  562-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  562-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  562-block  2
call    7 never executed
call    8 never executed
    $$$$$:  562-block  3
call    9 never executed
    $$$$$:  562-block  4
call   10 never executed
    $$$$$:  562-block  5
    $$$$$:  562-block  6
    #####:  563:                  TypeParameterizedTestSuiteInfo(code_location));
    %%%%%:  563-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  563-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    $$$$$:  563-block  2
call    8 never executed
    $$$$$:  563-block  3
call    9 never executed
    $$$$$:  563-block  4
    #####:  564:}
        -:  565:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry21RegisterInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  566:void TypeParameterizedTestSuiteRegistry::RegisterInstantiation(
        -:  567:    const char* test_suite_name) {
    #####:  568:  auto it = suites_.find(std::string(test_suite_name));
    %%%%%:  568-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  568-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  568-block  2
call    7 never executed
call    8 never executed
    $$$$$:  568-block  3
call    9 never executed
    $$$$$:  568-block  4
call   10 never executed
    $$$$$:  568-block  5
    $$$$$:  568-block  6
    #####:  569:  if (it != suites_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  570:    it->second.instantiated = true;
    %%%%%:  570-block  0
call    0 never executed
        -:  571:  } else {
    #####:  572:    GTEST_LOG_(ERROR) << "Unknown type parameterized test suit '"
    %%%%%:  572-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  572-block  1
call    3 never executed
    %%%%%:  572-block  2
call    4 never executed
    $$$$$:  572-block  3
call    5 never executed
    $$$$$:  572-block  4
    #####:  573:                      << test_suite_name << "'";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  573-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  573-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  574:  }
    #####:  575:}
    %%%%%:  575-block  0
        -:  576:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEv called 2 returned 100% blocks executed 11%
        2:  577:void TypeParameterizedTestSuiteRegistry::CheckForInstantiations() {
        2:  578:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
        2:  578-block  0
call    0 returned 2
       2*:  579:  for (const auto& testcase : suites_) {
call    0 returned 2
call    1 returned 2
    %%%%%:  579-block  0
call    2 never executed
    %%%%%:  579-block  1
call    3 never executed
        2:  579-block  2
call    4 returned 2
branch  5 taken 0
branch  6 taken 2 (fallthrough)
    #####:  580:    if (testcase.second.instantiated) continue;
branch  0 never executed
branch  1 never executed
    %%%%%:  580-block  0
    %%%%%:  580-block  1
    #####:  581:    if (ignored.find(testcase.first) != ignored.end()) continue;
    %%%%%:  581-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  581-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  581-block  2
    $$$$$:  581-block  3
    $$$$$:  581-block  4
        -:  582:
        -:  583:    std::string message =
    #####:  584:        "Type parameterized test suite " + testcase.first +
    %%%%%:  584-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    $$$$$:  584-block  1
call    5 never executed
    $$$$$:  584-block  2
call    6 never executed
    $$$$$:  584-block  3
    $$$$$:  584-block  4
        -:  585:        " is defined via REGISTER_TYPED_TEST_SUITE_P, but never instantiated "
        -:  586:        "via INSTANTIATE_TYPED_TEST_SUITE_P. None of the test cases will run."
        -:  587:        "\n\n"
        -:  588:        "Ideally, TYPED_TEST_P definitions should only ever be included as "
        -:  589:        "part of binaries that intend to use them. (As opposed to, for "
        -:  590:        "example, being placed in a library that may be linked in to get other "
        -:  591:        "utilities.)"
        -:  592:        "\n\n"
        -:  593:        "To suppress this error for this test suite, insert the following line "
        -:  594:        "(in a non-header) in the namespace it is defined in:"
        -:  595:        "\n\n"
    #####:  596:        "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  596-block  1
call    3 never executed
    $$$$$:  596-block  2
call    4 never executed
    $$$$$:  596-block  3
    #####:  597:        testcase.first + ");";
    %%%%%:  597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  597-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  598:
        -:  599:    std::string full_name =
    #####:  600:        "UninstantiatedTypeParameterizedTestSuite<" + testcase.first + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  600-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  600-block  1
call    6 never executed
    $$$$$:  600-block  2
call    7 never executed
    $$$$$:  600-block  3
    #####:  601:    RegisterTest(  //
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  602:        "GoogleTestVerification", full_name.c_str(),
        -:  603:        nullptr,  // No type parameter.
        -:  604:        nullptr,  // No value parameter.
        -:  605:        testcase.second.code_location.file.c_str(),
function _ZZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEvENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  606:        testcase.second.code_location.line, [message, testcase] {
    %%%%%:  606-block  0
call    0 never executed
    $$$$$:  606-block  1
call    1 never executed
    $$$$$:  606-block  2
    #####:  607:          return new FailureTest(testcase.second.code_location, message,
    #####:  608:                                 kErrorOnUninstantiatedTypeParameterizedTest);
    %%%%%:  608-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  608-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  608-block  2
call    7 never executed
    %%%%%:  608-block  3
    $$$$$:  608-block  4
call    8 never executed
    $$$$$:  608-block  5
    $$$$$:  608-block  6
branch  9 never executed
branch 10 never executed
    $$$$$:  608-block  7
call   11 never executed
        -:  609:        });
    #####:  610:  }
call    0 never executed
call    1 never executed
    $$$$$:  610-block  0
call    2 never executed
    $$$$$:  610-block  1
call    3 never executed
       2*:  611:}
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  611-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  611-block  1
call    6 never executed
        2:  611-block  2
    $$$$$:  611-block  3
branch  7 never executed
branch  8 never executed
    $$$$$:  611-block  4
call    9 never executed
        -:  612:
        -:  613:// A copy of all command line arguments.  Set by InitGoogleTest().
        -:  614:static ::std::vector<std::string> g_argvs;
        -:  615:
function _ZN7testing8internal8GetArgvsB5cxx11Ev called 4 returned 100% blocks executed 100%
        4:  616:::std::vector<std::string> GetArgvs() {
        -:  617:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  618:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -:  619:  // ::string. This code converts it to the appropriate type.
        -:  620:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -:  621:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -:  622:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
        4:  623:  return g_argvs;
        4:  623-block  0
call    0 returned 4
        -:  624:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  625:}
        -:  626:
        -:  627:#if GTEST_HAS_FILE_SYSTEM
        -:  628:// Returns the current application's name, removing directory path if that
        -:  629:// is present.
function _ZN7testing8internal24GetCurrentExecutableNameEv called 0 returned 0% blocks executed 0%
    #####:  630:FilePath GetCurrentExecutableName() {
    #####:  631:  FilePath result;
    %%%%%:  631-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  632:
        -:  633:#if GTEST_OS_WINDOWS || GTEST_OS_OS2
        -:  634:  result.Set(FilePath(GetArgvs()[0]).RemoveExtension("exe"));
        -:  635:#else
    #####:  636:  result.Set(FilePath(GetArgvs()[0]));
    %%%%%:  636-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  636-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  636-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  636-block  3
call   10 never executed
call   11 never executed
    $$$$$:  636-block  4
call   12 never executed
    $$$$$:  636-block  5
call   13 never executed
    $$$$$:  636-block  6
    $$$$$:  636-block  7
        -:  637:#endif  // GTEST_OS_WINDOWS
        -:  638:
    #####:  639:  return result.RemoveDirectoryName();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  639-block  0
    #####:  640:}
    %%%%%:  640-block  0
call    0 never executed
    $$$$$:  640-block  1
call    1 never executed
        -:  641:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  642:
        -:  643:// Functions for processing the gtest_output flag.
        -:  644:
        -:  645:// Returns the output format, or "" for normal printed output.
function _ZN7testing8internal15UnitTestOptions15GetOutputFormatB5cxx11Ev called 3 returned 100% blocks executed 48%
        3:  646:std::string UnitTestOptions::GetOutputFormat() {
        3:  647:  std::string s = GTEST_FLAG_GET(output);
        3:  647-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  648:  const char* const gtest_output_flag = s.c_str();
        3:  648-block  0
call    0 returned 3
        3:  649:  const char* const colon = strchr(gtest_output_flag, ':');
        -:  650:  return (colon == nullptr)
        3:  651:             ? std::string(gtest_output_flag)
        3:  651-block  0
call    0 returned 3
        -:  652:             : std::string(gtest_output_flag,
       9*:  653:                           static_cast<size_t>(colon - gtest_output_flag));
branch  0 taken 3 (fallthrough)
branch  1 taken 0
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
    %%%%%:  653-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        3:  653-block  1
branch  9 taken 0 (fallthrough)
branch 10 taken 3
    %%%%%:  653-block  2
call   11 never executed
        3:  653-block  3
branch 12 taken 3 (fallthrough)
branch 13 taken 0
        3:  653-block  4
call   14 returned 3
        3:  653-block  5
    $$$$$:  653-block  6
branch 15 never executed
branch 16 never executed
    $$$$$:  653-block  7
call   17 never executed
    $$$$$:  653-block  8
    $$$$$:  653-block  9
branch 18 never executed
branch 19 never executed
    $$$$$:  653-block 10
call   20 never executed
    $$$$$:  653-block 11
        3:  654:}
        3:  654-block  0
call    0 returned 3
    $$$$$:  654-block  1
call    1 never executed
        -:  655:
        -:  656:#if GTEST_HAS_FILE_SYSTEM
        -:  657:// Returns the name of the requested output file, or the default if none
        -:  658:// was explicitly specified.
function _ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  659:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    #####:  660:  std::string s = GTEST_FLAG_GET(output);
    %%%%%:  660-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  661:  const char* const gtest_output_flag = s.c_str();
    %%%%%:  661-block  0
call    0 never executed
        -:  662:
    #####:  663:  std::string format = GetOutputFormat();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  664:  if (format.empty()) format = std::string(kDefaultOutputFormat);
    %%%%%:  664-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  664-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  664-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  664-block  3
call   10 never executed
    $$$$$:  664-block  4
    $$$$$:  664-block  5
        -:  665:
    #####:  666:  const char* const colon = strchr(gtest_output_flag, ':');
    #####:  667:  if (colon == nullptr)
    %%%%%:  667-block  0
branch  0 never executed
branch  1 never executed
    #####:  668:    return internal::FilePath::MakeFileName(
    %%%%%:  668-block  0
call    0 never executed
    %%%%%:  668-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  668-block  2
call    4 never executed
    $$$$$:  668-block  3
call    5 never executed
    $$$$$:  668-block  4
    #####:  669:               internal::FilePath(
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  669-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  669-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  669-block  2
call   13 never executed
    $$$$$:  669-block  3
call   14 never executed
    $$$$$:  669-block  4
call   15 never executed
    $$$$$:  669-block  5
    $$$$$:  669-block  6
    $$$$$:  669-block  7
    #####:  670:                   UnitTest::GetInstance()->original_working_dir()),
    %%%%%:  670-block  0
call    0 never executed
    #####:  671:               internal::FilePath(kDefaultOutputFile), 0, format.c_str())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  671-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  671-block  1
call   10 never executed
    $$$$$:  671-block  2
call   11 never executed
    $$$$$:  671-block  3
call   12 never executed
    $$$$$:  671-block  4
    $$$$$:  671-block  5
    $$$$$:  671-block  6
    #####:  672:        .string();
    %%%%%:  672-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  673:
    #####:  674:  internal::FilePath output_name(colon + 1);
    %%%%%:  674-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  674-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  674-block  2
call    7 never executed
call    8 never executed
    $$$$$:  674-block  3
call    9 never executed
    $$$$$:  674-block  4
call   10 never executed
    $$$$$:  674-block  5
    $$$$$:  674-block  6
    #####:  675:  if (!output_name.IsAbsolutePath())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  676:    output_name = internal::FilePath::ConcatPaths(
    %%%%%:  676-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  676-block  1
call    3 never executed
    $$$$$:  676-block  2
call    4 never executed
    $$$$$:  676-block  3
    #####:  677:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
    %%%%%:  677-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  677-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  677-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:  677-block  3
call   14 never executed
    $$$$$:  677-block  4
call   15 never executed
    $$$$$:  677-block  5
call   16 never executed
    $$$$$:  677-block  6
    $$$$$:  677-block  7
    $$$$$:  677-block  8
    #####:  678:        internal::FilePath(colon + 1));
    %%%%%:  678-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  678-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  678-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  678-block  3
call   13 never executed
    $$$$$:  678-block  4
call   14 never executed
    $$$$$:  678-block  5
call   15 never executed
    $$$$$:  678-block  6
    $$$$$:  678-block  7
    $$$$$:  678-block  8
        -:  679:
    #####:  680:  if (!output_name.IsDirectory()) return output_name.string();
    %%%%%:  680-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  680-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  681:
        -:  682:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    #####:  683:      output_name, internal::GetCurrentExecutableName(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  683-block  0
call    3 never executed
    $$$$$:  683-block  1
call    4 never executed
    $$$$$:  683-block  2
    #####:  684:      GetOutputFormat().c_str()));
    %%%%%:  684-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  684-block  1
call    3 never executed
    %%%%%:  684-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$:  684-block  3
call    8 never executed
    $$$$$:  684-block  4
    #####:  685:  return result.string();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  686:}
    %%%%%:  686-block  0
call    0 never executed
    %%%%%:  686-block  1
call    1 never executed
    %%%%%:  686-block  2
call    2 never executed
call    3 never executed
    $$$$$:  686-block  3
call    4 never executed
    $$$$$:  686-block  4
call    5 never executed
    $$$$$:  686-block  5
call    6 never executed
    $$$$$:  686-block  6
call    7 never executed
        -:  687:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  688:
        -:  689:// Returns true if and only if the wildcard pattern matches the string. Each
        -:  690:// pattern consists of regular characters, single-character wildcards (?), and
        -:  691:// multi-character wildcards (*).
        -:  692://
        -:  693:// This function implements a linear-time string globbing algorithm based on
        -:  694:// https://research.swtch.com/glob.
function _ZN7testing8internalL20PatternMatchesStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcSA_ called 12 returned 100% blocks executed 74%
       12:  695:static bool PatternMatchesString(const std::string& name_str,
        -:  696:                                 const char* pattern, const char* pattern_end) {
       12:  697:  const char* name = name_str.c_str();
       12:  697-block  0
call    0 returned 12
       12:  698:  const char* const name_begin = name;
       12:  699:  const char* const name_end = name + name_str.size();
call    0 returned 12
        -:  700:
       12:  701:  const char* pattern_next = pattern;
       12:  702:  const char* name_next = name;
        -:  703:
     100*:  704:  while (pattern < pattern_end || name < name_end) {
      100:  704-block  0
branch  0 taken 100
branch  1 taken 0 (fallthrough)
    %%%%%:  704-block  1
branch  2 never executed
branch  3 never executed
      100:  705:    if (pattern < pattern_end) {
      100:  705-block  0
branch  0 taken 100 (fallthrough)
branch  1 taken 0
      100:  706:      switch (*pattern) {
      100:  706-block  0
branch  0 taken 52
branch  1 taken 0
branch  2 taken 48
       52:  707:        default:  // Match an ordinary character.
      52*:  708:          if (name < name_end && *name == *pattern) {
       52:  708-block  0
branch  0 taken 44 (fallthrough)
branch  1 taken 8
       44:  708-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 44
    #####:  709:            ++pattern;
    #####:  710:            ++name;
    #####:  711:            continue;
    %%%%%:  711-block  0
        -:  712:          }
       52:  713:          break;
       52:  713-block  0
    #####:  714:        case '?':  // Match any single character.
    #####:  715:          if (name < name_end) {
    %%%%%:  715-block  0
branch  0 never executed
branch  1 never executed
    #####:  716:            ++pattern;
    #####:  717:            ++name;
    #####:  718:            continue;
    %%%%%:  718-block  0
        -:  719:          }
    #####:  720:          break;
    %%%%%:  720-block  0
       48:  721:        case '*':
        -:  722:          // Match zero or more characters. Start by skipping over the wildcard
        -:  723:          // and matching zero characters from name. If that fails, restart and
        -:  724:          // match one more character than the last attempt.
       48:  725:          pattern_next = pattern;
       48:  726:          name_next = name + 1;
       48:  727:          ++pattern;
       48:  728:          continue;
       48:  728-block  0
        -:  729:      }
        -:  730:    }
        -:  731:    // Failed to match a character. Restart if possible.
       52:  732:    if (name_begin < name_next && name_next <= name_end) {
       52:  732-block  0
branch  0 taken 48 (fallthrough)
branch  1 taken 4
       48:  732-block  1
branch  2 taken 40 (fallthrough)
branch  3 taken 8
       40:  733:      pattern = pattern_next;
       40:  734:      name = name_next;
       40:  735:      continue;
       40:  735-block  0
        -:  736:    }
       12:  737:    return false;
       12:  737-block  0
        -:  738:  }
    #####:  739:  return true;
    %%%%%:  739-block  0
        -:  740:}
        -:  741:
        -:  742:namespace {
        -:  743:
function _ZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 18 returned 100% blocks executed 100%
       18:  744:bool IsGlobPattern(const std::string& pattern) {
       18:  745:  return std::any_of(pattern.begin(), pattern.end(),
       18:  745-block  0
call    0 returned 18
call    1 returned 18
call    2 returned 18
function _ZZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlcE_clEc called 92 returned 100% blocks executed 100%
      110:  746:                     [](const char c) { return c == '?' || c == '*'; });
       92:  746-block  0
branch  0 taken 92 (fallthrough)
branch  1 taken 0
       92:  746-block  1
branch  2 taken 16 (fallthrough)
branch  3 taken 76
       16:  746-block  2
       76:  746-block  3
       92:  746-block  4
        -:  747:}
        -:  748:
        -:  749:class UnitTestFilter {
        -:  750: public:
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2Ev called 4 returned 100% blocks executed 100%
        4:  751:  UnitTestFilter() = default;
        4:  751-block  0
call    0 returned 4
call    1 returned 4
        -:  752:
        -:  753:  // Constructs a filter from a string of patterns separated by `:`.
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 77%
        6:  754:  explicit UnitTestFilter(const std::string& filter) {
        6:  754-block  0
call    0 returned 6
call    1 returned 6
        -:  755:    // By design "" filter matches "" string.
        6:  756:    std::vector<std::string> all_patterns;
        6:  757:    SplitString(filter, ':', &all_patterns);
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  758:    const auto exact_match_patterns_begin = std::partition(
        6:  758-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
        -:  759:        all_patterns.begin(), all_patterns.end(), &IsGlobPattern);
        -:  760:
       12:  761:    glob_patterns_.reserve(static_cast<size_t>(
        6:  762:        std::distance(all_patterns.begin(), exact_match_patterns_begin)));
        6:  762-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:  762-block  1
call    4 returned 6
branch  5 taken 6 (fallthrough)
branch  6 taken 0 (throw)
       12:  763:    std::move(all_patterns.begin(), exact_match_patterns_begin,
        6:  763-block  0
call    0 returned 6
        6:  763-block  1
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
        6:  764:              std::inserter(glob_patterns_, glob_patterns_.begin()));
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
       12:  765:    std::move(
        6:  765-block  0
call    0 returned 6
        6:  765-block  1
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
        -:  766:        exact_match_patterns_begin, all_patterns.end(),
        6:  767:        std::inserter(exact_match_patterns_, exact_match_patterns_.begin()));
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  768:  }
        6:  768-block  0
call    0 returned 6
    $$$$$:  768-block  1
call    1 never executed
    $$$$$:  768-block  2
call    2 never executed
    $$$$$:  768-block  3
call    3 never executed
        -:  769:
        -:  770:  // Returns true if and only if name matches at least one of the patterns in
        -:  771:  // the filter.
function _ZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 10 returned 100% blocks executed 100%
       10:  772:  bool MatchesName(const std::string& name) const {
       18:  773:    return exact_match_patterns_.count(name) > 0 ||
       10:  773-block  0
call    0 returned 10
branch  1 taken 8 (fallthrough)
branch  2 taken 2
        2:  773-block  1
        8:  773-block  2
        8:  774:           std::any_of(glob_patterns_.begin(), glob_patterns_.end(),
        8:  774-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
branch  3 taken 0 (fallthrough)
branch  4 taken 8
function _ZZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlSA_E_clESA_ called 12 returned 100% blocks executed 100%
       24:  775:                       [&name](const std::string& pattern) {
       12:  776:                         return PatternMatchesString(
call    0 returned 12
call    1 returned 12
        -:  777:                             name, pattern.c_str(),
       24:  778:                             pattern.c_str() + pattern.size());
       12:  778-block  0
call    0 returned 12
call    1 returned 12
       10:  779:                       });
       10:  779-block  0
        -:  780:  }
        -:  781:
        -:  782: private:
        -:  783:  std::vector<std::string> glob_patterns_;
        -:  784:  std::unordered_set<std::string> exact_match_patterns_;
        -:  785:};
        -:  786:
        -:  787:class PositiveAndNegativeUnitTestFilter {
        -:  788: public:
        -:  789:  // Constructs a positive and a negative filter from a string. The string
        -:  790:  // contains a positive filter optionally followed by a '-' character and a
        -:  791:  // negative filter. In case only a negative filter is provided the positive
        -:  792:  // filter will be assumed "*".
        -:  793:  // A filter is a list of patterns separated by ':'.
function _ZN7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 20%
        2:  794:  explicit PositiveAndNegativeUnitTestFilter(const std::string& filter) {
        2:  794-block  0
call    0 returned 2
call    1 returned 2
        2:  795:    std::vector<std::string> positive_and_negative_filters;
        -:  796:
        -:  797:    // NOTE: `SplitString` always returns a non-empty container.
        2:  798:    SplitString(filter, '-', &positive_and_negative_filters);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  799:    const auto& positive_filter = positive_and_negative_filters.front();
        2:  799-block  0
call    0 returned 2
        -:  800:
        2:  801:    if (positive_and_negative_filters.size() > 1) {
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  802:      positive_filter_ = UnitTestFilter(
    %%%%%:  802-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  802-block  1
    #####:  803:          positive_filter.empty() ? kUniversalFilter : positive_filter);
    %%%%%:  803-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  803-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  803-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  803-block  3
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  803-block  4
call   14 never executed
    $$$$$:  803-block  5
call   15 never executed
    $$$$$:  803-block  6
branch 16 never executed
branch 17 never executed
    $$$$$:  803-block  7
call   18 never executed
    $$$$$:  803-block  8
    $$$$$:  803-block  9
        -:  804:
        -:  805:      // TODO(b/214626361): Fail on multiple '-' characters
        -:  806:      // For the moment to preserve old behavior we concatenate the rest of the
        -:  807:      // string parts with `-` as separator to generate the negative filter.
    #####:  808:      auto negative_filter_string = positive_and_negative_filters[1];
    %%%%%:  808-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  809:      for (std::size_t i = 2; i < positive_and_negative_filters.size(); i++)
    %%%%%:  809-block  0
    %%%%%:  809-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  810:        negative_filter_string =
    #####:  811:            negative_filter_string + '-' + positive_and_negative_filters[i];
    %%%%%:  811-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  811-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  811-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  811-block  3
call   10 never executed
    $$$$$:  811-block  4
    $$$$$:  811-block  5
    #####:  812:      negative_filter_ = UnitTestFilter(negative_filter_string);
    %%%%%:  812-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  812-block  1
call    3 never executed
call    4 never executed
    $$$$$:  812-block  2
    #####:  813:    } else {
call    0 never executed
    $$$$$:  813-block  0
call    1 never executed
        -:  814:      // In case we don't have a negative filter and positive filter is ""
        -:  815:      // we do not use kUniversalFilter by design as opposed to when we have a
        -:  816:      // negative filter.
        2:  817:      positive_filter_ = UnitTestFilter(positive_filter);
        2:  817-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  817-block  1
call    3 returned 2
call    4 returned 2
    $$$$$:  817-block  2
        -:  818:    }
        2:  819:  }
        2:  819-block  0
call    0 returned 2
    $$$$$:  819-block  1
call    1 never executed
    $$$$$:  819-block  2
call    2 never executed
    $$$$$:  819-block  3
call    3 never executed
        -:  820:
        -:  821:  // Returns true if and only if test name (this is generated by appending test
        -:  822:  // suit name and test name via a '.' character) matches the positive filter
        -:  823:  // and does not match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 2 returned 100% blocks executed 64%
        2:  824:  bool MatchesTest(const std::string& test_suite_name,
        -:  825:                   const std::string& test_name) const {
        2:  826:    return MatchesName(test_suite_name + "." + test_name);
        2:  826-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  826-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  826-block  2
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
        2:  826-block  3
        2:  826-block  4
call    9 returned 2
call   10 returned 2
        2:  826-block  5
    $$$$$:  826-block  6
call   11 never executed
    $$$$$:  826-block  7
call   12 never executed
    $$$$$:  826-block  8
        -:  827:  }
        -:  828:
        -:  829:  // Returns true if and only if name matches the positive filter and does not
        -:  830:  // match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 88%
        2:  831:  bool MatchesName(const std::string& name) const {
       4*:  832:    return positive_filter_.MatchesName(name) &&
        2:  832-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2:  832-block  1
    %%%%%:  832-block  2
        4:  833:           !negative_filter_.MatchesName(name);
        2:  833-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2:  833-block  1
        -:  834:  }
        -:  835:
        -:  836: private:
        -:  837:  UnitTestFilter positive_filter_;
        -:  838:  UnitTestFilter negative_filter_;
        -:  839:};
        -:  840:}  // namespace
        -:  841:
function _ZN7testing8internal15UnitTestOptions13MatchesFilterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc called 0 returned 0% blocks executed 0%
    #####:  842:bool UnitTestOptions::MatchesFilter(const std::string& name_str,
        -:  843:                                    const char* filter) {
    #####:  844:  return UnitTestFilter(filter).MatchesName(name_str);
    %%%%%:  844-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  844-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  844-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  844-block  3
    %%%%%:  844-block  4
call   10 never executed
call   11 never executed
call   12 never executed
    %%%%%:  844-block  5
    $$$$$:  844-block  6
call   13 never executed
    $$$$$:  844-block  7
call   14 never executed
    $$$$$:  844-block  8
call   15 never executed
    $$$$$:  844-block  9
    $$$$$:  844-block 10
        -:  845:}
        -:  846:
        -:  847:// Returns true if and only if the user-specified filter matches the test
        -:  848:// suite name and the test name.
function _ZN7testing8internal15UnitTestOptions17FilterMatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####:  849:bool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,
        -:  850:                                        const std::string& test_name) {
        -:  851:  // Split --gtest_filter at '-', if there is one, to separate into
        -:  852:  // positive filter and negative filter portions
    #####:  853:  return PositiveAndNegativeUnitTestFilter(GTEST_FLAG_GET(filter))
    %%%%%:  853-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  853-block  1
call    3 never executed
    $$$$$:  853-block  2
call    4 never executed
    #####:  854:      .MatchesTest(test_suite_name, test_name);
    %%%%%:  854-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  854-block  1
    %%%%%:  854-block  2
        -:  855:}
        -:  856:
        -:  857:#if GTEST_HAS_SEH
        -:  858:// Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the
        -:  859:// given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.
        -:  860:// This function is useful as an __except condition.
        -:  861:int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {
        -:  862:  // Google Test should handle a SEH exception if:
        -:  863:  //   1. the user wants it to, AND
        -:  864:  //   2. this is not a breakpoint exception, AND
        -:  865:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -:  866:  //      apparently).
        -:  867:  //
        -:  868:  // SEH exception code for C++ exceptions.
        -:  869:  // (see http://support.microsoft.com/kb/185294 for more information).
        -:  870:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -:  871:
        -:  872:  bool should_handle = true;
        -:  873:
        -:  874:  if (!GTEST_FLAG_GET(catch_exceptions))
        -:  875:    should_handle = false;
        -:  876:  else if (exception_code == EXCEPTION_BREAKPOINT)
        -:  877:    should_handle = false;
        -:  878:  else if (exception_code == kCxxExceptionCode)
        -:  879:    should_handle = false;
        -:  880:
        -:  881:  return should_handle ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH;
        -:  882:}
        -:  883:#endif  // GTEST_HAS_SEH
        -:  884:
        -:  885:}  // namespace internal
        -:  886:
        -:  887:// The c'tor sets this object as the test part result reporter used by
        -:  888:// Google Test.  The 'result' parameter specifies where to report the
        -:  889:// results. Intercepts only failures from the current thread.
function _ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  890:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  891:    TestPartResultArray* result)
    #####:  892:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD), result_(result) {
    %%%%%:  892-block  0
call    0 never executed
    #####:  893:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  894:}
    %%%%%:  894-block  0
    $$$$$:  894-block  1
call    0 never executed
        -:  895:
        -:  896:// The c'tor sets this object as the test part result reporter used by
        -:  897:// Google Test.  The 'result' parameter specifies where to report the
        -:  898:// results.
function _ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  899:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  900:    InterceptMode intercept_mode, TestPartResultArray* result)
    #####:  901:    : intercept_mode_(intercept_mode), result_(result) {
    %%%%%:  901-block  0
call    0 never executed
    #####:  902:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  903:}
    %%%%%:  903-block  0
    $$$$$:  903-block  1
call    0 never executed
        -:  904:
function _ZN7testing32ScopedFakeTestPartResultReporter4InitEv called 0 returned 0% blocks executed 0%
    #####:  905:void ScopedFakeTestPartResultReporter::Init() {
    #####:  906:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  906-block  0
call    0 never executed
    #####:  907:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  908:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    %%%%%:  908-block  0
call    0 never executed
    #####:  909:    impl->SetGlobalTestPartResultReporter(this);
call    0 never executed
        -:  910:  } else {
    #####:  911:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    %%%%%:  911-block  0
call    0 never executed
    #####:  912:    impl->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
        -:  913:  }
    #####:  914:}
        -:  915:
        -:  916:// The d'tor restores the test part result reporter used by Google Test
        -:  917:// before.
    #####:  918:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  919:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    #####:  920:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  921:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  922:  } else {
    #####:  923:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  924:  }
    #####:  925:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD0Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
    #####:  918:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
        -:  919:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        -:  920:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
        -:  921:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  922:  } else {
        -:  923:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  924:  }
    #####:  925:}
    %%%%%:  925-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD2Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:  918:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  919:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  919-block  0
call    0 never executed
    #####:  920:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  921:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%:  921-block  0
call    0 never executed
        -:  922:  } else {
    #####:  923:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%:  923-block  0
call    0 never executed
        -:  924:  }
    #####:  925:}
    %%%%%:  925-block  0
call    0 never executed
------------------
        -:  926:
        -:  927:// Increments the test part result count and remembers the result.
        -:  928:// This method is from the TestPartResultReporterInterface interface.
function _ZN7testing32ScopedFakeTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  929:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
        -:  930:    const TestPartResult& result) {
    #####:  931:  result_->Append(result);
    %%%%%:  931-block  0
call    0 never executed
    #####:  932:}
        -:  933:
        -:  934:namespace internal {
        -:  935:
        -:  936:// Returns the type ID of ::testing::Test.  We should always call this
        -:  937:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -:  938:// testing::Test.  This is to work around a suspected linker bug when
        -:  939:// using Google Test as a framework on Mac OS X.  The bug causes
        -:  940:// GetTypeId< ::testing::Test>() to return different values depending
        -:  941:// on whether the call is from the Google Test framework itself or
        -:  942:// from user test code.  GetTestTypeId() is guaranteed to always
        -:  943:// return the same value, as it always calls GetTypeId<>() from the
        -:  944:// gtest.cc, which is within the Google Test framework.
function _ZN7testing8internal13GetTestTypeIdEv called 4 returned 100% blocks executed 100%
        4:  945:TypeId GetTestTypeId() { return GetTypeId<Test>(); }
        4:  945-block  0
call    0 returned 4
        -:  946:
        -:  947:// The value of GetTestTypeId() as seen from within the Google Test
        -:  948:// library.  This is solely for testing GetTestTypeId().
        -:  949:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
        -:  950:
        -:  951:// This predicate-formatter checks that 'results' contains a test part
        -:  952:// failure of the given type and that the failure message contains the
        -:  953:// given substring.
function _ZN7testing8internalL13HasOneFailureEPKcS2_S2_RKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  954:static AssertionResult HasOneFailure(const char* /* results_expr */,
        -:  955:                                     const char* /* type_expr */,
        -:  956:                                     const char* /* substr_expr */,
        -:  957:                                     const TestPartResultArray& results,
        -:  958:                                     TestPartResult::Type type,
        -:  959:                                     const std::string& substr) {
        -:  960:  const std::string expected(type == TestPartResult::kFatalFailure
        -:  961:                                 ? "1 fatal failure"
    #####:  962:                                 : "1 non-fatal failure");
    %%%%%:  962-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  962-block  1
    %%%%%:  962-block  2
    %%%%%:  962-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  962-block  4
call    6 never executed
    $$$$$:  962-block  5
call    7 never executed
    $$$$$:  962-block  6
    #####:  963:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  964:  if (results.size() != 1) {
    %%%%%:  964-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  965:    msg << "Expected: " << expected << "\n"
    %%%%%:  965-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  965-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  965-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  966:        << "  Actual: " << results.size() << " failures";
    %%%%%:  966-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  966-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  966-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  966-block  3
    #####:  967:    for (int i = 0; i < results.size(); i++) {
    %%%%%:  967-block  0
    %%%%%:  967-block  1
    %%%%%:  967-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  968:      msg << "\n" << results.GetTestPartResult(i);
    %%%%%:  968-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  968-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  968-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  969:    }
    #####:  970:    return AssertionFailure() << msg;
    %%%%%:  970-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  970-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  970-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  970-block  3
call    9 never executed
    $$$$$:  970-block  4
call   10 never executed
    $$$$$:  970-block  5
        -:  971:  }
        -:  972:
    #####:  973:  const TestPartResult& r = results.GetTestPartResult(0);
    %%%%%:  973-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  974:  if (r.type() != type) {
    %%%%%:  974-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  975:    return AssertionFailure() << "Expected: " << expected << "\n"
    %%%%%:  975-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  975-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  975-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  975-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  975-block  4
call   12 never executed
    $$$$$:  975-block  5
call   13 never executed
    $$$$$:  975-block  6
    #####:  976:                              << "  Actual:\n"
    %%%%%:  976-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  977:                              << r;
    %%%%%:  977-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  977-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  978:  }
        -:  979:
    #####:  980:  if (strstr(r.message(), substr.c_str()) == nullptr) {
    %%%%%:  980-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  981:    return AssertionFailure()
    %%%%%:  981-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  981-block  1
call    3 never executed
    $$$$$:  981-block  2
call    4 never executed
    $$$$$:  981-block  3
    #####:  982:           << "Expected: " << expected << " containing \"" << substr << "\"\n"
    %%%%%:  982-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  982-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  982-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  982-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  982-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####:  983:           << "  Actual:\n"
    %%%%%:  983-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  984:           << r;
    %%%%%:  984-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  984-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  985:  }
        -:  986:
    #####:  987:  return AssertionSuccess();
    %%%%%:  987-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  988:}
    %%%%%:  988-block  0
call    0 never executed
call    1 never executed
    $$$$$:  988-block  1
call    2 never executed
    $$$$$:  988-block  2
call    3 never executed
        -:  989:
        -:  990:// The constructor of SingleFailureChecker remembers where to look up
        -:  991:// test part results, what type of failure we expect, and what
        -:  992:// substring the failure message should contain.
function _ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  993:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -:  994:                                           TestPartResult::Type type,
    #####:  995:                                           const std::string& substr)
    #####:  996:    : results_(results), type_(type), substr_(substr) {}
    %%%%%:  996-block  0
call    0 never executed
        -:  997:
        -:  998:// The destructor of SingleFailureChecker verifies that the given
        -:  999:// TestPartResultArray contains exactly one failure that has the given
        -: 1000:// type and contains the given substring.  If that's not the case, a
        -: 1001:// non-fatal failure will be generated.
function _ZN7testing8internal20SingleFailureCheckerD2Ev called 0 returned 0% blocks executed 0%
    #####: 1002:SingleFailureChecker::~SingleFailureChecker() {
    #####: 1003:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%: 1003-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1003-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%: 1003-block  2
call   10 never executed
    #####: 1004:}
call    0 never executed
        -: 1005:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE called 2 returned 100% blocks executed 100%
        2: 1006:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        2: 1007:    UnitTestImpl* unit_test)
        2: 1008:    : unit_test_(unit_test) {}
        2: 1008-block  0
call    0 returned 2
        -: 1009:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 1010:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        -: 1011:    const TestPartResult& result) {
    #####: 1012:  unit_test_->current_test_result()->AddTestPartResult(result);
    %%%%%: 1012-block  0
call    0 never executed
call    1 never executed
    #####: 1013:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1014:}
        -: 1015:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE called 2 returned 100% blocks executed 100%
        2: 1016:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        2: 1017:    UnitTestImpl* unit_test)
        2: 1018:    : unit_test_(unit_test) {}
        2: 1018-block  0
call    0 returned 2
        -: 1019:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 1020:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        -: 1021:    const TestPartResult& result) {
    #####: 1022:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
    %%%%%: 1022-block  0
call    0 never executed
call    1 never executed
    #####: 1023:}
        -: 1024:
        -: 1025:// Returns the global test part result reporter.
        -: 1026:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl31GetGlobalTestPartResultReporterEv called 0 returned 0% blocks executed 0%
    #####: 1027:UnitTestImpl::GetGlobalTestPartResultReporter() {
    #####: 1028:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1028-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1029:  return global_test_part_result_reporter_;
    %%%%%: 1029-block  0
    #####: 1030:}
    %%%%%: 1030-block  0
call    0 never executed
        -: 1031:
        -: 1032:// Sets the global test part result reporter.
function _ZN7testing8internal12UnitTestImpl31SetGlobalTestPartResultReporterEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1033:void UnitTestImpl::SetGlobalTestPartResultReporter(
        -: 1034:    TestPartResultReporterInterface* reporter) {
    #####: 1035:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1035-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1036:  global_test_part_result_reporter_ = reporter;
    #####: 1037:}
    %%%%%: 1037-block  0
call    0 never executed
        -: 1038:
        -: 1039:// Returns the test part result reporter for the current thread.
        -: 1040:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl41GetTestPartResultReporterForCurrentThreadEv called 0 returned 0% blocks executed 0%
    #####: 1041:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
    #####: 1042:  return per_thread_test_part_result_reporter_.get();
    %%%%%: 1042-block  0
call    0 never executed
        -: 1043:}
        -: 1044:
        -: 1045:// Sets the test part result reporter for the current thread.
function _ZN7testing8internal12UnitTestImpl41SetTestPartResultReporterForCurrentThreadEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1046:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
        -: 1047:    TestPartResultReporterInterface* reporter) {
    #####: 1048:  per_thread_test_part_result_reporter_.set(reporter);
    %%%%%: 1048-block  0
call    0 never executed
    #####: 1049:}
        -: 1050:
        -: 1051:// Gets the number of successful test suites.
function _ZNK7testing8internal12UnitTestImpl27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 1052:int UnitTestImpl::successful_test_suite_count() const {
    #####: 1053:  return CountIf(test_suites_, TestSuitePassed);
    %%%%%: 1053-block  0
call    0 never executed
        -: 1054:}
        -: 1055:
        -: 1056:// Gets the number of failed test suites.
function _ZNK7testing8internal12UnitTestImpl23failed_test_suite_countEv called 2 returned 100% blocks executed 100%
        2: 1057:int UnitTestImpl::failed_test_suite_count() const {
        2: 1058:  return CountIf(test_suites_, TestSuiteFailed);
        2: 1058-block  0
call    0 returned 2
        -: 1059:}
        -: 1060:
        -: 1061:// Gets the number of all test suites.
function _ZNK7testing8internal12UnitTestImpl22total_test_suite_countEv called 2 returned 100% blocks executed 100%
        2: 1062:int UnitTestImpl::total_test_suite_count() const {
        2: 1063:  return static_cast<int>(test_suites_.size());
        2: 1063-block  0
call    0 returned 2
        -: 1064:}
        -: 1065:
        -: 1066:// Gets the number of all test suites that contain at least one test
        -: 1067:// that should run.
function _ZNK7testing8internal12UnitTestImpl23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1068:int UnitTestImpl::test_suite_to_run_count() const {
        2: 1069:  return CountIf(test_suites_, ShouldRunTestSuite);
        2: 1069-block  0
call    0 returned 2
        -: 1070:}
        -: 1071:
        -: 1072:// Gets the number of successful tests.
function _ZNK7testing8internal12UnitTestImpl21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 1073:int UnitTestImpl::successful_test_count() const {
        1: 1074:  return SumOverTestSuiteList(test_suites_, &TestSuite::successful_test_count);
        1: 1074-block  0
call    0 returned 1
        -: 1075:}
        -: 1076:
        -: 1077:// Gets the number of skipped tests.
function _ZNK7testing8internal12UnitTestImpl18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 1078:int UnitTestImpl::skipped_test_count() const {
        1: 1079:  return SumOverTestSuiteList(test_suites_, &TestSuite::skipped_test_count);
        1: 1079-block  0
call    0 returned 1
        -: 1080:}
        -: 1081:
        -: 1082:// Gets the number of failed tests.
function _ZNK7testing8internal12UnitTestImpl17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1083:int UnitTestImpl::failed_test_count() const {
    #####: 1084:  return SumOverTestSuiteList(test_suites_, &TestSuite::failed_test_count);
    %%%%%: 1084-block  0
call    0 never executed
        -: 1085:}
        -: 1086:
        -: 1087:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8internal12UnitTestImpl30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 1088:int UnitTestImpl::reportable_disabled_test_count() const {
        1: 1089:  return SumOverTestSuiteList(test_suites_,
        1: 1089-block  0
call    0 returned 1
        1: 1090:                              &TestSuite::reportable_disabled_test_count);
        -: 1091:}
        -: 1092:
        -: 1093:// Gets the number of disabled tests.
function _ZNK7testing8internal12UnitTestImpl19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1094:int UnitTestImpl::disabled_test_count() const {
    #####: 1095:  return SumOverTestSuiteList(test_suites_, &TestSuite::disabled_test_count);
    %%%%%: 1095-block  0
call    0 never executed
        -: 1096:}
        -: 1097:
        -: 1098:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8internal12UnitTestImpl21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1099:int UnitTestImpl::reportable_test_count() const {
    #####: 1100:  return SumOverTestSuiteList(test_suites_, &TestSuite::reportable_test_count);
    %%%%%: 1100-block  0
call    0 never executed
        -: 1101:}
        -: 1102:
        -: 1103:// Gets the number of all tests.
function _ZNK7testing8internal12UnitTestImpl16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1104:int UnitTestImpl::total_test_count() const {
    #####: 1105:  return SumOverTestSuiteList(test_suites_, &TestSuite::total_test_count);
    %%%%%: 1105-block  0
call    0 never executed
        -: 1106:}
        -: 1107:
        -: 1108:// Gets the number of tests that should run.
function _ZNK7testing8internal12UnitTestImpl17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1109:int UnitTestImpl::test_to_run_count() const {
        2: 1110:  return SumOverTestSuiteList(test_suites_, &TestSuite::test_to_run_count);
        2: 1110-block  0
call    0 returned 2
        -: 1111:}
        -: 1112:
        -: 1113:// Returns the current OS stack trace as an std::string.
        -: 1114://
        -: 1115:// The maximum number of stack frames to be included is specified by
        -: 1116:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 1117:// specifies the number of top frames to be skipped, which doesn't
        -: 1118:// count against the number of frames to be included.
        -: 1119://
        -: 1120:// For example, if Foo() calls Bar(), which in turn calls
        -: 1121:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -: 1122:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal12UnitTestImpl28CurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 1123:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
    #####: 1124:  return os_stack_trace_getter()->CurrentStackTrace(
    %%%%%: 1124-block  0
call    0 never executed
        -: 1125:      static_cast<int>(GTEST_FLAG_GET(stack_trace_depth)), skip_count + 1
        -: 1126:      // Skips the user-specified number of frames plus this function
        -: 1127:      // itself.
    #####: 1128:  );  // NOLINT
call    0 never executed
        -: 1129:}
        -: 1130:
        -: 1131:// A helper class for measuring elapsed times.
        -: 1132:class Timer {
        -: 1133: public:
function _ZN7testing8internal5TimerC2Ev called 3 returned 100% blocks executed 100%
        3: 1134:  Timer() : start_(clock::now()) {}
        3: 1134-block  0
call    0 returned 3
        -: 1135:
        -: 1136:  // Return time elapsed in milliseconds since the timer was created.
function _ZN7testing8internal5Timer7ElapsedEv called 3 returned 100% blocks executed 78%
        3: 1137:  TimeInMillis Elapsed() {
        6: 1138:    return std::chrono::duration_cast<std::chrono::milliseconds>(clock::now() -
        3: 1138-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 1138-block  1
    $$$$$: 1138-block  2
        3: 1139:                                                                 start_)
        3: 1139-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        6: 1140:        .count();
        3: 1140-block  0
call    0 returned 3
        3: 1140-block  1
        -: 1141:  }
        -: 1142:
        -: 1143: private:
        -: 1144:  // Fall back to the system_clock when building with newlib on a system
        -: 1145:  // without a monotonic clock.
        -: 1146:#if defined(_NEWLIB_VERSION) && !defined(CLOCK_MONOTONIC)
        -: 1147:  using clock = std::chrono::system_clock;
        -: 1148:#else
        -: 1149:  using clock = std::chrono::steady_clock;
        -: 1150:#endif
        -: 1151:  clock::time_point start_;
        -: 1152:};
        -: 1153:
        -: 1154:// Returns a timestamp as milliseconds since the epoch. Note this time may jump
        -: 1155:// around subject to adjustments by the system, to measure elapsed time use
        -: 1156:// Timer instead.
function _ZN7testing8internal15GetTimeInMillisEv called 4 returned 100% blocks executed 73%
        4: 1157:TimeInMillis GetTimeInMillis() {
        4: 1158:  return std::chrono::duration_cast<std::chrono::milliseconds>(
        4: 1158-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 1159:             std::chrono::system_clock::now() -
call    0 returned 4
    $$$$$: 1159-block  0
    $$$$$: 1159-block  1
       12: 1160:             std::chrono::system_clock::from_time_t(0))
        4: 1160-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 1160-block  1
        8: 1161:      .count();
        4: 1161-block  0
call    0 returned 4
        4: 1161-block  1
        -: 1162:}
        -: 1163:
        -: 1164:// Utilities
        -: 1165:
        -: 1166:// class String.
        -: 1167:
        -: 1168:#if GTEST_OS_WINDOWS_MOBILE
        -: 1169:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -: 1170:// memory using new. The caller is responsible for deleting the return
        -: 1171:// value using delete[]. Returns the wide string, or NULL if the
        -: 1172:// input is NULL.
        -: 1173:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -: 1174:  if (!ansi) return nullptr;
        -: 1175:  const int length = strlen(ansi);
        -: 1176:  const int unicode_length =
        -: 1177:      MultiByteToWideChar(CP_ACP, 0, ansi, length, nullptr, 0);
        -: 1178:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -: 1179:  MultiByteToWideChar(CP_ACP, 0, ansi, length, unicode, unicode_length);
        -: 1180:  unicode[unicode_length] = 0;
        -: 1181:  return unicode;
        -: 1182:}
        -: 1183:
        -: 1184:// Creates an ANSI string from the given wide string, allocating
        -: 1185:// memory using new. The caller is responsible for deleting the return
        -: 1186:// value using delete[]. Returns the ANSI string, or NULL if the
        -: 1187:// input is NULL.
        -: 1188:const char* String::Utf16ToAnsi(LPCWSTR utf16_str) {
        -: 1189:  if (!utf16_str) return nullptr;
        -: 1190:  const int ansi_length = WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, nullptr,
        -: 1191:                                              0, nullptr, nullptr);
        -: 1192:  char* ansi = new char[ansi_length + 1];
        -: 1193:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, ansi, ansi_length, nullptr,
        -: 1194:                      nullptr);
        -: 1195:  ansi[ansi_length] = 0;
        -: 1196:  return ansi;
        -: 1197:}
        -: 1198:
        -: 1199:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1200:
        -: 1201:// Compares two C strings.  Returns true if and only if they have the same
        -: 1202:// content.
        -: 1203://
        -: 1204:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -: 1205:// C string is considered different to any non-NULL C string,
        -: 1206:// including the empty string.
function _ZN7testing8internal6String13CStringEqualsEPKcS3_ called 2 returned 100% blocks executed 67%
        2: 1207:bool String::CStringEquals(const char* lhs, const char* rhs) {
       2*: 1208:  if (lhs == nullptr) return rhs == nullptr;
        2: 1208-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1208-block  1
        -: 1209:
       2*: 1210:  if (rhs == nullptr) return false;
        2: 1210-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1210-block  1
        -: 1211:
        2: 1212:  return strcmp(lhs, rhs) == 0;
        2: 1212-block  0
        -: 1213:}
        -: 1214:
        -: 1215:#if GTEST_HAS_STD_WSTRING
        -: 1216:
        -: 1217:// Converts an array of wide chars to a narrow string using the UTF-8
        -: 1218:// encoding, and streams the result to the given Message object.
function _ZN7testing8internalL24StreamWideCharsToMessageEPKwmPNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1219:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
        -: 1220:                                     Message* msg) {
    #####: 1221:  for (size_t i = 0; i != length;) {  // NOLINT
    %%%%%: 1221-block  0
    %%%%%: 1221-block  1
branch  0 never executed
branch  1 never executed
    #####: 1222:    if (wstr[i] != L'\0') {
    %%%%%: 1222-block  0
branch  0 never executed
branch  1 never executed
    #####: 1223:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
    %%%%%: 1223-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1223-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1223-block  2
call    6 never executed
    $$$$$: 1223-block  3
call    7 never executed
    $$$$$: 1223-block  4
call    8 never executed
    #####: 1224:      while (i != length && wstr[i] != L'\0') i++;
    %%%%%: 1224-block  0
    %%%%%: 1224-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1224-block  2
branch  2 never executed
branch  3 never executed
        -: 1225:    } else {
    #####: 1226:      *msg << '\0';
    %%%%%: 1226-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1227:      i++;
    %%%%%: 1227-block  0
        -: 1228:    }
        -: 1229:  }
    #####: 1230:}
    %%%%%: 1230-block  0
        -: 1231:
        -: 1232:#endif  // GTEST_HAS_STD_WSTRING
        -: 1233:
function _ZN7testing8internal11SplitStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcPSt6vectorIS6_SaIS6_EE called 8 returned 100% blocks executed 68%
        8: 1234:void SplitString(const ::std::string& str, char delimiter,
        -: 1235:                 ::std::vector< ::std::string>* dest) {
        8: 1236:  ::std::vector< ::std::string> parsed;
        8: 1237:  ::std::string::size_type pos = 0;
       20: 1238:  while (::testing::internal::AlwaysTrue()) {
        8: 1238-block  0
       20: 1238-block  1
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20: 1238-block  2
branch  3 taken 20
branch  4 taken 0 (fallthrough)
       20: 1239:    const ::std::string::size_type colon = str.find(delimiter, pos);
       20: 1239-block  0
call    0 returned 20
       20: 1240:    if (colon == ::std::string::npos) {
branch  0 taken 8 (fallthrough)
branch  1 taken 12
        8: 1241:      parsed.push_back(str.substr(pos));
        8: 1241-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8: 1241-block  1
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
        8: 1241-block  2
call    6 returned 8
    $$$$$: 1241-block  3
call    7 never executed
    $$$$$: 1241-block  4
        8: 1242:      break;
        -: 1243:    } else {
       12: 1244:      parsed.push_back(str.substr(pos, colon - pos));
       12: 1244-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12: 1244-block  1
call    3 returned 12
branch  4 taken 12 (fallthrough)
branch  5 taken 0 (throw)
       12: 1244-block  2
call    6 returned 12
    $$$$$: 1244-block  3
call    7 never executed
    $$$$$: 1244-block  4
       12: 1245:      pos = colon + 1;
        -: 1246:    }
        -: 1247:  }
        8: 1248:  dest->swap(parsed);
        8: 1248-block  0
call    0 returned 8
        8: 1249:}
call    0 returned 8
    $$$$$: 1249-block  0
call    1 never executed
        -: 1250:
        -: 1251:}  // namespace internal
        -: 1252:
        -: 1253:// Constructs an empty Message.
        -: 1254:// We allocate the stringstream separately because otherwise each use of
        -: 1255:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -: 1256:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -: 1257:// the stack space.
function _ZN7testing7MessageC2Ev called 104 returned 100% blocks executed 80%
      104: 1258:Message::Message() : ss_(new ::std::stringstream) {
      104: 1258-block  0
call    0 returned 104
call    1 returned 104
branch  2 taken 104 (fallthrough)
branch  3 taken 0 (throw)
      104: 1258-block  1
call    4 returned 104
    $$$$$: 1258-block  2
branch  5 never executed
branch  6 never executed
    $$$$$: 1258-block  3
call    7 never executed
        -: 1259:  // By default, we want there to be enough precision when printing
        -: 1260:  // a double to a Message.
      104: 1261:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 returned 104
call    1 returned 104
call    2 returned 104
      104: 1262:}
        -: 1263:
        -: 1264:// These two overloads allow streaming a wide C string to a Message
        -: 1265:// using the UTF-8 encoding.
function _ZN7testing7MessagelsEPKw called 0 returned 0% blocks executed 0%
    #####: 1266:Message& Message::operator<<(const wchar_t* wide_c_str) {
    #####: 1267:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1267-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1267-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1267-block  2
call    6 never executed
    %%%%%: 1267-block  3
    $$$$$: 1267-block  4
call    7 never executed
        -: 1268:}
function _ZN7testing7MessagelsEPw called 0 returned 0% blocks executed 0%
    #####: 1269:Message& Message::operator<<(wchar_t* wide_c_str) {
    #####: 1270:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1270-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1270-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1270-block  2
call    6 never executed
    %%%%%: 1270-block  3
    $$$$$: 1270-block  4
call    7 never executed
        -: 1271:}
        -: 1272:
        -: 1273:#if GTEST_HAS_STD_WSTRING
        -: 1274:// Converts the given wide string to a narrow string using the UTF-8
        -: 1275:// encoding, and streams the result to this Message object.
function _ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 0 returned 0% blocks executed 0%
    #####: 1276:Message& Message::operator<<(const ::std::wstring& wstr) {
    #####: 1277:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
    %%%%%: 1277-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1278:  return *this;
        -: 1279:}
        -: 1280:#endif  // GTEST_HAS_STD_WSTRING
        -: 1281:
        -: 1282:// Gets the text streamed to this object so far as an std::string.
        -: 1283:// Each '\0' character in the buffer is replaced with "\\0".
function _ZNK7testing7Message9GetStringB5cxx11Ev called 104 returned 100% blocks executed 100%
      104: 1284:std::string Message::GetString() const {
      104: 1285:  return internal::StringStreamToString(ss_.get());
      104: 1285-block  0
call    0 returned 104
call    1 returned 104
        -: 1286:}
        -: 1287:
        -: 1288:namespace internal {
        -: 1289:
        -: 1290:namespace edit_distance {
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorImSaImEES6_ called 0 returned 0% blocks executed 0%
    #####: 1291:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
        -: 1292:                                            const std::vector<size_t>& right) {
        -: 1293:  std::vector<std::vector<double> > costs(
    #####: 1294:      left.size() + 1, std::vector<double>(right.size() + 1));
    %%%%%: 1294-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1294-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1294-block  2
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 1294-block  3
call   13 never executed
    $$$$$: 1294-block  4
call   14 never executed
    $$$$$: 1294-block  5
    $$$$$: 1294-block  6
    $$$$$: 1294-block  7
call   15 never executed
    $$$$$: 1294-block  8
        -: 1295:  std::vector<std::vector<EditType> > best_move(
    #####: 1296:      left.size() + 1, std::vector<EditType>(right.size() + 1));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1296-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1296-block  1
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 1296-block  2
call   13 never executed
    $$$$$: 1296-block  3
call   14 never executed
    $$$$$: 1296-block  4
    $$$$$: 1296-block  5
    $$$$$: 1296-block  6
call   15 never executed
    $$$$$: 1296-block  7
        -: 1297:
        -: 1298:  // Populate for empty right.
    #####: 1299:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    %%%%%: 1299-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1300:    costs[l_i][0] = static_cast<double>(l_i);
    %%%%%: 1300-block  0
call    0 never executed
call    1 never executed
    #####: 1301:    best_move[l_i][0] = kRemove;
call    0 never executed
call    1 never executed
        -: 1302:  }
        -: 1303:  // Populate for empty left.
    #####: 1304:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    %%%%%: 1304-block  0
    %%%%%: 1304-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1305:    costs[0][r_i] = static_cast<double>(r_i);
    %%%%%: 1305-block  0
call    0 never executed
call    1 never executed
    #####: 1306:    best_move[0][r_i] = kAdd;
call    0 never executed
call    1 never executed
        -: 1307:  }
        -: 1308:
    #####: 1309:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    %%%%%: 1309-block  0
    %%%%%: 1309-block  1
    %%%%%: 1309-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1310:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    %%%%%: 1310-block  0
    %%%%%: 1310-block  1
    %%%%%: 1310-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1311:      if (left[l_i] == right[r_i]) {
    %%%%%: 1311-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1312:        // Found a match. Consume it.
    #####: 1313:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    %%%%%: 1313-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1314:        best_move[l_i + 1][r_i + 1] = kMatch;
call    0 never executed
call    1 never executed
    #####: 1315:        continue;
        -: 1316:      }
        -: 1317:
    #####: 1318:      const double add = costs[l_i + 1][r_i];
    %%%%%: 1318-block  0
call    0 never executed
call    1 never executed
    #####: 1319:      const double remove = costs[l_i][r_i + 1];
call    0 never executed
call    1 never executed
    #####: 1320:      const double replace = costs[l_i][r_i];
call    0 never executed
call    1 never executed
    #####: 1321:      if (add < remove && add < replace) {
branch  0 never executed
branch  1 never executed
    %%%%%: 1321-block  0
branch  2 never executed
branch  3 never executed
    #####: 1322:        costs[l_i + 1][r_i + 1] = add + 1;
    %%%%%: 1322-block  0
call    0 never executed
call    1 never executed
    #####: 1323:        best_move[l_i + 1][r_i + 1] = kAdd;
call    0 never executed
call    1 never executed
    #####: 1324:      } else if (remove < add && remove < replace) {
    %%%%%: 1324-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1324-block  1
branch  2 never executed
branch  3 never executed
    #####: 1325:        costs[l_i + 1][r_i + 1] = remove + 1;
    %%%%%: 1325-block  0
call    0 never executed
call    1 never executed
    #####: 1326:        best_move[l_i + 1][r_i + 1] = kRemove;
call    0 never executed
call    1 never executed
        -: 1327:      } else {
        -: 1328:        // We make replace a little more expensive than add/remove to lower
        -: 1329:        // their priority.
    #####: 1330:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    %%%%%: 1330-block  0
call    0 never executed
call    1 never executed
    #####: 1331:        best_move[l_i + 1][r_i + 1] = kReplace;
call    0 never executed
call    1 never executed
        -: 1332:      }
        -: 1333:    }
        -: 1334:  }
        -: 1335:
        -: 1336:  // Reconstruct the best path. We do it in reverse order.
    #####: 1337:  std::vector<EditType> best_path;
    #####: 1338:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
    %%%%%: 1338-block  0
call    0 never executed
call    1 never executed
    %%%%%: 1338-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1338-block  2
branch  4 never executed
branch  5 never executed
    #####: 1339:    EditType move = best_move[l_i][r_i];
    %%%%%: 1339-block  0
call    0 never executed
call    1 never executed
    #####: 1340:    best_path.push_back(move);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1341:    l_i -= move != kAdd;
    #####: 1342:    r_i -= move != kRemove;
    %%%%%: 1342-block  0
        -: 1343:  }
    #####: 1344:  std::reverse(best_path.begin(), best_path.end());
    %%%%%: 1344-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1345:  return best_path;
    %%%%%: 1345-block  0
    %%%%%: 1345-block  1
    #####: 1346:}
    %%%%%: 1346-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1346-block  1
call    2 never executed
    $$$$$: 1346-block  2
call    3 never executed
    $$$$$: 1346-block  3
call    4 never executed
        -: 1347:
        -: 1348:namespace {
        -: 1349:
        -: 1350:// Helper class to convert string into ids with deduplication.
        -: 1351:class InternalStrings {
        -: 1352: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStrings5GetIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1353:  size_t GetId(const std::string& str) {
    #####: 1354:    IdMap::iterator it = ids_.find(str);
    %%%%%: 1354-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1355:    if (it != ids_.end()) return it->second;
    %%%%%: 1355-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1355-block  1
call    4 never executed
    #####: 1356:    size_t id = ids_.size();
    %%%%%: 1356-block  0
call    0 never executed
    #####: 1357:    return ids_[str] = id;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1357-block  0
        -: 1358:  }
        -: 1359:
        -: 1360: private:
        -: 1361:  typedef std::map<std::string, size_t> IdMap;
        -: 1362:  IdMap ids_;
        -: 1363:};
        -: 1364:
        -: 1365:}  // namespace
        -: 1366:
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_ called 0 returned 0% blocks executed 0%
    #####: 1367:std::vector<EditType> CalculateOptimalEdits(
        -: 1368:    const std::vector<std::string>& left,
        -: 1369:    const std::vector<std::string>& right) {
    #####: 1370:  std::vector<size_t> left_ids, right_ids;
        -: 1371:  {
    #####: 1372:    InternalStrings intern_table;
    %%%%%: 1372-block  0
call    0 never executed
    #####: 1373:    for (size_t i = 0; i < left.size(); ++i) {
    %%%%%: 1373-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1374:      left_ids.push_back(intern_table.GetId(left[i]));
    %%%%%: 1374-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1374-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1374-block  2
    $$$$$: 1374-block  3
        -: 1375:    }
    #####: 1376:    for (size_t i = 0; i < right.size(); ++i) {
    %%%%%: 1376-block  0
    %%%%%: 1376-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1377:      right_ids.push_back(intern_table.GetId(right[i]));
    %%%%%: 1377-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1377-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1377-block  2
    $$$$$: 1377-block  3
        -: 1378:    }
    #####: 1379:  }
    %%%%%: 1379-block  0
call    0 never executed
    $$$$$: 1379-block  1
call    1 never executed
    #####: 1380:  return CalculateOptimalEdits(left_ids, right_ids);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1380-block  0
    #####: 1381:}
    %%%%%: 1381-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1381-block  1
call    2 never executed
    $$$$$: 1381-block  2
call    3 never executed
        -: 1382:
        -: 1383:namespace {
        -: 1384:
        -: 1385:// Helper class that holds the state for one hunk and prints it out to the
        -: 1386:// stream.
        -: 1387:// It reorders adds/removes when possible to group all removes before all
        -: 1388:// adds. It also adds the hunk header before printint into the stream.
        -: 1389:class Hunk {
        -: 1390: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkC2Emm called 0 returned 0% blocks executed 0%
    #####: 1391:  Hunk(size_t left_start, size_t right_start)
    #####: 1392:      : left_start_(left_start),
    #####: 1393:        right_start_(right_start),
    #####: 1394:        adds_(),
    #####: 1395:        removes_(),
    #####: 1396:        common_() {}
    %%%%%: 1396-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1397:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk8PushLineEcPKc called 0 returned 0% blocks executed 0%
    #####: 1398:  void PushLine(char edit, const char* line) {
    #####: 1399:    switch (edit) {
    %%%%%: 1399-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1400:      case ' ':
    #####: 1401:        ++common_;
    #####: 1402:        FlushEdits();
    %%%%%: 1402-block  0
call    0 never executed
    #####: 1403:        hunk_.push_back(std::make_pair(' ', line));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1403-block  0
    $$$$$: 1403-block  1
call    4 never executed
    #####: 1404:        break;
    %%%%%: 1404-block  0
    #####: 1405:      case '-':
    #####: 1406:        ++removes_;
    #####: 1407:        hunk_removes_.push_back(std::make_pair('-', line));
    %%%%%: 1407-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1407-block  1
    $$$$$: 1407-block  2
call    4 never executed
    #####: 1408:        break;
    %%%%%: 1408-block  0
    #####: 1409:      case '+':
    #####: 1410:        ++adds_;
    #####: 1411:        hunk_adds_.push_back(std::make_pair('+', line));
    %%%%%: 1411-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1411-block  1
    #####: 1412:        break;
    %%%%%: 1412-block  0
        -: 1413:    }
    #####: 1414:  }
    %%%%%: 1414-block  0
        -: 1415:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk7PrintToEPSo called 0 returned 0% blocks executed 0%
    #####: 1416:  void PrintTo(std::ostream* os) {
    #####: 1417:    PrintHeader(os);
    %%%%%: 1417-block  0
call    0 never executed
    #####: 1418:    FlushEdits();
call    0 never executed
    #####: 1419:    for (std::list<std::pair<char, const char*> >::const_iterator it =
    #####: 1420:             hunk_.begin();
call    0 never executed
call    1 never executed
    #####: 1421:         it != hunk_.end(); ++it) {
    %%%%%: 1421-block  0
call    0 never executed
    %%%%%: 1421-block  1
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1422:      *os << it->first << it->second << "\n";
    %%%%%: 1422-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1422-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1422-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 1423:    }
    #####: 1424:  }
    %%%%%: 1424-block  0
        -: 1425:
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk9has_editsEv called 0 returned 0% blocks executed 0%
    #####: 1426:  bool has_edits() const { return adds_ || removes_; }
    %%%%%: 1426-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1426-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1426-block  2
    %%%%%: 1426-block  3
    %%%%%: 1426-block  4
        -: 1427:
        -: 1428: private:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk10FlushEditsEv called 0 returned 0% blocks executed 0%
    #####: 1429:  void FlushEdits() {
    #####: 1430:    hunk_.splice(hunk_.end(), hunk_removes_);
    %%%%%: 1430-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1431:    hunk_.splice(hunk_.end(), hunk_adds_);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1432:  }
        -: 1433:
        -: 1434:  // Print a unified diff header for one hunk.
        -: 1435:  // The format is
        -: 1436:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 1437:  // where the left/right parts are omitted if unnecessary.
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk11PrintHeaderEPSo called 0 returned 0% blocks executed 0%
    #####: 1438:  void PrintHeader(std::ostream* ss) const {
    #####: 1439:    *ss << "@@ ";
    %%%%%: 1439-block  0
call    0 never executed
    #####: 1440:    if (removes_) {
branch  0 never executed
branch  1 never executed
    #####: 1441:      *ss << "-" << left_start_ << "," << (removes_ + common_);
    %%%%%: 1441-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1442:    }
    #####: 1443:    if (removes_ && adds_) {
    %%%%%: 1443-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1443-block  1
branch  2 never executed
branch  3 never executed
    #####: 1444:      *ss << " ";
    %%%%%: 1444-block  0
call    0 never executed
        -: 1445:    }
    #####: 1446:    if (adds_) {
    %%%%%: 1446-block  0
branch  0 never executed
branch  1 never executed
    #####: 1447:      *ss << "+" << right_start_ << "," << (adds_ + common_);
    %%%%%: 1447-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1448:    }
    #####: 1449:    *ss << " @@\n";
    %%%%%: 1449-block  0
call    0 never executed
    #####: 1450:  }
        -: 1451:
        -: 1452:  size_t left_start_, right_start_;
        -: 1453:  size_t adds_, removes_, common_;
        -: 1454:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 1455:};
        -: 1456:
        -: 1457:}  // namespace
        -: 1458:
        -: 1459:// Create a list of diff hunks in Unified diff format.
        -: 1460:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 1461:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 1462:// addition.
        -: 1463:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 1464:// If two hunks are close enough that their contexts overlap, then they are
        -: 1465:// joined into one hunk.
function _ZN7testing8internal13edit_distance17CreateUnifiedDiffERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_m called 0 returned 0% blocks executed 0%
    #####: 1466:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
        -: 1467:                              const std::vector<std::string>& right,
        -: 1468:                              size_t context) {
    #####: 1469:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    %%%%%: 1469-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1470:
    #####: 1471:  size_t l_i = 0, r_i = 0, edit_i = 0;
    #####: 1472:  std::stringstream ss;
    %%%%%: 1472-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1473:  while (edit_i < edits.size()) {
    %%%%%: 1473-block  0
    %%%%%: 1473-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1474:    // Find first edit.
    #####: 1475:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    %%%%%: 1475-block  0
    %%%%%: 1475-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1475-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1475-block  3
    %%%%%: 1475-block  4
    %%%%%: 1475-block  5
branch  6 never executed
branch  7 never executed
    #####: 1476:      ++l_i;
    #####: 1477:      ++r_i;
    #####: 1478:      ++edit_i;
    %%%%%: 1478-block  0
        -: 1479:    }
        -: 1480:
        -: 1481:    // Find the first line to include in the hunk.
    #####: 1482:    const size_t prefix_context = std::min(l_i, context);
    %%%%%: 1482-block  0
call    0 never executed
    #####: 1483:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
call    0 never executed
    #####: 1484:    for (size_t i = prefix_context; i > 0; --i) {
    %%%%%: 1484-block  0
    %%%%%: 1484-block  1
branch  0 never executed
branch  1 never executed
    #####: 1485:      hunk.PushLine(' ', left[l_i - i].c_str());
    %%%%%: 1485-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1486:    }
        -: 1487:
        -: 1488:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 1489:    // is over.
    #####: 1490:    size_t n_suffix = 0;
    #####: 1491:    for (; edit_i < edits.size(); ++edit_i) {
    %%%%%: 1491-block  0
    %%%%%: 1491-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1492:      if (n_suffix >= context) {
    %%%%%: 1492-block  0
branch  0 never executed
branch  1 never executed
        -: 1493:        // Continue only if the next hunk is very close.
    #####: 1494:        auto it = edits.begin() + static_cast<int>(edit_i);
    %%%%%: 1494-block  0
call    0 never executed
call    1 never executed
    #####: 1495:        while (it != edits.end() && *it == kMatch) ++it;
    %%%%%: 1495-block  0
call    0 never executed
    %%%%%: 1495-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1495-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1495-block  3
    %%%%%: 1495-block  4
    %%%%%: 1495-block  5
branch  8 never executed
branch  9 never executed
    #####: 1496:        if (it == edits.end() ||
    %%%%%: 1496-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1496-block  1
    %%%%%: 1496-block  2
    #####: 1497:            static_cast<size_t>(it - edits.begin()) - edit_i >= context) {
    %%%%%: 1497-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1497-block  1
branch  4 never executed
branch  5 never executed
        -: 1498:          // There is no next edit or it is too far away.
    #####: 1499:          break;
    %%%%%: 1499-block  0
        -: 1500:        }
        -: 1501:      }
        -: 1502:
    #####: 1503:      EditType edit = edits[edit_i];
    %%%%%: 1503-block  0
call    0 never executed
        -: 1504:      // Reset count when a non match is found.
    #####: 1505:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
branch  0 never executed
branch  1 never executed
    %%%%%: 1505-block  0
    %%%%%: 1505-block  1
        -: 1506:
    #####: 1507:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    %%%%%: 1507-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1507-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1507-block  2
branch  4 never executed
branch  5 never executed
    #####: 1508:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    %%%%%: 1508-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1508-block  1
    %%%%%: 1508-block  2
    %%%%%: 1508-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1509:      }
    #####: 1510:      if (edit == kAdd || edit == kReplace) {
    %%%%%: 1510-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1510-block  1
branch  2 never executed
branch  3 never executed
    #####: 1511:        hunk.PushLine('+', right[r_i].c_str());
    %%%%%: 1511-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1512:      }
        -: 1513:
        -: 1514:      // Advance indices, depending on edit type.
    #####: 1515:      l_i += edit != kAdd;
    #####: 1516:      r_i += edit != kRemove;
    %%%%%: 1516-block  0
        -: 1517:    }
        -: 1518:
    #####: 1519:    if (!hunk.has_edits()) {
    %%%%%: 1519-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1520:      // We are done. We don't want this hunk.
    #####: 1521:      break;
    %%%%%: 1521-block  0
        -: 1522:    }
        -: 1523:
    #####: 1524:    hunk.PrintTo(&ss);
    %%%%%: 1524-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1525:  }
    %%%%%: 1525-block  0
    %%%%%: 1525-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1525-block  2
call    3 never executed
    #####: 1526:  return ss.str();
    %%%%%: 1526-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1526-block  1
    #####: 1527:}
    %%%%%: 1527-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1527-block  1
call    2 never executed
    $$$$$: 1527-block  2
call    3 never executed
        -: 1528:
        -: 1529:}  // namespace edit_distance
        -: 1530:
        -: 1531:namespace {
        -: 1532:
        -: 1533:// The string representation of the values received in EqFailure() are already
        -: 1534:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 1535:// characters the same.
function _ZN7testing8internal12_GLOBAL__N_118SplitEscapedStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1536:std::vector<std::string> SplitEscapedString(const std::string& str) {
    #####: 1537:  std::vector<std::string> lines;
    #####: 1538:  size_t start = 0, end = str.size();
    %%%%%: 1538-block  0
call    0 never executed
    #####: 1539:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
branch  0 never executed
branch  1 never executed
    %%%%%: 1539-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1539-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1539-block  2
    %%%%%: 1539-block  3
    %%%%%: 1539-block  4
branch  8 never executed
branch  9 never executed
    #####: 1540:    ++start;
    #####: 1541:    --end;
    %%%%%: 1541-block  0
        -: 1542:  }
    #####: 1543:  bool escaped = false;
    #####: 1544:  for (size_t i = start; i + 1 < end; ++i) {
    %%%%%: 1544-block  0
    %%%%%: 1544-block  1
    %%%%%: 1544-block  2
branch  0 never executed
branch  1 never executed
    #####: 1545:    if (escaped) {
    %%%%%: 1545-block  0
branch  0 never executed
branch  1 never executed
    #####: 1546:      escaped = false;
    #####: 1547:      if (str[i] == 'n') {
    %%%%%: 1547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1548:        lines.push_back(str.substr(start, i - start - 1));
    %%%%%: 1548-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1548-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1548-block  2
call    6 never executed
    $$$$$: 1548-block  3
call    7 never executed
    $$$$$: 1548-block  4
    #####: 1549:        start = i + 1;
        -: 1550:      }
        -: 1551:    } else {
    #####: 1552:      escaped = str[i] == '\\';
    %%%%%: 1552-block  0
call    0 never executed
        -: 1553:    }
        -: 1554:  }
    #####: 1555:  lines.push_back(str.substr(start, end - start));
    %%%%%: 1555-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1555-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1555-block  2
call    6 never executed
    $$$$$: 1555-block  3
call    7 never executed
    $$$$$: 1555-block  4
    #####: 1556:  return lines;
    %%%%%: 1556-block  0
    =====: 1557:}
    $$$$$: 1557-block  0
call    0 never executed
        -: 1558:
        -: 1559:}  // namespace
        -: 1560:
        -: 1561:// Constructs and returns the message for an equality assertion
        -: 1562:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 1563://
        -: 1564:// The first four parameters are the expressions used in the assertion
        -: 1565:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 1566:// where foo is 5 and bar is 6, we have:
        -: 1567://
        -: 1568://   lhs_expression: "foo"
        -: 1569://   rhs_expression: "bar"
        -: 1570://   lhs_value:      "5"
        -: 1571://   rhs_value:      "6"
        -: 1572://
        -: 1573:// The ignoring_case parameter is true if and only if the assertion is a
        -: 1574:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 1575:// be inserted into the message.
function _ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 1576:AssertionResult EqFailure(const char* lhs_expression,
        -: 1577:                          const char* rhs_expression,
        -: 1578:                          const std::string& lhs_value,
        -: 1579:                          const std::string& rhs_value, bool ignoring_case) {
    #####: 1580:  Message msg;
    %%%%%: 1580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1581:  msg << "Expected equality of these values:";
    %%%%%: 1581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1582:  msg << "\n  " << lhs_expression;
    %%%%%: 1582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1582-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1583:  if (lhs_value != lhs_expression) {
    %%%%%: 1583-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1584:    msg << "\n    Which is: " << lhs_value;
    %%%%%: 1584-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1584-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1585:  }
    #####: 1586:  msg << "\n  " << rhs_expression;
    %%%%%: 1586-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1586-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1587:  if (rhs_value != rhs_expression) {
    %%%%%: 1587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1588:    msg << "\n    Which is: " << rhs_value;
    %%%%%: 1588-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1588-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1589:  }
        -: 1590:
    #####: 1591:  if (ignoring_case) {
    %%%%%: 1591-block  0
branch  0 never executed
branch  1 never executed
    #####: 1592:    msg << "\nIgnoring case";
    %%%%%: 1592-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1593:  }
        -: 1594:
    #####: 1595:  if (!lhs_value.empty() && !rhs_value.empty()) {
    %%%%%: 1595-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1595-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1595-block  2
    %%%%%: 1595-block  3
    %%%%%: 1595-block  4
branch  6 never executed
branch  7 never executed
    #####: 1596:    const std::vector<std::string> lhs_lines = SplitEscapedString(lhs_value);
    %%%%%: 1596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1597:    const std::vector<std::string> rhs_lines = SplitEscapedString(rhs_value);
    %%%%%: 1597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1598:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
    %%%%%: 1598-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1598-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1598-block  2
    %%%%%: 1598-block  3
    %%%%%: 1598-block  4
branch  6 never executed
branch  7 never executed
    #####: 1599:      msg << "\nWith diff:\n"
    %%%%%: 1599-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1600:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    %%%%%: 1600-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1600-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1600-block  2
call    6 never executed
    $$$$$: 1600-block  3
call    7 never executed
    $$$$$: 1600-block  4
        -: 1601:    }
    #####: 1602:  }
    %%%%%: 1602-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1602-block  1
call    2 never executed
    $$$$$: 1602-block  2
call    3 never executed
        -: 1603:
    #####: 1604:  return AssertionFailure() << msg;
    %%%%%: 1604-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1604-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1604-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1604-block  3
call    9 never executed
    %%%%%: 1604-block  4
    $$$$$: 1604-block  5
call   10 never executed
    $$$$$: 1604-block  6
    #####: 1605:}
call    0 never executed
    $$$$$: 1605-block  0
call    1 never executed
        -: 1606:
        -: 1607:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
function _ZN7testing8internal30GetBoolAssertionFailureMessageB5cxx11ERKNS_15AssertionResultEPKcS5_S5_ called 0 returned 0% blocks executed 0%
    #####: 1608:std::string GetBoolAssertionFailureMessage(
        -: 1609:    const AssertionResult& assertion_result, const char* expression_text,
        -: 1610:    const char* actual_predicate_value, const char* expected_predicate_value) {
    #####: 1611:  const char* actual_message = assertion_result.message();
    %%%%%: 1611-block  0
call    0 never executed
    #####: 1612:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1613:  msg << "Value of: " << expression_text
    %%%%%: 1613-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1613-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1614:      << "\n  Actual: " << actual_predicate_value;
    %%%%%: 1614-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1614-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1615:  if (actual_message[0] != '\0') msg << " (" << actual_message << ")";
    %%%%%: 1615-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1615-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1615-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1615-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1616:  msg << "\nExpected: " << expected_predicate_value;
    %%%%%: 1616-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1616-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1617:  return msg.GetString();
    %%%%%: 1617-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1617-block  1
    #####: 1618:}
    %%%%%: 1618-block  0
call    0 never executed
    $$$$$: 1618-block  1
call    1 never executed
        -: 1619:
        -: 1620:// Helper function for implementing ASSERT_NEAR.
function _ZN7testing8internal20DoubleNearPredFormatEPKcS2_S2_ddd called 0 returned 0% blocks executed 0%
    #####: 1621:AssertionResult DoubleNearPredFormat(const char* expr1, const char* expr2,
        -: 1622:                                     const char* abs_error_expr, double val1,
        -: 1623:                                     double val2, double abs_error) {
    #####: 1624:  const double diff = fabs(val1 - val2);
    #####: 1625:  if (diff <= abs_error) return AssertionSuccess();
    %%%%%: 1625-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1625-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1626:
        -: 1627:  // Find the value which is closest to zero.
    #####: 1628:  const double min_abs = std::min(fabs(val1), fabs(val2));
    %%%%%: 1628-block  0
call    0 never executed
        -: 1629:  // Find the distance to the next double from that value.
        -: 1630:  const double epsilon =
    #####: 1631:      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;
call    0 never executed
        -: 1632:  // Detect the case where abs_error is so small that EXPECT_NEAR is
        -: 1633:  // effectively the same as EXPECT_EQUAL, and give an informative error
        -: 1634:  // message so that the situation can be more easily understood without
        -: 1635:  // requiring exotic floating-point knowledge.
        -: 1636:  // Don't do an epsilon check if abs_error is zero because that implies
        -: 1637:  // that an equality check was actually intended.
    #####: 1638:  if (!(std::isnan)(val1) && !(std::isnan)(val2) && abs_error > 0 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1638-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1638-block  1
branch  6 never executed
branch  7 never executed
    %%%%%: 1638-block  2
    %%%%%: 1638-block  3
    %%%%%: 1638-block  4
branch  8 never executed
branch  9 never executed
    #####: 1639:      abs_error < epsilon) {
    %%%%%: 1639-block  0
branch  0 never executed
branch  1 never executed
    #####: 1640:    return AssertionFailure()
    %%%%%: 1640-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1640-block  1
call    3 never executed
    $$$$$: 1640-block  2
call    4 never executed
    $$$$$: 1640-block  3
    #####: 1641:           << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1641-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1641-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1641-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1641-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1641-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1642:           << diff << ", where\n"
    %%%%%: 1642-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1642-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1643:           << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1643-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1643-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1643-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1643-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1644:           << expr2 << " evaluates to " << val2 << ".\nThe abs_error parameter "
    %%%%%: 1644-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1644-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1644-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1644-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1645:           << abs_error_expr << " evaluates to " << abs_error
    %%%%%: 1645-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1645-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1645-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1646:           << " which is smaller than the minimum distance between doubles for "
    #####: 1647:              "numbers of this magnitude which is "
    %%%%%: 1647-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1648:           << epsilon
    %%%%%: 1648-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1649:           << ", thus making this EXPECT_NEAR check equivalent to "
    #####: 1650:              "EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.";
    %%%%%: 1650-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1650-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1651:  }
    #####: 1652:  return AssertionFailure()
    %%%%%: 1652-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1652-block  1
call    3 never executed
    $$$$$: 1652-block  2
call    4 never executed
    $$$$$: 1652-block  3
    #####: 1653:         << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1653-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1653-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1653-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1653-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1653-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1654:         << diff << ", which exceeds " << abs_error_expr << ", where\n"
    %%%%%: 1654-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1654-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1654-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1654-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1655:         << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1655-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1655-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1655-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1655-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1656:         << expr2 << " evaluates to " << val2 << ", and\n"
    %%%%%: 1656-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1656-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1656-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1656-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1657:         << abs_error_expr << " evaluates to " << abs_error << ".";
    %%%%%: 1657-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1657-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1657-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1657-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1657-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1658:}
        -: 1659:
        -: 1660:// Helper template for implementing FloatLE() and DoubleLE().
        -: 1661:template <typename RawType>
    #####: 1662:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1663:                                RawType val1, RawType val2) {
        -: 1664:  // Returns success if val1 is less than val2,
    #####: 1665:  if (val1 < val2) {
    #####: 1666:    return AssertionSuccess();
        -: 1667:  }
        -: 1668:
        -: 1669:  // or if val1 is almost equal to val2.
    #####: 1670:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    #####: 1671:  if (lhs.AlmostEquals(rhs)) {
    #####: 1672:    return AssertionSuccess();
        -: 1673:  }
        -: 1674:
        -: 1675:  // Note that the above two checks will both fail if either val1 or
        -: 1676:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1677:  // any predicate involving a NaN must return false.
        -: 1678:
    #####: 1679:  ::std::stringstream val1_ss;
    #####: 1680:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1681:          << val1;
        -: 1682:
    #####: 1683:  ::std::stringstream val2_ss;
    #####: 1684:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1685:          << val2;
        -: 1686:
        -: 1687:  return AssertionFailure()
    #####: 1688:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    #####: 1689:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    #####: 1690:         << StringStreamToString(&val2_ss);
    #####: 1691:}
------------------
_ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1662:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1663:                                RawType val1, RawType val2) {
        -: 1664:  // Returns success if val1 is less than val2,
    #####: 1665:  if (val1 < val2) {
    %%%%%: 1665-block  0
branch  0 never executed
branch  1 never executed
    #####: 1666:    return AssertionSuccess();
    %%%%%: 1666-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1667:  }
        -: 1668:
        -: 1669:  // or if val1 is almost equal to val2.
    #####: 1670:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1670-block  0
call    0 never executed
call    1 never executed
    #####: 1671:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1671-block  0
branch  3 never executed
branch  4 never executed
    #####: 1672:    return AssertionSuccess();
    %%%%%: 1672-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1673:  }
        -: 1674:
        -: 1675:  // Note that the above two checks will both fail if either val1 or
        -: 1676:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1677:  // any predicate involving a NaN must return false.
        -: 1678:
    #####: 1679:  ::std::stringstream val1_ss;
    %%%%%: 1679-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1680:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1680-block  0
call    0 never executed
call    1 never executed
    #####: 1681:          << val1;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1682:
    #####: 1683:  ::std::stringstream val2_ss;
    %%%%%: 1683-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1684:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1684-block  0
call    0 never executed
call    1 never executed
    #####: 1685:          << val2;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1686:
        -: 1687:  return AssertionFailure()
    #####: 1688:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1688-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1688-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1688-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1688-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1688-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1688-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 1688-block  6
call   18 never executed
    $$$$$: 1688-block  7
    #####: 1689:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1689-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1689-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1689-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1689-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1689-block  4
call   13 never executed
    $$$$$: 1689-block  5
    #####: 1690:         << StringStreamToString(&val2_ss);
    %%%%%: 1690-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1690-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1690-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1690-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1690-block  4
call   11 never executed
    $$$$$: 1690-block  5
    #####: 1691:}
call    0 never executed
call    1 never executed
    $$$$$: 1691-block  0
call    2 never executed
    $$$$$: 1691-block  1
call    3 never executed
------------------
_ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1662:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1663:                                RawType val1, RawType val2) {
        -: 1664:  // Returns success if val1 is less than val2,
    #####: 1665:  if (val1 < val2) {
    %%%%%: 1665-block  0
branch  0 never executed
branch  1 never executed
    #####: 1666:    return AssertionSuccess();
    %%%%%: 1666-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1667:  }
        -: 1668:
        -: 1669:  // or if val1 is almost equal to val2.
    #####: 1670:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1670-block  0
call    0 never executed
call    1 never executed
    #####: 1671:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1671-block  0
branch  3 never executed
branch  4 never executed
    #####: 1672:    return AssertionSuccess();
    %%%%%: 1672-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1673:  }
        -: 1674:
        -: 1675:  // Note that the above two checks will both fail if either val1 or
        -: 1676:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1677:  // any predicate involving a NaN must return false.
        -: 1678:
    #####: 1679:  ::std::stringstream val1_ss;
    %%%%%: 1679-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1680:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1680-block  0
call    0 never executed
call    1 never executed
    #####: 1681:          << val1;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1682:
    #####: 1683:  ::std::stringstream val2_ss;
    %%%%%: 1683-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1684:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1684-block  0
call    0 never executed
call    1 never executed
    #####: 1685:          << val2;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1686:
        -: 1687:  return AssertionFailure()
    #####: 1688:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1688-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1688-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1688-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1688-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1688-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1688-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 1688-block  6
call   18 never executed
    $$$$$: 1688-block  7
    #####: 1689:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1689-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1689-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1689-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1689-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1689-block  4
call   13 never executed
    $$$$$: 1689-block  5
    #####: 1690:         << StringStreamToString(&val2_ss);
    %%%%%: 1690-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1690-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1690-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1690-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1690-block  4
call   11 never executed
    $$$$$: 1690-block  5
    #####: 1691:}
call    0 never executed
call    1 never executed
    $$$$$: 1691-block  0
call    2 never executed
    $$$$$: 1691-block  1
call    3 never executed
------------------
        -: 1692:
        -: 1693:}  // namespace internal
        -: 1694:
        -: 1695:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1696:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing7FloatLEEPKcS1_ff called 0 returned 0% blocks executed 0%
    #####: 1697:AssertionResult FloatLE(const char* expr1, const char* expr2, float val1,
        -: 1698:                        float val2) {
    #####: 1699:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    %%%%%: 1699-block  0
call    0 never executed
        -: 1700:}
        -: 1701:
        -: 1702:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1703:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing8DoubleLEEPKcS1_dd called 0 returned 0% blocks executed 0%
    #####: 1704:AssertionResult DoubleLE(const char* expr1, const char* expr2, double val1,
        -: 1705:                         double val2) {
    #####: 1706:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    %%%%%: 1706-block  0
call    0 never executed
        -: 1707:}
        -: 1708:
        -: 1709:namespace internal {
        -: 1710:
        -: 1711:// The helper function for {ASSERT|EXPECT}_STREQ.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1712:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 1713:                               const char* rhs_expression, const char* lhs,
        -: 1714:                               const char* rhs) {
    #####: 1715:  if (String::CStringEquals(lhs, rhs)) {
    %%%%%: 1715-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1716:    return AssertionSuccess();
    %%%%%: 1716-block  0
call    0 never executed
        -: 1717:  }
        -: 1718:
    #####: 1719:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 1719-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1719-block  1
call    3 never executed
    $$$$$: 1719-block  2
call    4 never executed
    $$$$$: 1719-block  3
    #####: 1720:                   PrintToString(rhs), false);
    %%%%%: 1720-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1720-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 1720-block  2
call    7 never executed
        -: 1721:}
        -: 1722:
        -: 1723:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
function _ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1724:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
        -: 1725:                                   const char* rhs_expression, const char* lhs,
        -: 1726:                                   const char* rhs) {
    #####: 1727:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    %%%%%: 1727-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1728:    return AssertionSuccess();
    %%%%%: 1728-block  0
call    0 never executed
        -: 1729:  }
        -: 1730:
    #####: 1731:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 1731-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1731-block  1
call    3 never executed
    $$$$$: 1731-block  2
call    4 never executed
    $$$$$: 1731-block  3
    #####: 1732:                   PrintToString(rhs), true);
    %%%%%: 1732-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1732-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 1732-block  2
call    7 never executed
        -: 1733:}
        -: 1734:
        -: 1735:// The helper function for {ASSERT|EXPECT}_STRNE.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1736:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 1737:                               const char* s2_expression, const char* s1,
        -: 1738:                               const char* s2) {
    #####: 1739:  if (!String::CStringEquals(s1, s2)) {
    %%%%%: 1739-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1740:    return AssertionSuccess();
    %%%%%: 1740-block  0
call    0 never executed
        -: 1741:  } else {
    #####: 1742:    return AssertionFailure()
    %%%%%: 1742-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1742-block  1
call    3 never executed
    $$$$$: 1742-block  2
call    4 never executed
    #####: 1743:           << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 1743-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1743-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1743-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1743-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1744:           << "), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1744-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1744-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1744-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1744-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1744-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1744-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 1745:  }
        -: 1746:}
        -: 1747:
        -: 1748:// The helper function for {ASSERT|EXPECT}_STRCASENE.
function _ZN7testing8internal18CmpHelperSTRCASENEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1749:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
        -: 1750:                                   const char* s2_expression, const char* s1,
        -: 1751:                                   const char* s2) {
    #####: 1752:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    %%%%%: 1752-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1753:    return AssertionSuccess();
    %%%%%: 1753-block  0
call    0 never executed
        -: 1754:  } else {
    #####: 1755:    return AssertionFailure()
    %%%%%: 1755-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1755-block  1
call    3 never executed
    $$$$$: 1755-block  2
call    4 never executed
    #####: 1756:           << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 1756-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1756-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1756-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1756-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1757:           << ") (ignoring case), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1757-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1757-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1757-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1757-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1757-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1757-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 1758:  }
        -: 1759:}
        -: 1760:
        -: 1761:}  // namespace internal
        -: 1762:
        -: 1763:namespace {
        -: 1764:
        -: 1765:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 1766:
        -: 1767:// This group of overloaded functions return true if and only if needle
        -: 1768:// is a substring of haystack.  NULL is considered a substring of
        -: 1769:// itself only.
        -: 1770:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1771:bool IsSubstringPred(const char* needle, const char* haystack) {
    #####: 1772:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1772-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1772-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1772-block  2
        -: 1773:
    #####: 1774:  return strstr(haystack, needle) != nullptr;
    %%%%%: 1774-block  0
        -: 1775:}
        -: 1776:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKwS2_ called 0 returned 0% blocks executed 0%
    #####: 1777:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    #####: 1778:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1778-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1778-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1778-block  2
        -: 1779:
    #####: 1780:  return wcsstr(haystack, needle) != nullptr;
    %%%%%: 1780-block  0
        -: 1781:}
        -: 1782:
        -: 1783:// StringType here can be either ::std::string or ::std::wstring.
        -: 1784:template <typename StringType>
    #####: 1785:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1786:  return haystack.find(needle) != StringType::npos;
        -: 1787:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1785:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1786:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1786-block  0
call    0 never executed
        -: 1787:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1785:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1786:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1786-block  0
call    0 never executed
        -: 1787:}
------------------
        -: 1788:
        -: 1789:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 1790:// depending on the value of the expected_to_be_substring parameter.
        -: 1791:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 1792:// or ::std::wstring.
        -: 1793:template <typename StringType>
    #####: 1794:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1795:                                const char* needle_expr,
        -: 1796:                                const char* haystack_expr,
        -: 1797:                                const StringType& needle,
        -: 1798:                                const StringType& haystack) {
    #####: 1799:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    #####: 1800:    return AssertionSuccess();
        -: 1801:
    #####: 1802:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1803:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1804:  return AssertionFailure()
    #####: 1805:         << "Value of: " << needle_expr << "\n"
    #####: 1806:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    #####: 1807:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    #####: 1808:         << "a substring of " << haystack_expr << "\n"
    #####: 1809:         << "Which is: " << begin_string_quote << haystack << "\"";
        -: 1810:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1794:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1795:                                const char* needle_expr,
        -: 1796:                                const char* haystack_expr,
        -: 1797:                                const StringType& needle,
        -: 1798:                                const StringType& haystack) {
    #####: 1799:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1799-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1800:    return AssertionSuccess();
    %%%%%: 1800-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1801:
    #####: 1802:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1803:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1804:  return AssertionFailure()
    #####: 1805:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1805-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1805-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1805-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1805-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1805-block  4
call   12 never executed
    $$$$$: 1805-block  5
    #####: 1806:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1806-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1806-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1806-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1806-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1807:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1807-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1807-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1807-block  2
    %%%%%: 1807-block  3
    %%%%%: 1807-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1807-block  5
call    8 never executed
    $$$$$: 1807-block  6
    #####: 1808:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1808-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1808-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1809:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1809-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1809-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1809-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1809-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1809-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1810:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1794:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1795:                                const char* needle_expr,
        -: 1796:                                const char* haystack_expr,
        -: 1797:                                const StringType& needle,
        -: 1798:                                const StringType& haystack) {
    #####: 1799:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1799-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1800:    return AssertionSuccess();
    %%%%%: 1800-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1801:
    #####: 1802:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1803:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1804:  return AssertionFailure()
    #####: 1805:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1805-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1805-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1805-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1805-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1805-block  4
call   12 never executed
    $$$$$: 1805-block  5
    #####: 1806:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1806-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1806-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1806-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1806-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1807:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1807-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1807-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1807-block  2
    %%%%%: 1807-block  3
    %%%%%: 1807-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1807-block  5
call    8 never executed
    $$$$$: 1807-block  6
    #####: 1808:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1808-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1808-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1809:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1809-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1809-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1809-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1809-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1809-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1810:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_ called 0 returned 0% blocks executed 0%
    #####: 1794:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1795:                                const char* needle_expr,
        -: 1796:                                const char* haystack_expr,
        -: 1797:                                const StringType& needle,
        -: 1798:                                const StringType& haystack) {
    #####: 1799:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1799-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1800:    return AssertionSuccess();
    %%%%%: 1800-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1801:
    #####: 1802:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1803:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1804:  return AssertionFailure()
    #####: 1805:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1805-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1805-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1805-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1805-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1805-block  4
call   12 never executed
    $$$$$: 1805-block  5
    #####: 1806:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1806-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1806-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1806-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1806-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1807:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1807-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1807-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1807-block  2
    %%%%%: 1807-block  3
    %%%%%: 1807-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1807-block  5
call    8 never executed
    $$$$$: 1807-block  6
    #####: 1808:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1808-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1808-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1809:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1809-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1809-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1809-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1809-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1809-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1810:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_ called 0 returned 0% blocks executed 0%
    #####: 1794:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1795:                                const char* needle_expr,
        -: 1796:                                const char* haystack_expr,
        -: 1797:                                const StringType& needle,
        -: 1798:                                const StringType& haystack) {
    #####: 1799:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1799-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1800:    return AssertionSuccess();
    %%%%%: 1800-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1801:
    #####: 1802:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1803:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1804:  return AssertionFailure()
    #####: 1805:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1805-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1805-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1805-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1805-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1805-block  4
call   12 never executed
    $$$$$: 1805-block  5
    #####: 1806:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1806-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1806-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1806-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1806-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1807:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1807-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1807-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1807-block  2
    %%%%%: 1807-block  3
    %%%%%: 1807-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1807-block  5
call    8 never executed
    $$$$$: 1807-block  6
    #####: 1808:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1808-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1808-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1809:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1809-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1809-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1809-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1809-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1809-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1810:}
------------------
        -: 1811:
        -: 1812:}  // namespace
        -: 1813:
        -: 1814:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 1815:// substring of haystack (NULL is considered a substring of itself
        -: 1816:// only), and return an appropriate error message when they fail.
        -: 1817:
function _ZN7testing11IsSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1818:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1819:                            const char* needle, const char* haystack) {
    #####: 1820:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1820-block  0
call    0 never executed
        -: 1821:}
        -: 1822:
function _ZN7testing11IsSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1823:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1824:                            const wchar_t* needle, const wchar_t* haystack) {
    #####: 1825:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1825-block  0
call    0 never executed
        -: 1826:}
        -: 1827:
function _ZN7testing14IsNotSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1828:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1829:                               const char* haystack_expr, const char* needle,
        -: 1830:                               const char* haystack) {
    #####: 1831:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1831-block  0
call    0 never executed
        -: 1832:}
        -: 1833:
function _ZN7testing14IsNotSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1834:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1835:                               const char* haystack_expr, const wchar_t* needle,
        -: 1836:                               const wchar_t* haystack) {
    #####: 1837:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1837-block  0
call    0 never executed
        -: 1838:}
        -: 1839:
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1840:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1841:                            const ::std::string& needle,
        -: 1842:                            const ::std::string& haystack) {
    #####: 1843:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1843-block  0
call    0 never executed
        -: 1844:}
        -: 1845:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1846:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1847:                               const char* haystack_expr,
        -: 1848:                               const ::std::string& needle,
        -: 1849:                               const ::std::string& haystack) {
    #####: 1850:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1850-block  0
call    0 never executed
        -: 1851:}
        -: 1852:
        -: 1853:#if GTEST_HAS_STD_WSTRING
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1854:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1855:                            const ::std::wstring& needle,
        -: 1856:                            const ::std::wstring& haystack) {
    #####: 1857:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1857-block  0
call    0 never executed
        -: 1858:}
        -: 1859:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1860:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1861:                               const char* haystack_expr,
        -: 1862:                               const ::std::wstring& needle,
        -: 1863:                               const ::std::wstring& haystack) {
    #####: 1864:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1864-block  0
call    0 never executed
        -: 1865:}
        -: 1866:#endif  // GTEST_HAS_STD_WSTRING
        -: 1867:
        -: 1868:namespace internal {
        -: 1869:
        -: 1870:#if GTEST_OS_WINDOWS
        -: 1871:
        -: 1872:namespace {
        -: 1873:
        -: 1874:// Helper function for IsHRESULT{SuccessFailure} predicates
        -: 1875:AssertionResult HRESULTFailureHelper(const char* expr, const char* expected,
        -: 1876:                                     long hr) {  // NOLINT
        -: 1877:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_TV_TITLE
        -: 1878:
        -: 1879:  // Windows CE doesn't support FormatMessage.
        -: 1880:  const char error_text[] = "";
        -: 1881:
        -: 1882:#else
        -: 1883:
        -: 1884:  // Looks up the human-readable system message for the HRESULT code
        -: 1885:  // and since we're not passing any params to FormatMessage, we don't
        -: 1886:  // want inserts expanded.
        -: 1887:  const DWORD kFlags =
        -: 1888:      FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS;
        -: 1889:  const DWORD kBufSize = 4096;
        -: 1890:  // Gets the system's human readable message string for this HRESULT.
        -: 1891:  char error_text[kBufSize] = {'\0'};
        -: 1892:  DWORD message_length = ::FormatMessageA(kFlags,
        -: 1893:                                          0,  // no source, we're asking system
        -: 1894:                                          static_cast<DWORD>(hr),  // the error
        -: 1895:                                          0,  // no line width restrictions
        -: 1896:                                          error_text,  // output buffer
        -: 1897:                                          kBufSize,    // buf size
        -: 1898:                                          nullptr);  // no arguments for inserts
        -: 1899:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
        -: 1900:  for (; message_length && IsSpace(error_text[message_length - 1]);
        -: 1901:       --message_length) {
        -: 1902:    error_text[message_length - 1] = '\0';
        -: 1903:  }
        -: 1904:
        -: 1905:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1906:
        -: 1907:  const std::string error_hex("0x" + String::FormatHexInt(hr));
        -: 1908:  return ::testing::AssertionFailure()
        -: 1909:         << "Expected: " << expr << " " << expected << ".\n"
        -: 1910:         << "  Actual: " << error_hex << " " << error_text << "\n";
        -: 1911:}
        -: 1912:
        -: 1913:}  // namespace
        -: 1914:
        -: 1915:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
        -: 1916:  if (SUCCEEDED(hr)) {
        -: 1917:    return AssertionSuccess();
        -: 1918:  }
        -: 1919:  return HRESULTFailureHelper(expr, "succeeds", hr);
        -: 1920:}
        -: 1921:
        -: 1922:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
        -: 1923:  if (FAILED(hr)) {
        -: 1924:    return AssertionSuccess();
        -: 1925:  }
        -: 1926:  return HRESULTFailureHelper(expr, "fails", hr);
        -: 1927:}
        -: 1928:
        -: 1929:#endif  // GTEST_OS_WINDOWS
        -: 1930:
        -: 1931:// Utility functions for encoding Unicode text (wide strings) in
        -: 1932:// UTF-8.
        -: 1933:
        -: 1934:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 1935:// like this:
        -: 1936://
        -: 1937:// Code-point length   Encoding
        -: 1938://   0 -  7 bits       0xxxxxxx
        -: 1939://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 1940://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 1941://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 1942:
        -: 1943:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 1944:constexpr uint32_t kMaxCodePoint1 = (static_cast<uint32_t>(1) << 7) - 1;
        -: 1945:
        -: 1946:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 1947:constexpr uint32_t kMaxCodePoint2 = (static_cast<uint32_t>(1) << (5 + 6)) - 1;
        -: 1948:
        -: 1949:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 1950:constexpr uint32_t kMaxCodePoint3 =
        -: 1951:    (static_cast<uint32_t>(1) << (4 + 2 * 6)) - 1;
        -: 1952:
        -: 1953:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 1954:constexpr uint32_t kMaxCodePoint4 =
        -: 1955:    (static_cast<uint32_t>(1) << (3 + 3 * 6)) - 1;
        -: 1956:
        -: 1957:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 1958:// lowest bits.  As a side effect, the original bit pattern will be
        -: 1959:// shifted to the right by n bits.
function _ZN7testing8internal11ChopLowBitsEPji called 0 returned 0% blocks executed 0%
    #####: 1960:inline uint32_t ChopLowBits(uint32_t* bits, int n) {
    #####: 1961:  const uint32_t low_bits = *bits & ((static_cast<uint32_t>(1) << n) - 1);
    #####: 1962:  *bits >>= n;
    #####: 1963:  return low_bits;
    %%%%%: 1963-block  0
        -: 1964:}
        -: 1965:
        -: 1966:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 1967:// code_point parameter is of type uint32_t because wchar_t may not be
        -: 1968:// wide enough to contain a code point.
        -: 1969:// If the code_point is not a valid Unicode code point
        -: 1970:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 1971:// to "(Invalid Unicode 0xXXXXXXXX)".
function _ZN7testing8internal15CodePointToUtf8B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 1972:std::string CodePointToUtf8(uint32_t code_point) {
    #####: 1973:  if (code_point > kMaxCodePoint4) {
    %%%%%: 1973-block  0
branch  0 never executed
branch  1 never executed
    #####: 1974:    return "(Invalid Unicode 0x" + String::FormatHexUInt32(code_point) + ")";
    %%%%%: 1974-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1974-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1974-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1974-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1974-block  4
call   11 never executed
    $$$$$: 1974-block  5
call   12 never executed
    $$$$$: 1974-block  6
    $$$$$: 1974-block  7
        -: 1975:  }
        -: 1976:
        -: 1977:  char str[5];  // Big enough for the largest valid code point.
    #####: 1978:  if (code_point <= kMaxCodePoint1) {
    %%%%%: 1978-block  0
branch  0 never executed
branch  1 never executed
    #####: 1979:    str[1] = '\0';
    #####: 1980:    str[0] = static_cast<char>(code_point);  // 0xxxxxxx
    %%%%%: 1980-block  0
    #####: 1981:  } else if (code_point <= kMaxCodePoint2) {
    %%%%%: 1981-block  0
branch  0 never executed
branch  1 never executed
    #####: 1982:    str[2] = '\0';
    #####: 1983:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1983-block  0
call    0 never executed
    #####: 1984:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 1985:  } else if (code_point <= kMaxCodePoint3) {
    %%%%%: 1985-block  0
branch  0 never executed
branch  1 never executed
    #####: 1986:    str[3] = '\0';
    #####: 1987:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1987-block  0
call    0 never executed
    #####: 1988:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1989:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 1990:  } else {  // code_point <= kMaxCodePoint4
    #####: 1991:    str[4] = '\0';
    #####: 1992:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1992-block  0
call    0 never executed
    #####: 1993:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1994:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1995:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 1996:  }
    #####: 1997:  return str;
    %%%%%: 1997-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1997-block  1
call    4 never executed
    $$$$$: 1997-block  2
call    5 never executed
    $$$$$: 1997-block  3
        -: 1998:}
        -: 1999:
        -: 2000:// The following two functions only make sense if the system
        -: 2001:// uses UTF-16 for wide string encoding. All supported systems
        -: 2002:// with 16 bit wchar_t (Windows, Cygwin) do use UTF-16.
        -: 2003:
        -: 2004:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 2005:// and thus should be combined into a single Unicode code point
        -: 2006:// using CreateCodePointFromUtf16SurrogatePair.
function _ZN7testing8internal20IsUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 2007:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
        -: 2008:  return sizeof(wchar_t) == 2 && (first & 0xFC00) == 0xD800 &&
    #####: 2009:         (second & 0xFC00) == 0xDC00;
    %%%%%: 2009-block  0
        -: 2010:}
        -: 2011:
        -: 2012:// Creates a Unicode code point from UTF16 surrogate pair.
function _ZN7testing8internal37CreateCodePointFromUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 2013:inline uint32_t CreateCodePointFromUtf16SurrogatePair(wchar_t first,
        -: 2014:                                                      wchar_t second) {
    #####: 2015:  const auto first_u = static_cast<uint32_t>(first);
    #####: 2016:  const auto second_u = static_cast<uint32_t>(second);
    #####: 2017:  const uint32_t mask = (1 << 10) - 1;
        -: 2018:  return (sizeof(wchar_t) == 2)
        -: 2019:             ? (((first_u & mask) << 10) | (second_u & mask)) + 0x10000
        -: 2020:             :
        -: 2021:             // This function should not be called when the condition is
        -: 2022:             // false, but we provide a sensible default in case it is.
    #####: 2023:             first_u;
    %%%%%: 2023-block  0
        -: 2024:}
        -: 2025:
        -: 2026:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 2027:// The wide string is assumed to have the following encoding:
        -: 2028://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin)
        -: 2029://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 2030:// Parameter str points to a null-terminated wide string.
        -: 2031:// Parameter num_chars may additionally limit the number
        -: 2032:// of wchar_t characters processed. -1 is used when the entire string
        -: 2033:// should be processed.
        -: 2034:// If the string contains code points that are not valid Unicode code points
        -: 2035:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 2036:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 2037:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 2038:// will be encoded as individual Unicode characters from Basic Normal Plane.
function _ZN7testing8internal16WideStringToUtf8B5cxx11EPKwi called 0 returned 0% blocks executed 0%
    #####: 2039:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    #####: 2040:  if (num_chars == -1) num_chars = static_cast<int>(wcslen(str));
    %%%%%: 2040-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2040-block  1
        -: 2041:
    #####: 2042:  ::std::stringstream stream;
    %%%%%: 2042-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2043:  for (int i = 0; i < num_chars; ++i) {
    %%%%%: 2043-block  0
    %%%%%: 2043-block  1
branch  0 never executed
branch  1 never executed
        -: 2044:    uint32_t unicode_code_point;
        -: 2045:
    #####: 2046:    if (str[i] == L'\0') {
    %%%%%: 2046-block  0
branch  0 never executed
branch  1 never executed
    #####: 2047:      break;
    %%%%%: 2047-block  0
    #####: 2048:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    %%%%%: 2048-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2048-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2048-block  2
    %%%%%: 2048-block  3
    %%%%%: 2048-block  4
branch  5 never executed
branch  6 never executed
        -: 2049:      unicode_code_point =
    #####: 2050:          CreateCodePointFromUtf16SurrogatePair(str[i], str[i + 1]);
    %%%%%: 2050-block  0
call    0 never executed
    #####: 2051:      i++;
        -: 2052:    } else {
    #####: 2053:      unicode_code_point = static_cast<uint32_t>(str[i]);
    %%%%%: 2053-block  0
        -: 2054:    }
        -: 2055:
    #####: 2056:    stream << CodePointToUtf8(unicode_code_point);
    %%%%%: 2056-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2056-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2056-block  2
call    6 never executed
    $$$$$: 2056-block  3
call    7 never executed
    $$$$$: 2056-block  4
        -: 2057:  }
    #####: 2058:  return StringStreamToString(&stream);
    %%%%%: 2058-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2058-block  1
    #####: 2059:}
    %%%%%: 2059-block  0
call    0 never executed
    $$$$$: 2059-block  1
call    1 never executed
        -: 2060:
        -: 2061:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 2062:// NULL will be converted to "(null)".
function _ZN7testing8internal6String15ShowWideCStringB5cxx11EPKw called 0 returned 0% blocks executed 0%
    #####: 2063:std::string String::ShowWideCString(const wchar_t* wide_c_str) {
    #####: 2064:  if (wide_c_str == nullptr) return "(null)";
    %%%%%: 2064-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2064-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2064-block  2
call    6 never executed
    $$$$$: 2064-block  3
call    7 never executed
        -: 2065:
    #####: 2066:  return internal::WideStringToUtf8(wide_c_str, -1);
    %%%%%: 2066-block  0
call    0 never executed
        -: 2067:}
        -: 2068:
        -: 2069:// Compares two wide C strings.  Returns true if and only if they have the
        -: 2070:// same content.
        -: 2071://
        -: 2072:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 2073:// C string is considered different to any non-NULL C string,
        -: 2074:// including the empty string.
function _ZN7testing8internal6String17WideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2075:bool String::WideCStringEquals(const wchar_t* lhs, const wchar_t* rhs) {
    #####: 2076:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2076-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2076-block  1
        -: 2077:
    #####: 2078:  if (rhs == nullptr) return false;
    %%%%%: 2078-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2078-block  1
        -: 2079:
    #####: 2080:  return wcscmp(lhs, rhs) == 0;
    %%%%%: 2080-block  0
        -: 2081:}
        -: 2082:
        -: 2083:// Helper function for *_STREQ on wide strings.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2084:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 2085:                               const char* rhs_expression, const wchar_t* lhs,
        -: 2086:                               const wchar_t* rhs) {
    #####: 2087:  if (String::WideCStringEquals(lhs, rhs)) {
    %%%%%: 2087-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2088:    return AssertionSuccess();
    %%%%%: 2088-block  0
call    0 never executed
        -: 2089:  }
        -: 2090:
    #####: 2091:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 2091-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2091-block  1
call    3 never executed
    $$$$$: 2091-block  2
call    4 never executed
    $$$$$: 2091-block  3
    #####: 2092:                   PrintToString(rhs), false);
    %%%%%: 2092-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2092-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 2092-block  2
call    7 never executed
        -: 2093:}
        -: 2094:
        -: 2095:// Helper function for *_STRNE on wide strings.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2096:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 2097:                               const char* s2_expression, const wchar_t* s1,
        -: 2098:                               const wchar_t* s2) {
    #####: 2099:  if (!String::WideCStringEquals(s1, s2)) {
    %%%%%: 2099-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2100:    return AssertionSuccess();
    %%%%%: 2100-block  0
call    0 never executed
        -: 2101:  }
        -: 2102:
    #####: 2103:  return AssertionFailure()
    %%%%%: 2103-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2103-block  1
call    3 never executed
    #####: 2104:         << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 2104-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2104-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2104-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2104-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2105:         << "), actual: " << PrintToString(s1) << " vs " << PrintToString(s2);
    %%%%%: 2105-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2105-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2105-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2105-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2105-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 2105-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 2105-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 2105-block  7
call   21 never executed
call   22 never executed
call   23 never executed
    $$$$$: 2105-block  8
call   24 never executed
    $$$$$: 2105-block  9
    $$$$$: 2105-block 10
call   25 never executed
    $$$$$: 2105-block 11
        -: 2106:}
        -: 2107:
        -: 2108:// Compares two C strings, ignoring case.  Returns true if and only if they have
        -: 2109:// the same content.
        -: 2110://
        -: 2111:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 2112:// NULL C string is considered different to any non-NULL C string,
        -: 2113:// including the empty string.
function _ZN7testing8internal6String28CaseInsensitiveCStringEqualsEPKcS3_ called 4 returned 100% blocks executed 71%
        4: 2114:bool String::CaseInsensitiveCStringEquals(const char* lhs, const char* rhs) {
       4*: 2115:  if (lhs == nullptr) return rhs == nullptr;
        4: 2115-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2115-block  1
       4*: 2116:  if (rhs == nullptr) return false;
        4: 2116-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2116-block  1
        4: 2117:  return posix::StrCaseCmp(lhs, rhs) == 0;
        4: 2117-block  0
call    0 returned 4
        -: 2118:}
        -: 2119:
        -: 2120:// Compares two wide C strings, ignoring case.  Returns true if and only if they
        -: 2121:// have the same content.
        -: 2122://
        -: 2123:// Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 2124:// A NULL C string is considered different to any non-NULL wide C string,
        -: 2125:// including the empty string.
        -: 2126:// NB: The implementations on different platforms slightly differ.
        -: 2127:// On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 2128:// environment variable. On GNU platform this method uses wcscasecmp
        -: 2129:// which compares according to LC_CTYPE category of the current locale.
        -: 2130:// On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 2131:// current locale.
function _ZN7testing8internal6String32CaseInsensitiveWideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2132:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
        -: 2133:                                              const wchar_t* rhs) {
    #####: 2134:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2134-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2134-block  1
        -: 2135:
    #####: 2136:  if (rhs == nullptr) return false;
    %%%%%: 2136-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2136-block  1
        -: 2137:
        -: 2138:#if GTEST_OS_WINDOWS
        -: 2139:  return _wcsicmp(lhs, rhs) == 0;
        -: 2140:#elif GTEST_OS_LINUX && !GTEST_OS_LINUX_ANDROID
    #####: 2141:  return wcscasecmp(lhs, rhs) == 0;
    %%%%%: 2141-block  0
call    0 never executed
        -: 2142:#else
        -: 2143:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 2144:  // Other unknown OSes may not define it either.
        -: 2145:  wint_t left, right;
        -: 2146:  do {
        -: 2147:    left = towlower(static_cast<wint_t>(*lhs++));
        -: 2148:    right = towlower(static_cast<wint_t>(*rhs++));
        -: 2149:  } while (left && left == right);
        -: 2150:  return left == right;
        -: 2151:#endif  // OS selector
        -: 2152:}
        -: 2153:
        -: 2154:// Returns true if and only if str ends with the given suffix, ignoring case.
        -: 2155:// Any string is considered to end with an empty suffix.
function _ZN7testing8internal6String23EndsWithCaseInsensitiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 2156:bool String::EndsWithCaseInsensitive(const std::string& str,
        -: 2157:                                     const std::string& suffix) {
    #####: 2158:  const size_t str_len = str.length();
    %%%%%: 2158-block  0
call    0 never executed
    #####: 2159:  const size_t suffix_len = suffix.length();
call    0 never executed
    #####: 2160:  return (str_len >= suffix_len) &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2160-block  0
    %%%%%: 2160-block  1
    #####: 2161:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
    %%%%%: 2161-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2162:                                      suffix.c_str());
    %%%%%: 2162-block  0
        -: 2163:}
        -: 2164:
        -: 2165:// Formats an int value as "%02d".
function _ZN7testing8internal6String15FormatIntWidth2B5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2166:std::string String::FormatIntWidth2(int value) {
    #####: 2167:  return FormatIntWidthN(value, 2);
    %%%%%: 2167-block  0
call    0 never executed
        -: 2168:}
        -: 2169:
        -: 2170:// Formats an int value to given width with leading zeros.
function _ZN7testing8internal6String15FormatIntWidthNB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 2171:std::string String::FormatIntWidthN(int value, int width) {
    #####: 2172:  std::stringstream ss;
    %%%%%: 2172-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2173:  ss << std::setfill('0') << std::setw(width) << value;
    %%%%%: 2173-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2173-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2174:  return ss.str();
    %%%%%: 2174-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2174-block  1
    #####: 2175:}
    %%%%%: 2175-block  0
call    0 never executed
    $$$$$: 2175-block  1
call    1 never executed
        -: 2176:
        -: 2177:// Formats an int value as "%X".
function _ZN7testing8internal6String15FormatHexUInt32B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2178:std::string String::FormatHexUInt32(uint32_t value) {
    #####: 2179:  std::stringstream ss;
    %%%%%: 2179-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2180:  ss << std::hex << std::uppercase << value;
    %%%%%: 2180-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2180-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2180-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2181:  return ss.str();
    %%%%%: 2181-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2181-block  1
    #####: 2182:}
    %%%%%: 2182-block  0
call    0 never executed
    $$$$$: 2182-block  1
call    1 never executed
        -: 2183:
        -: 2184:// Formats an int value as "%X".
function _ZN7testing8internal6String12FormatHexIntB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2185:std::string String::FormatHexInt(int value) {
    #####: 2186:  return FormatHexUInt32(static_cast<uint32_t>(value));
    %%%%%: 2186-block  0
call    0 never executed
        -: 2187:}
        -: 2188:
        -: 2189:// Formats a byte as "%02X".
function _ZN7testing8internal6String10FormatByteB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####: 2190:std::string String::FormatByte(unsigned char value) {
    #####: 2191:  std::stringstream ss;
    %%%%%: 2191-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2192:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    %%%%%: 2192-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2192-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2192-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2193:     << static_cast<unsigned int>(value);
    %%%%%: 2193-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2194:  return ss.str();
    %%%%%: 2194-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2194-block  1
    #####: 2195:}
    %%%%%: 2195-block  0
call    0 never executed
    $$$$$: 2195-block  1
call    1 never executed
        -: 2196:
        -: 2197:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 2198:// bytes to "\\0" along the way.
function _ZN7testing8internal20StringStreamToStringEPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE called 104 returned 100% blocks executed 75%
      104: 2199:std::string StringStreamToString(::std::stringstream* ss) {
      104: 2200:  const ::std::string& str = ss->str();
      104: 2200-block  0
call    0 returned 104
branch  1 taken 104 (fallthrough)
branch  2 taken 0 (throw)
      104: 2201:  const char* const start = str.c_str();
      104: 2201-block  0
call    0 returned 104
      104: 2202:  const char* const end = start + str.length();
call    0 returned 104
        -: 2203:
      104: 2204:  std::string result;
call    0 returned 104
      104: 2205:  result.reserve(static_cast<size_t>(2 * (end - start)));
call    0 returned 104
branch  1 taken 104 (fallthrough)
branch  2 taken 0 (throw)
     2312: 2206:  for (const char* ch = start; ch != end; ++ch) {
      104: 2206-block  0
     2208: 2206-block  1
     2312: 2206-block  2
branch  0 taken 2208
branch  1 taken 104 (fallthrough)
     2208: 2207:    if (*ch == '\0') {
     2208: 2207-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2208
    #####: 2208:      result += "\\0";  // Replaces NUL with "\\0";
    %%%%%: 2208-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2209:    } else {
     2208: 2210:      result += *ch;
     2208: 2210-block  0
call    0 returned 2208
branch  1 taken 2208 (fallthrough)
branch  2 taken 0 (throw)
        -: 2211:    }
        -: 2212:  }
        -: 2213:
      208: 2214:  return result;
      104: 2214-block  0
      104: 2214-block  1
      104: 2215:}
      104: 2215-block  0
call    0 returned 104
    $$$$$: 2215-block  1
call    1 never executed
    $$$$$: 2215-block  2
call    2 never executed
        -: 2216:
        -: 2217:// Appends the user-supplied message to the Google-Test-generated message.
function _ZN7testing8internal17AppendUserMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 2218:std::string AppendUserMessage(const std::string& gtest_msg,
        -: 2219:                              const Message& user_msg) {
        -: 2220:  // Appends the user message if it's non-empty.
    #####: 2221:  const std::string user_msg_string = user_msg.GetString();
    %%%%%: 2221-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2222:  if (user_msg_string.empty()) {
    %%%%%: 2222-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2223:    return gtest_msg;
    %%%%%: 2223-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2224:  }
    #####: 2225:  if (gtest_msg.empty()) {
    %%%%%: 2225-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2226:    return user_msg_string;
    %%%%%: 2226-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2227:  }
    #####: 2228:  return gtest_msg + "\n" + user_msg_string;
    %%%%%: 2228-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2228-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2228-block  2
call    6 never executed
    $$$$$: 2228-block  3
call    7 never executed
    $$$$$: 2228-block  4
    #####: 2229:}
    %%%%%: 2229-block  0
call    0 never executed
    $$$$$: 2229-block  1
call    1 never executed
        -: 2230:
        -: 2231:}  // namespace internal
        -: 2232:
        -: 2233:// class TestResult
        -: 2234:
        -: 2235:// Creates an empty TestResult.
function _ZN7testing10TestResultC2Ev called 6 returned 100% blocks executed 100%
        6: 2236:TestResult::TestResult()
        6: 2237:    : death_test_count_(0), start_timestamp_(0), elapsed_time_(0) {}
        6: 2237-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
        -: 2238:
        -: 2239:// D'tor.
function _ZN7testing10TestResultD2Ev called 6 returned 100% blocks executed 100%
        6: 2240:TestResult::~TestResult() {}
        6: 2240-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
        -: 2241:
        -: 2242:// Returns the i-th test part result among all the results. i can
        -: 2243:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 2244:// aborts the program.
function _ZNK7testing10TestResult17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####: 2245:const TestPartResult& TestResult::GetTestPartResult(int i) const {
    #####: 2246:  if (i < 0 || i >= total_part_count()) internal::posix::Abort();
    %%%%%: 2246-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2246-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2246-block  2
    %%%%%: 2246-block  3
    %%%%%: 2246-block  4
branch  5 never executed
branch  6 never executed
    %%%%%: 2246-block  5
call    7 never executed
    #####: 2247:  return test_part_results_.at(static_cast<size_t>(i));
    %%%%%: 2247-block  0
call    0 never executed
        -: 2248:}
        -: 2249:
        -: 2250:// Returns the i-th test property. i can range from 0 to
        -: 2251:// test_property_count() - 1. If i is not in that range, aborts the
        -: 2252:// program.
function _ZNK7testing10TestResult15GetTestPropertyEi called 0 returned 0% blocks executed 0%
    #####: 2253:const TestProperty& TestResult::GetTestProperty(int i) const {
    #####: 2254:  if (i < 0 || i >= test_property_count()) internal::posix::Abort();
    %%%%%: 2254-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2254-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2254-block  2
    %%%%%: 2254-block  3
    %%%%%: 2254-block  4
branch  5 never executed
branch  6 never executed
    %%%%%: 2254-block  5
call    7 never executed
    #####: 2255:  return test_properties_.at(static_cast<size_t>(i));
    %%%%%: 2255-block  0
call    0 never executed
        -: 2256:}
        -: 2257:
        -: 2258:// Clears the test part results.
function _ZN7testing10TestResult20ClearTestPartResultsEv called 0 returned 0% blocks executed 0%
    #####: 2259:void TestResult::ClearTestPartResults() { test_part_results_.clear(); }
    %%%%%: 2259-block  0
call    0 never executed
        -: 2260:
        -: 2261:// Adds a test part result to the list.
function _ZN7testing10TestResult17AddTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2262:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
    #####: 2263:  test_part_results_.push_back(test_part_result);
    %%%%%: 2263-block  0
call    0 never executed
    #####: 2264:}
        -: 2265:
        -: 2266:// Adds a test property to the list. If a property with the same key as the
        -: 2267:// supplied property is already represented, the value of this test_property
        -: 2268:// replaces the old value for that key.
function _ZN7testing10TestResult14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2269:void TestResult::RecordProperty(const std::string& xml_element,
        -: 2270:                                const TestProperty& test_property) {
    #####: 2271:  if (!ValidateTestProperty(xml_element, test_property)) {
    %%%%%: 2271-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2271-block  1
branch  3 never executed
branch  4 never executed
    #####: 2272:    return;
    %%%%%: 2272-block  0
    %%%%%: 2272-block  1
        -: 2273:  }
    #####: 2274:  internal::MutexLock lock(&test_properties_mutex_);
    %%%%%: 2274-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2275:  const std::vector<TestProperty>::iterator property_with_matching_key =
    #####: 2276:      std::find_if(test_properties_.begin(), test_properties_.end(),
    %%%%%: 2276-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2277:                   internal::TestPropertyKeyIs(test_property.key()));
    %%%%%: 2277-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2277-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2277-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2277-block  3
call   11 never executed
    $$$$$: 2277-block  4
call   12 never executed
    $$$$$: 2277-block  5
call   13 never executed
    $$$$$: 2277-block  6
    $$$$$: 2277-block  7
    $$$$$: 2277-block  8
    #####: 2278:  if (property_with_matching_key == test_properties_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2279:    test_properties_.push_back(test_property);
    %%%%%: 2279-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2280:    return;
    %%%%%: 2280-block  0
        -: 2281:  }
    #####: 2282:  property_with_matching_key->SetValue(test_property.value());
    %%%%%: 2282-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2282-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2282-block  2
call    9 never executed
call   10 never executed
    $$$$$: 2282-block  3
call   11 never executed
    $$$$$: 2282-block  4
call   12 never executed
    $$$$$: 2282-block  5
    $$$$$: 2282-block  6
    #####: 2283:}
    %%%%%: 2283-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2283-block  1
call    3 never executed
        -: 2284:
        -: 2285:// The list of reserved attributes used in the <testsuites> element of XML
        -: 2286:// output.
        -: 2287:static const char* const kReservedTestSuitesAttributes[] = {
        -: 2288:    "disabled",    "errors", "failures", "name",
        -: 2289:    "random_seed", "tests",  "time",     "timestamp"};
        -: 2290:
        -: 2291:// The list of reserved attributes used in the <testsuite> element of XML
        -: 2292:// output.
        -: 2293:static const char* const kReservedTestSuiteAttributes[] = {
        -: 2294:    "disabled", "errors", "failures",  "name",
        -: 2295:    "tests",    "time",   "timestamp", "skipped"};
        -: 2296:
        -: 2297:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 2298:static const char* const kReservedTestCaseAttributes[] = {
        -: 2299:    "classname",  "name",        "status", "time",
        -: 2300:    "type_param", "value_param", "file",   "line"};
        -: 2301:
        -: 2302:// Use a slightly different set for allowed output to ensure existing tests can
        -: 2303:// still RecordProperty("result") or "RecordProperty(timestamp")
        -: 2304:static const char* const kReservedOutputTestCaseAttributes[] = {
        -: 2305:    "classname",   "name", "status", "time",   "type_param",
        -: 2306:    "value_param", "file", "line",   "result", "timestamp"};
        -: 2307:
        -: 2308:template <size_t kSize>
    #####: 2309:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2310:  return std::vector<std::string>(array, array + kSize);
        -: 2311:}
------------------
_ZN7testing13ArrayAsVectorILm10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILm10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2309:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2310:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2310-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2310-block  1
call    4 never executed
    %%%%%: 2310-block  2
    $$$$$: 2310-block  3
call    5 never executed
        -: 2311:}
------------------
_ZN7testing13ArrayAsVectorILm8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILm8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2309:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2310:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2310-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2310-block  1
call    4 never executed
    %%%%%: 2310-block  2
    $$$$$: 2310-block  3
call    5 never executed
        -: 2311:}
------------------
        -: 2312:
function _ZN7testingL31GetReservedAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2313:static std::vector<std::string> GetReservedAttributesForElement(
        -: 2314:    const std::string& xml_element) {
    #####: 2315:  if (xml_element == "testsuites") {
    %%%%%: 2315-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2316:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2316-block  0
call    0 never executed
    #####: 2317:  } else if (xml_element == "testsuite") {
    %%%%%: 2317-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2318:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2318-block  0
call    0 never executed
    #####: 2319:  } else if (xml_element == "testcase") {
    %%%%%: 2319-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2320:    return ArrayAsVector(kReservedTestCaseAttributes);
    %%%%%: 2320-block  0
call    0 never executed
        -: 2321:  } else {
    #####: 2322:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2322-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2322-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2322-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2322-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 2322-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 2322-block  5
call   16 never executed
    $$$$$: 2322-block  6
call   17 never executed
        -: 2323:  }
        -: 2324:  // This code is unreachable but some compilers may not realizes that.
    #####: 2325:  return std::vector<std::string>();
    %%%%%: 2325-block  0
call    0 never executed
        -: 2326:}
        -: 2327:
        -: 2328:// TODO(jdesprez): Merge the two getReserved attributes once skip is improved
function _ZN7testingL37GetReservedOutputAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2329:static std::vector<std::string> GetReservedOutputAttributesForElement(
        -: 2330:    const std::string& xml_element) {
    #####: 2331:  if (xml_element == "testsuites") {
    %%%%%: 2331-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2332:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2332-block  0
call    0 never executed
    #####: 2333:  } else if (xml_element == "testsuite") {
    %%%%%: 2333-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2334:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2334-block  0
call    0 never executed
    #####: 2335:  } else if (xml_element == "testcase") {
    %%%%%: 2335-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2336:    return ArrayAsVector(kReservedOutputTestCaseAttributes);
    %%%%%: 2336-block  0
call    0 never executed
        -: 2337:  } else {
    #####: 2338:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2338-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2338-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2338-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2338-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 2338-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 2338-block  5
call   16 never executed
    $$$$$: 2338-block  6
call   17 never executed
        -: 2339:  }
        -: 2340:  // This code is unreachable but some compilers may not realizes that.
    #####: 2341:  return std::vector<std::string>();
    %%%%%: 2341-block  0
call    0 never executed
        -: 2342:}
        -: 2343:
function _ZN7testingL14FormatWordListERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 2344:static std::string FormatWordList(const std::vector<std::string>& words) {
    #####: 2345:  Message word_list;
    %%%%%: 2345-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2346:  for (size_t i = 0; i < words.size(); ++i) {
    %%%%%: 2346-block  0
    %%%%%: 2346-block  1
    %%%%%: 2346-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2347:    if (i > 0 && words.size() > 2) {
    %%%%%: 2347-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2347-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2347-block  2
    %%%%%: 2347-block  3
    %%%%%: 2347-block  4
branch  5 never executed
branch  6 never executed
    #####: 2348:      word_list << ", ";
    %%%%%: 2348-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2349:    }
    #####: 2350:    if (i == words.size() - 1) {
    %%%%%: 2350-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2351:      word_list << "and ";
    %%%%%: 2351-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2352:    }
    #####: 2353:    word_list << "'" << words[i] << "'";
    %%%%%: 2353-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2353-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2353-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 2354:  }
    #####: 2355:  return word_list.GetString();
    %%%%%: 2355-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2355-block  1
    #####: 2356:}
    %%%%%: 2356-block  0
call    0 never executed
    $$$$$: 2356-block  1
call    1 never executed
        -: 2357:
function _ZN7testingL24ValidateTestPropertyNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS5_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 2358:static bool ValidateTestPropertyName(
        -: 2359:    const std::string& property_name,
        -: 2360:    const std::vector<std::string>& reserved_names) {
    #####: 2361:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 2361-block  0
    #####: 2362:      reserved_names.end()) {
    %%%%%: 2362-block  0
call    0 never executed
    %%%%%: 2362-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2362-block  2
call    4 never executed
    #####: 2363:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
    %%%%%: 2363-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2363-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2363-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2363-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2363-block  4
call   12 never executed
    $$$$$: 2363-block  5
call   13 never executed
    $$$$$: 2363-block  6
    $$$$$: 2363-block  7
call   14 never executed
    #####: 2364:                  << " (" << FormatWordList(reserved_names)
    %%%%%: 2364-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2364-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2364-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2364-block  3
call   11 never executed
    $$$$$: 2364-block  4
    #####: 2365:                  << " are reserved by " << GTEST_NAME_ << ")";
    %%%%%: 2365-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2365-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2365-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2365-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2366:    return false;
        -: 2367:  }
    #####: 2368:  return true;
    %%%%%: 2368-block  0
        -: 2369:}
        -: 2370:
        -: 2371:// Adds a failure if the key is a reserved attribute of the element named
        -: 2372:// xml_element.  Returns true if the property is valid.
function _ZN7testing10TestResult20ValidateTestPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2373:bool TestResult::ValidateTestProperty(const std::string& xml_element,
        -: 2374:                                      const TestProperty& test_property) {
    #####: 2375:  return ValidateTestPropertyName(test_property.key(),
    %%%%%: 2375-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2375-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2375-block  2
call    8 never executed
call    9 never executed
    $$$$$: 2375-block  3
call   10 never executed
    $$$$$: 2375-block  4
call   11 never executed
    $$$$$: 2375-block  5
    $$$$$: 2375-block  6
    #####: 2376:                                  GetReservedAttributesForElement(xml_element));
    %%%%%: 2376-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2376-block  1
call    3 never executed
    %%%%%: 2376-block  2
    $$$$$: 2376-block  3
call    4 never executed
        -: 2377:}
        -: 2378:
        -: 2379:// Clears the object.
function _ZN7testing10TestResult5ClearEv called 2 returned 100% blocks executed 100%
        2: 2380:void TestResult::Clear() {
        2: 2381:  test_part_results_.clear();
        2: 2381-block  0
call    0 returned 2
        2: 2382:  test_properties_.clear();
call    0 returned 2
        2: 2383:  death_test_count_ = 0;
        2: 2384:  elapsed_time_ = 0;
        2: 2385:}
        -: 2386:
        -: 2387:// Returns true off the test part was skipped.
function _ZN7testingL15TestPartSkippedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2388:static bool TestPartSkipped(const TestPartResult& result) {
    #####: 2389:  return result.skipped();
    %%%%%: 2389-block  0
call    0 never executed
        -: 2390:}
        -: 2391:
        -: 2392:// Returns true if and only if the test was skipped.
function _ZNK7testing10TestResult7SkippedEv called 6 returned 100% blocks executed 88%
        6: 2393:bool TestResult::Skipped() const {
       6*: 2394:  return !Failed() && CountIf(test_part_results_, TestPartSkipped) > 0;
        6: 2394-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0
        6: 2394-block  1
call    3 returned 6
branch  4 taken 0 (fallthrough)
branch  5 taken 6
    %%%%%: 2394-block  2
        6: 2394-block  3
        6: 2394-block  4
        -: 2395:}
        -: 2396:
        -: 2397:// Returns true if and only if the test failed.
function _ZNK7testing10TestResult6FailedEv called 16 returned 100% blocks executed 50%
       16: 2398:bool TestResult::Failed() const {
      16*: 2399:  for (int i = 0; i < total_part_count(); ++i) {
       16: 2399-block  0
    %%%%%: 2399-block  1
       16: 2399-block  2
call    0 returned 16
branch  1 taken 0
branch  2 taken 16 (fallthrough)
    #####: 2400:    if (GetTestPartResult(i).failed()) return true;
    %%%%%: 2400-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2400-block  1
        -: 2401:  }
       16: 2402:  return false;
       16: 2402-block  0
        -: 2403:}
        -: 2404:
        -: 2405:// Returns true if and only if the test part fatally failed.
function _ZN7testingL21TestPartFatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2406:static bool TestPartFatallyFailed(const TestPartResult& result) {
    #####: 2407:  return result.fatally_failed();
    %%%%%: 2407-block  0
call    0 never executed
        -: 2408:}
        -: 2409:
        -: 2410:// Returns true if and only if the test fatally failed.
function _ZNK7testing10TestResult15HasFatalFailureEv called 3 returned 100% blocks executed 100%
        3: 2411:bool TestResult::HasFatalFailure() const {
        3: 2412:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
        3: 2412-block  0
call    0 returned 3
        -: 2413:}
        -: 2414:
        -: 2415:// Returns true if and only if the test part non-fatally failed.
function _ZN7testingL24TestPartNonfatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2416:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    #####: 2417:  return result.nonfatally_failed();
    %%%%%: 2417-block  0
call    0 never executed
        -: 2418:}
        -: 2419:
        -: 2420:// Returns true if and only if the test has a non-fatal failure.
function _ZNK7testing10TestResult18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2421:bool TestResult::HasNonfatalFailure() const {
    #####: 2422:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    %%%%%: 2422-block  0
call    0 never executed
        -: 2423:}
        -: 2424:
        -: 2425:// Gets the number of all test parts.  This is the sum of the number
        -: 2426:// of successful test parts and the number of failed test parts.
function _ZNK7testing10TestResult16total_part_countEv called 16 returned 100% blocks executed 100%
       16: 2427:int TestResult::total_part_count() const {
       16: 2428:  return static_cast<int>(test_part_results_.size());
       16: 2428-block  0
call    0 returned 16
        -: 2429:}
        -: 2430:
        -: 2431:// Returns the number of the test properties.
function _ZNK7testing10TestResult19test_property_countEv called 0 returned 0% blocks executed 0%
    #####: 2432:int TestResult::test_property_count() const {
    #####: 2433:  return static_cast<int>(test_properties_.size());
    %%%%%: 2433-block  0
call    0 never executed
        -: 2434:}
        -: 2435:
        -: 2436:// class Test
        -: 2437:
        -: 2438:// Creates a Test object.
        -: 2439:
        -: 2440:// The c'tor saves the states of all flags.
function _ZN7testing4TestC2Ev called 1 returned 100% blocks executed 71%
        1: 2441:Test::Test() : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {}
        1: 2441-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 2441-block  1
call    4 returned 1
    $$$$$: 2441-block  2
branch  5 never executed
branch  6 never executed
    $$$$$: 2441-block  3
call    7 never executed
        -: 2442:
        -: 2443:// The d'tor restores the states of all flags.  The actual work is
        -: 2444:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 2445:// visible here.
       1*: 2446:Test::~Test() {}
------------------
_ZN7testing4TestD0Ev:
function _ZN7testing4TestD0Ev called 0 returned 0% blocks executed 0%
    #####: 2446:Test::~Test() {}
    %%%%%: 2446-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing4TestD2Ev:
function _ZN7testing4TestD2Ev called 1 returned 100% blocks executed 100%
        1: 2446:Test::~Test() {}
        1: 2446-block  0
call    0 returned 1
------------------
        -: 2447:
        -: 2448:// Sets up the test fixture.
        -: 2449://
        -: 2450:// A sub-class may override this.
function _ZN7testing4Test5SetUpEv called 1 returned 100% blocks executed 100%
        1: 2451:void Test::SetUp() {}
        -: 2452:
        -: 2453:// Tears down the test fixture.
        -: 2454://
        -: 2455:// A sub-class may override this.
function _ZN7testing4Test8TearDownEv called 1 returned 100% blocks executed 100%
        1: 2456:void Test::TearDown() {}
        -: 2457:
        -: 2458:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 2459:void Test::RecordProperty(const std::string& key, const std::string& value) {
    #####: 2460:  UnitTest::GetInstance()->RecordProperty(key, value);
    %%%%%: 2460-block  0
call    0 never executed
call    1 never executed
    #####: 2461:}
        -: 2462:
        -: 2463:namespace internal {
        -: 2464:
function _ZN7testing8internal30ReportFailureInUnknownLocationENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2465:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
        -: 2466:                                    const std::string& message) {
        -: 2467:  // This function is a friend of UnitTest and as such has access to
        -: 2468:  // AddTestPartResult.
    #####: 2469:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%: 2469-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2469-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2469-block  2
call    8 never executed
call    9 never executed
    $$$$$: 2469-block  3
call   10 never executed
    $$$$$: 2469-block  4
call   11 never executed
    $$$$$: 2469-block  5
        -: 2470:      result_type,
        -: 2471:      nullptr,  // No info about the source file where the exception occurred.
        -: 2472:      -1,       // We have no info on which line caused the exception.
        -: 2473:      message,
        -: 2474:      "");  // No stack trace, either.
    #####: 2475:}
        -: 2476:
        -: 2477:}  // namespace internal
        -: 2478:
        -: 2479:// Google Test requires all tests in the same test suite to use the same test
        -: 2480:// fixture class.  This function checks if the current test has the
        -: 2481:// same fixture class as the first test in the current test suite.  If
        -: 2482:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 2483:// returns false.
function _ZN7testing4Test19HasSameFixtureClassEv called 1 returned 100% blocks executed 15%
        1: 2484:bool Test::HasSameFixtureClass() {
        1: 2485:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        1: 2485-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2486:  const TestSuite* const test_suite = impl->current_test_suite();
        1: 2486-block  0
call    0 returned 1
        -: 2487:
        -: 2488:  // Info about the first test in the current test suite.
        1: 2489:  const TestInfo* const first_test_info = test_suite->test_info_list()[0];
call    0 returned 1
call    1 returned 1
        1: 2490:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
        1: 2491:  const char* const first_test_name = first_test_info->name();
call    0 returned 1
        -: 2492:
        -: 2493:  // Info about the current test.
        1: 2494:  const TestInfo* const this_test_info = impl->current_test_info();
call    0 returned 1
        1: 2495:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
        1: 2496:  const char* const this_test_name = this_test_info->name();
call    0 returned 1
        -: 2497:
        1: 2498:  if (this_fixture_id != first_fixture_id) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 2499:    // Is the first test defined using TEST?
    #####: 2500:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    %%%%%: 2500-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2501:    // Is this test defined using TEST?
    #####: 2502:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    %%%%%: 2502-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2503:
    #####: 2504:    if (first_is_TEST || this_is_TEST) {
    %%%%%: 2504-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2504-block  1
branch  2 never executed
branch  3 never executed
        -: 2505:      // Both TEST and TEST_F appear in same test suite, which is incorrect.
        -: 2506:      // Tell the user how to fix this.
        -: 2507:
        -: 2508:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 2509:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 2510:      // the fixture IDs are different for the two tests.
    #####: 2511:      const char* const TEST_name =
    %%%%%: 2511-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2511-block  1
    %%%%%: 2511-block  2
        -: 2512:          first_is_TEST ? first_test_name : this_test_name;
    #####: 2513:      const char* const TEST_F_name =
    %%%%%: 2513-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2513-block  1
    %%%%%: 2513-block  2
        -: 2514:          first_is_TEST ? this_test_name : first_test_name;
        -: 2515:
    #####: 2516:      ADD_FAILURE()
    %%%%%: 2516-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2516-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2516-block  2
call    6 never executed
    $$$$$: 2516-block  3
call    7 never executed
    $$$$$: 2516-block  4
    $$$$$: 2516-block  5
call    8 never executed
    $$$$$: 2516-block  6
    #####: 2517:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2517-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2518:          << "class, so mixing TEST_F and TEST in the same test suite is\n"
    %%%%%: 2518-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2519:          << "illegal.  In test suite " << this_test_info->test_suite_name()
    %%%%%: 2519-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2519-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2519-block  2
    #####: 2520:          << ",\n"
    %%%%%: 2520-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2521:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    %%%%%: 2521-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2521-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2521-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2522:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    %%%%%: 2522-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2522-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2522-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2523:          << "want to change the TEST to TEST_F or move it to another test\n"
    %%%%%: 2523-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2524:          << "case.";
    %%%%%: 2524-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2524-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2525:    } else {
        -: 2526:      // Two fixture classes with the same name appear in two different
        -: 2527:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 2528:      ADD_FAILURE()
    %%%%%: 2528-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2528-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2528-block  2
call    6 never executed
    $$$$$: 2528-block  3
call    7 never executed
    $$$$$: 2528-block  4
    $$$$$: 2528-block  5
call    8 never executed
    $$$$$: 2528-block  6
    #####: 2529:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2529-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2530:          << "class.  However, in test suite "
    %%%%%: 2530-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2531:          << this_test_info->test_suite_name() << ",\n"
    %%%%%: 2531-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2531-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2531-block  2
    #####: 2532:          << "you defined test " << first_test_name << " and test "
    %%%%%: 2532-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2532-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2532-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2533:          << this_test_name << "\n"
    %%%%%: 2533-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2533-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2534:          << "using two different test fixture classes.  This can happen if\n"
    %%%%%: 2534-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2535:          << "the two classes are from different namespaces or translation\n"
    %%%%%: 2535-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2536:          << "units and have the same name.  You should probably rename one\n"
    %%%%%: 2536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2537:          << "of the classes to put the tests into different test suites.";
    %%%%%: 2537-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2537-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2538:    }
    #####: 2539:    return false;
    %%%%%: 2539-block  0
        -: 2540:  }
        -: 2541:
        1: 2542:  return true;
        1: 2542-block  0
        -: 2543:}
        -: 2544:
        -: 2545:#if GTEST_HAS_SEH
        -: 2546:
        -: 2547:// Adds an "exception thrown" fatal failure to the current test.  This
        -: 2548:// function returns its result via an output parameter pointer because VC++
        -: 2549:// prohibits creation of objects with destructors on stack in functions
        -: 2550:// using __try (see error C2712).
        -: 2551:static std::string* FormatSehExceptionMessage(DWORD exception_code,
        -: 2552:                                              const char* location) {
        -: 2553:  Message message;
        -: 2554:  message << "SEH exception with code 0x" << std::setbase(16) << exception_code
        -: 2555:          << std::setbase(10) << " thrown in " << location << ".";
        -: 2556:
        -: 2557:  return new std::string(message.GetString());
        -: 2558:}
        -: 2559:
        -: 2560:#endif  // GTEST_HAS_SEH
        -: 2561:
        -: 2562:namespace internal {
        -: 2563:
        -: 2564:#if GTEST_HAS_EXCEPTIONS
        -: 2565:
        -: 2566:// Adds an "exception thrown" fatal failure to the current test.
function _ZN7testing8internalL25FormatCxxExceptionMessageEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2567:static std::string FormatCxxExceptionMessage(const char* description,
        -: 2568:                                             const char* location) {
    #####: 2569:  Message message;
    %%%%%: 2569-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2570:  if (description != nullptr) {
    %%%%%: 2570-block  0
branch  0 never executed
branch  1 never executed
    #####: 2571:    message << "C++ exception with description \"" << description << "\"";
    %%%%%: 2571-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2571-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2571-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2572:  } else {
    #####: 2573:    message << "Unknown C++ exception";
    %%%%%: 2573-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2574:  }
    #####: 2575:  message << " thrown in " << location << ".";
    %%%%%: 2575-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2575-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2575-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2576:
    #####: 2577:  return message.GetString();
    %%%%%: 2577-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2577-block  1
    #####: 2578:}
    %%%%%: 2578-block  0
call    0 never executed
    $$$$$: 2578-block  1
call    1 never executed
        -: 2579:
        -: 2580:static std::string PrintTestPartResultToString(
        -: 2581:    const TestPartResult& test_part_result);
        -: 2582:
function _ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2583:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2584:    const TestPartResult& failure)
    #####: 2585:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    %%%%%: 2585-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2585-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2585-block  2
call    7 never executed
    $$$$$: 2585-block  3
call    8 never executed
        -: 2586:
        -: 2587:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2588:
        -: 2589:// We put these helper functions in the internal namespace as IBM's xlC
        -: 2590:// compiler rejects the code if they were declared static.
        -: 2591:
        -: 2592:// Runs the given method and handles SEH exceptions it throws, when
        -: 2593:// SEH is supported; returns the 0-value for type Result in case of an
        -: 2594:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 2595:// exceptions in the same function.  Therefore, we provide a separate
        -: 2596:// wrapper function for handling SEH exceptions.)
        -: 2597:template <class T, typename Result>
        9: 2598:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2599:                                              const char* location) {
        -: 2600:#if GTEST_HAS_SEH
        -: 2601:  __try {
        -: 2602:    return (object->*method)();
        -: 2603:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2604:      GetExceptionCode())) {
        -: 2605:    // We create the exception message on the heap because VC++ prohibits
        -: 2606:    // creation of objects with destructors on stack in functions using __try
        -: 2607:    // (see error C2712).
        -: 2608:    std::string* exception_message =
        -: 2609:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2610:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2611:                                             *exception_message);
        -: 2612:    delete exception_message;
        -: 2613:    return static_cast<Result>(0);
        -: 2614:  }
        -: 2615:#else
        -: 2616:  (void)location;
       9*: 2617:  return (object->*method)();
        -: 2618:#endif  // GTEST_HAS_SEH
        -: 2619:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 2 returned 100% blocks executed 83%
        2: 2598:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2599:                                              const char* location) {
        -: 2600:#if GTEST_HAS_SEH
        -: 2601:  __try {
        -: 2602:    return (object->*method)();
        -: 2603:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2604:      GetExceptionCode())) {
        -: 2605:    // We create the exception message on the heap because VC++ prohibits
        -: 2606:    // creation of objects with destructors on stack in functions using __try
        -: 2607:    // (see error C2712).
        -: 2608:    std::string* exception_message =
        -: 2609:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2610:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2611:                                             *exception_message);
        -: 2612:    delete exception_message;
        -: 2613:    return static_cast<Result>(0);
        -: 2614:  }
        -: 2615:#else
        -: 2616:  (void)location;
       2*: 2617:  return (object->*method)();
        2: 2617-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 2617-block  1
        2: 2617-block  2
        2: 2617-block  3
call    2 returned 2
        -: 2618:#endif  // GTEST_HAS_SEH
        -: 2619:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 2 returned 100% blocks executed 80%
        2: 2598:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2599:                                              const char* location) {
        -: 2600:#if GTEST_HAS_SEH
        -: 2601:  __try {
        -: 2602:    return (object->*method)();
        -: 2603:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2604:      GetExceptionCode())) {
        -: 2605:    // We create the exception message on the heap because VC++ prohibits
        -: 2606:    // creation of objects with destructors on stack in functions using __try
        -: 2607:    // (see error C2712).
        -: 2608:    std::string* exception_message =
        -: 2609:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2610:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2611:                                             *exception_message);
        -: 2612:    delete exception_message;
        -: 2613:    return static_cast<Result>(0);
        -: 2614:  }
        -: 2615:#else
        -: 2616:  (void)location;
       2*: 2617:  return (object->*method)();
        2: 2617-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 2617-block  1
        2: 2617-block  2
        2: 2617-block  3
call    2 returned 2
        -: 2618:#endif  // GTEST_HAS_SEH
        -: 2619:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 1 returned 100% blocks executed 83%
        1: 2598:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2599:                                              const char* location) {
        -: 2600:#if GTEST_HAS_SEH
        -: 2601:  __try {
        -: 2602:    return (object->*method)();
        -: 2603:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2604:      GetExceptionCode())) {
        -: 2605:    // We create the exception message on the heap because VC++ prohibits
        -: 2606:    // creation of objects with destructors on stack in functions using __try
        -: 2607:    // (see error C2712).
        -: 2608:    std::string* exception_message =
        -: 2609:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2610:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2611:                                             *exception_message);
        -: 2612:    delete exception_message;
        -: 2613:    return static_cast<Result>(0);
        -: 2614:  }
        -: 2615:#else
        -: 2616:  (void)location;
       1*: 2617:  return (object->*method)();
        1: 2617-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2617-block  1
    %%%%%: 2617-block  2
        1: 2617-block  3
call    2 returned 1
        -: 2618:#endif  // GTEST_HAS_SEH
        -: 2619:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 4 returned 100% blocks executed 100%
        4: 2598:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2599:                                              const char* location) {
        -: 2600:#if GTEST_HAS_SEH
        -: 2601:  __try {
        -: 2602:    return (object->*method)();
        -: 2603:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2604:      GetExceptionCode())) {
        -: 2605:    // We create the exception message on the heap because VC++ prohibits
        -: 2606:    // creation of objects with destructors on stack in functions using __try
        -: 2607:    // (see error C2712).
        -: 2608:    std::string* exception_message =
        -: 2609:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2610:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2611:                                             *exception_message);
        -: 2612:    delete exception_message;
        -: 2613:    return static_cast<Result>(0);
        -: 2614:  }
        -: 2615:#else
        -: 2616:  (void)location;
        4: 2617:  return (object->*method)();
        4: 2617-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3: 2617-block  1
        1: 2617-block  2
        4: 2617-block  3
call    2 returned 4
        -: 2618:#endif  // GTEST_HAS_SEH
        -: 2619:}
------------------
        -: 2620:
        -: 2621:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 2622:// exceptions, if they are supported; returns the 0-value for type
        -: 2623:// Result in case of an SEH exception.
        -: 2624:template <class T, typename Result>
        9: 2625:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2626:                                           const char* location) {
        -: 2627:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2628:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2629:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2630:  // after the exception is caught and either report or re-throw the
        -: 2631:  // exception based on the flag's value:
        -: 2632:  //
        -: 2633:  // try {
        -: 2634:  //   // Perform the test method.
        -: 2635:  // } catch (...) {
        -: 2636:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2637:  //     // Report the exception as failure.
        -: 2638:  //   else
        -: 2639:  //     throw;  // Re-throws the original exception.
        -: 2640:  // }
        -: 2641:  //
        -: 2642:  // However, the purpose of this flag is to allow the program to drop into
        -: 2643:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2644:  // control enters the catch block, the exception origin information is
        -: 2645:  // lost and the debugger will stop the program at the point of the
        -: 2646:  // re-throw in this function -- instead of at the point of the original
        -: 2647:  // throw statement in the code under test.  For this reason, we perform
        -: 2648:  // the check early, sacrificing the ability to affect Google Test's
        -: 2649:  // exception handling in the method where the exception is thrown.
        9: 2650:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        -: 2651:#if GTEST_HAS_EXCEPTIONS
        -: 2652:    try {
        9: 2653:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    =====: 2654:    } catch (const AssertionException&) {  // NOLINT
        -: 2655:      // This failure was reported already.
    =====: 2656:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
        -: 2657:      // This exception type can only be thrown by a failed Google
        -: 2658:      // Test assertion with the intention of letting another testing
        -: 2659:      // framework catch it.  Therefore we just re-throw it.
    =====: 2660:      throw;
    =====: 2661:    } catch (const std::exception& e) {  // NOLINT
    =====: 2662:      internal::ReportFailureInUnknownLocation(
        -: 2663:          TestPartResult::kFatalFailure,
    =====: 2664:          FormatCxxExceptionMessage(e.what(), location));
    =====: 2665:    } catch (...) {  // NOLINT
    =====: 2666:      internal::ReportFailureInUnknownLocation(
        -: 2667:          TestPartResult::kFatalFailure,
        -: 2668:          FormatCxxExceptionMessage(nullptr, location));
        -: 2669:    }
    =====: 2670:    return static_cast<Result>(0);
        -: 2671:#else
        -: 2672:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2673:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2674:  } else {
    #####: 2675:    return (object->*method)();
        -: 2676:  }
        -: 2677:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 2 returned 100% blocks executed 18%
        2: 2625:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2626:                                           const char* location) {
        -: 2627:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2628:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2629:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2630:  // after the exception is caught and either report or re-throw the
        -: 2631:  // exception based on the flag's value:
        -: 2632:  //
        -: 2633:  // try {
        -: 2634:  //   // Perform the test method.
        -: 2635:  // } catch (...) {
        -: 2636:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2637:  //     // Report the exception as failure.
        -: 2638:  //   else
        -: 2639:  //     throw;  // Re-throws the original exception.
        -: 2640:  // }
        -: 2641:  //
        -: 2642:  // However, the purpose of this flag is to allow the program to drop into
        -: 2643:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2644:  // control enters the catch block, the exception origin information is
        -: 2645:  // lost and the debugger will stop the program at the point of the
        -: 2646:  // re-throw in this function -- instead of at the point of the original
        -: 2647:  // throw statement in the code under test.  For this reason, we perform
        -: 2648:  // the check early, sacrificing the ability to affect Google Test's
        -: 2649:  // exception handling in the method where the exception is thrown.
        2: 2650:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        2: 2650-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        -: 2651:#if GTEST_HAS_EXCEPTIONS
        -: 2652:    try {
        2: 2653:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        2: 2653-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 2653-block  1
    =====: 2654:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2654-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2654-block  1
call    4 never executed
call    5 never executed
        -: 2655:      // This failure was reported already.
    =====: 2656:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2656-block  0
call    0 never executed
    $$$$$: 2656-block  1
call    1 never executed
        -: 2657:      // This exception type can only be thrown by a failed Google
        -: 2658:      // Test assertion with the intention of letting another testing
        -: 2659:      // framework catch it.  Therefore we just re-throw it.
    =====: 2660:      throw;
call    0 never executed
    =====: 2661:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2661-block  0
call    0 never executed
    $$$$$: 2661-block  1
call    1 never executed
    =====: 2662:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2662-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2662-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2662-block  2
call    8 never executed
    $$$$$: 2662-block  3
        -: 2663:          TestPartResult::kFatalFailure,
    =====: 2664:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2665:    } catch (...) {  // NOLINT
    $$$$$: 2665-block  0
call    0 never executed
    $$$$$: 2665-block  1
call    1 never executed
    =====: 2666:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2666-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2666-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2666-block  2
call    8 never executed
    $$$$$: 2666-block  3
        -: 2667:          TestPartResult::kFatalFailure,
        -: 2668:          FormatCxxExceptionMessage(nullptr, location));
        -: 2669:    }
    =====: 2670:    return static_cast<Result>(0);
    $$$$$: 2670-block  0
        -: 2671:#else
        -: 2672:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2673:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2674:  } else {
    #####: 2675:    return (object->*method)();
    %%%%%: 2675-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2675-block  1
    %%%%%: 2675-block  2
    %%%%%: 2675-block  3
call    2 never executed
        -: 2676:  }
        -: 2677:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 2 returned 100% blocks executed 18%
        2: 2625:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2626:                                           const char* location) {
        -: 2627:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2628:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2629:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2630:  // after the exception is caught and either report or re-throw the
        -: 2631:  // exception based on the flag's value:
        -: 2632:  //
        -: 2633:  // try {
        -: 2634:  //   // Perform the test method.
        -: 2635:  // } catch (...) {
        -: 2636:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2637:  //     // Report the exception as failure.
        -: 2638:  //   else
        -: 2639:  //     throw;  // Re-throws the original exception.
        -: 2640:  // }
        -: 2641:  //
        -: 2642:  // However, the purpose of this flag is to allow the program to drop into
        -: 2643:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2644:  // control enters the catch block, the exception origin information is
        -: 2645:  // lost and the debugger will stop the program at the point of the
        -: 2646:  // re-throw in this function -- instead of at the point of the original
        -: 2647:  // throw statement in the code under test.  For this reason, we perform
        -: 2648:  // the check early, sacrificing the ability to affect Google Test's
        -: 2649:  // exception handling in the method where the exception is thrown.
        2: 2650:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        2: 2650-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        -: 2651:#if GTEST_HAS_EXCEPTIONS
        -: 2652:    try {
        2: 2653:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        2: 2653-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 2653-block  1
    =====: 2654:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2654-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2654-block  1
call    4 never executed
call    5 never executed
        -: 2655:      // This failure was reported already.
    =====: 2656:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2656-block  0
call    0 never executed
    $$$$$: 2656-block  1
call    1 never executed
        -: 2657:      // This exception type can only be thrown by a failed Google
        -: 2658:      // Test assertion with the intention of letting another testing
        -: 2659:      // framework catch it.  Therefore we just re-throw it.
    =====: 2660:      throw;
call    0 never executed
    =====: 2661:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2661-block  0
call    0 never executed
    $$$$$: 2661-block  1
call    1 never executed
    =====: 2662:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2662-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2662-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2662-block  2
call    8 never executed
    $$$$$: 2662-block  3
        -: 2663:          TestPartResult::kFatalFailure,
    =====: 2664:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2665:    } catch (...) {  // NOLINT
    $$$$$: 2665-block  0
call    0 never executed
    $$$$$: 2665-block  1
call    1 never executed
    =====: 2666:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2666-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2666-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2666-block  2
call    8 never executed
    $$$$$: 2666-block  3
        -: 2667:          TestPartResult::kFatalFailure,
        -: 2668:          FormatCxxExceptionMessage(nullptr, location));
        -: 2669:    }
    =====: 2670:    return static_cast<Result>(0);
    $$$$$: 2670-block  0
        -: 2671:#else
        -: 2672:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2673:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2674:  } else {
    #####: 2675:    return (object->*method)();
    %%%%%: 2675-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2675-block  1
    %%%%%: 2675-block  2
    %%%%%: 2675-block  3
call    2 never executed
        -: 2676:  }
        -: 2677:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 1 returned 100% blocks executed 18%
        1: 2625:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2626:                                           const char* location) {
        -: 2627:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2628:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2629:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2630:  // after the exception is caught and either report or re-throw the
        -: 2631:  // exception based on the flag's value:
        -: 2632:  //
        -: 2633:  // try {
        -: 2634:  //   // Perform the test method.
        -: 2635:  // } catch (...) {
        -: 2636:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2637:  //     // Report the exception as failure.
        -: 2638:  //   else
        -: 2639:  //     throw;  // Re-throws the original exception.
        -: 2640:  // }
        -: 2641:  //
        -: 2642:  // However, the purpose of this flag is to allow the program to drop into
        -: 2643:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2644:  // control enters the catch block, the exception origin information is
        -: 2645:  // lost and the debugger will stop the program at the point of the
        -: 2646:  // re-throw in this function -- instead of at the point of the original
        -: 2647:  // throw statement in the code under test.  For this reason, we perform
        -: 2648:  // the check early, sacrificing the ability to affect Google Test's
        -: 2649:  // exception handling in the method where the exception is thrown.
        1: 2650:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 2650-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 2651:#if GTEST_HAS_EXCEPTIONS
        -: 2652:    try {
        1: 2653:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 2653-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2653-block  1
    =====: 2654:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2654-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2654-block  1
call    4 never executed
call    5 never executed
        -: 2655:      // This failure was reported already.
    =====: 2656:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2656-block  0
call    0 never executed
    $$$$$: 2656-block  1
call    1 never executed
        -: 2657:      // This exception type can only be thrown by a failed Google
        -: 2658:      // Test assertion with the intention of letting another testing
        -: 2659:      // framework catch it.  Therefore we just re-throw it.
    =====: 2660:      throw;
call    0 never executed
    =====: 2661:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2661-block  0
call    0 never executed
    $$$$$: 2661-block  1
call    1 never executed
    =====: 2662:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2662-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2662-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2662-block  2
call    8 never executed
    $$$$$: 2662-block  3
        -: 2663:          TestPartResult::kFatalFailure,
    =====: 2664:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2665:    } catch (...) {  // NOLINT
    $$$$$: 2665-block  0
call    0 never executed
    $$$$$: 2665-block  1
call    1 never executed
    =====: 2666:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2666-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2666-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2666-block  2
call    8 never executed
    $$$$$: 2666-block  3
        -: 2667:          TestPartResult::kFatalFailure,
        -: 2668:          FormatCxxExceptionMessage(nullptr, location));
        -: 2669:    }
    =====: 2670:    return static_cast<Result>(0);
    $$$$$: 2670-block  0
        -: 2671:#else
        -: 2672:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2673:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2674:  } else {
    #####: 2675:    return (object->*method)();
    %%%%%: 2675-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2675-block  1
    %%%%%: 2675-block  2
    %%%%%: 2675-block  3
call    2 never executed
        -: 2676:  }
        -: 2677:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 4 returned 100% blocks executed 18%
        4: 2625:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2626:                                           const char* location) {
        -: 2627:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2628:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2629:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2630:  // after the exception is caught and either report or re-throw the
        -: 2631:  // exception based on the flag's value:
        -: 2632:  //
        -: 2633:  // try {
        -: 2634:  //   // Perform the test method.
        -: 2635:  // } catch (...) {
        -: 2636:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2637:  //     // Report the exception as failure.
        -: 2638:  //   else
        -: 2639:  //     throw;  // Re-throws the original exception.
        -: 2640:  // }
        -: 2641:  //
        -: 2642:  // However, the purpose of this flag is to allow the program to drop into
        -: 2643:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2644:  // control enters the catch block, the exception origin information is
        -: 2645:  // lost and the debugger will stop the program at the point of the
        -: 2646:  // re-throw in this function -- instead of at the point of the original
        -: 2647:  // throw statement in the code under test.  For this reason, we perform
        -: 2648:  // the check early, sacrificing the ability to affect Google Test's
        -: 2649:  // exception handling in the method where the exception is thrown.
        4: 2650:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        4: 2650-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0
        -: 2651:#if GTEST_HAS_EXCEPTIONS
        -: 2652:    try {
        4: 2653:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        4: 2653-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 2653-block  1
    =====: 2654:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2654-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2654-block  1
call    4 never executed
call    5 never executed
        -: 2655:      // This failure was reported already.
    =====: 2656:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2656-block  0
call    0 never executed
    $$$$$: 2656-block  1
call    1 never executed
        -: 2657:      // This exception type can only be thrown by a failed Google
        -: 2658:      // Test assertion with the intention of letting another testing
        -: 2659:      // framework catch it.  Therefore we just re-throw it.
    =====: 2660:      throw;
call    0 never executed
    =====: 2661:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2661-block  0
call    0 never executed
    $$$$$: 2661-block  1
call    1 never executed
    =====: 2662:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2662-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2662-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2662-block  2
call    8 never executed
    $$$$$: 2662-block  3
        -: 2663:          TestPartResult::kFatalFailure,
    =====: 2664:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2665:    } catch (...) {  // NOLINT
    $$$$$: 2665-block  0
call    0 never executed
    $$$$$: 2665-block  1
call    1 never executed
    =====: 2666:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2666-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2666-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2666-block  2
call    8 never executed
    $$$$$: 2666-block  3
        -: 2667:          TestPartResult::kFatalFailure,
        -: 2668:          FormatCxxExceptionMessage(nullptr, location));
        -: 2669:    }
    =====: 2670:    return static_cast<Result>(0);
    $$$$$: 2670-block  0
        -: 2671:#else
        -: 2672:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2673:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2674:  } else {
    #####: 2675:    return (object->*method)();
    %%%%%: 2675-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2675-block  1
    %%%%%: 2675-block  2
    %%%%%: 2675-block  3
call    2 never executed
        -: 2676:  }
        -: 2677:}
------------------
        -: 2678:
        -: 2679:}  // namespace internal
        -: 2680:
        -: 2681:// Runs the test and updates the test result.
function _ZN7testing4Test3RunEv called 1 returned 100% blocks executed 90%
        1: 2682:void Test::Run() {
       1*: 2683:  if (!HasSameFixtureClass()) return;
        1: 2683-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 2683-block  1
        -: 2684:
        1: 2685:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        1: 2685-block  0
call    0 returned 1
        1: 2686:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 1
call    1 returned 1
        1: 2687:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
call    0 returned 1
        -: 2688:  // We will run the test only if SetUp() was successful and didn't call
        -: 2689:  // GTEST_SKIP().
       1*: 2690:  if (!HasFatalFailure() && !IsSkipped()) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 2690-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1: 2690-block  1
    %%%%%: 2690-block  2
        1: 2690-block  3
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1: 2691:    impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 2691-block  0
call    0 returned 1
call    1 returned 1
        1: 2692:    internal::HandleExceptionsInMethodIfSupported(this, &Test::TestBody,
call    0 returned 1
        -: 2693:                                                  "the test body");
        -: 2694:  }
        -: 2695:
        -: 2696:  // However, we want to clean up as much as possible.  Hence we will
        -: 2697:  // always call TearDown(), even if SetUp() or the test body has
        -: 2698:  // failed.
        1: 2699:  impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 2699-block  0
call    0 returned 1
call    1 returned 1
        1: 2700:  internal::HandleExceptionsInMethodIfSupported(this, &Test::TearDown,
call    0 returned 1
        -: 2701:                                                "TearDown()");
        -: 2702:}
        -: 2703:
        -: 2704:// Returns true if and only if the current test has a fatal failure.
function _ZN7testing4Test15HasFatalFailureEv called 3 returned 100% blocks executed 100%
        3: 2705:bool Test::HasFatalFailure() {
        3: 2706:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
        3: 2706-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
        -: 2707:}
        -: 2708:
        -: 2709:// Returns true if and only if the current test has a non-fatal failure.
function _ZN7testing4Test18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2710:bool Test::HasNonfatalFailure() {
        -: 2711:  return internal::GetUnitTestImpl()
        -: 2712:      ->current_test_result()
    #####: 2713:      ->HasNonfatalFailure();
    %%%%%: 2713-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2714:}
        -: 2715:
        -: 2716:// Returns true if and only if the current test was skipped.
function _ZN7testing4Test9IsSkippedEv called 3 returned 100% blocks executed 100%
        3: 2717:bool Test::IsSkipped() {
        3: 2718:  return internal::GetUnitTestImpl()->current_test_result()->Skipped();
        3: 2718-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
        -: 2719:}
        -: 2720:
        -: 2721:// class TestInfo
        -: 2722:
        -: 2723:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 2724:// object.
function _ZN7testing8TestInfoC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_PKcSA_NS_8internal12CodeLocationEPKvPNSB_15TestFactoryBaseE called 2 returned 100% blocks executed 32%
        2: 2725:TestInfo::TestInfo(const std::string& a_test_suite_name,
        -: 2726:                   const std::string& a_name, const char* a_type_param,
        -: 2727:                   const char* a_value_param,
        -: 2728:                   internal::CodeLocation a_code_location,
        -: 2729:                   internal::TypeId fixture_class_id,
        2: 2730:                   internal::TestFactoryBase* factory)
        2: 2731:    : test_suite_name_(a_test_suite_name),
        2: 2731-block  0
call    0 returned 2
        -: 2732:      // begin()/end() is MSVC 17.3.3 ASAN crash workaround (GitHub issue #3997)
        2: 2733:      name_(a_name.begin(), a_name.end()),
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 2733-block  0
call    6 returned 2
    $$$$$: 2733-block  1
call    7 never executed
    $$$$$: 2733-block  2
       2*: 2734:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 2734-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2734-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2734-block  2
        2: 2734-block  3
        2: 2734-block  4
call    9 returned 2
branch 10 taken 0 (fallthrough)
branch 11 taken 2
    %%%%%: 2734-block  5
call   12 never executed
    $$$$$: 2734-block  6
branch 13 never executed
branch 14 never executed
    $$$$$: 2734-block  7
call   15 never executed
    $$$$$: 2734-block  8
    $$$$$: 2734-block  9
branch 16 never executed
branch 17 never executed
    $$$$$: 2734-block 10
branch 18 never executed
branch 19 never executed
    $$$$$: 2734-block 11
call   20 never executed
       2*: 2735:      value_param_(a_value_param ? new std::string(a_value_param) : nullptr),
        2: 2735-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 2735-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2735-block  2
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2735-block  3
        2: 2735-block  4
        2: 2735-block  5
call    9 returned 2
branch 10 taken 0 (fallthrough)
branch 11 taken 2
    %%%%%: 2735-block  6
call   12 never executed
    $$$$$: 2735-block  7
branch 13 never executed
branch 14 never executed
    $$$$$: 2735-block  8
call   15 never executed
    $$$$$: 2735-block  9
    $$$$$: 2735-block 10
branch 16 never executed
branch 17 never executed
    $$$$$: 2735-block 11
branch 18 never executed
branch 19 never executed
    $$$$$: 2735-block 12
call   20 never executed
        2: 2736:      location_(a_code_location),
        2: 2736-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 2737:      fixture_class_id_(fixture_class_id),
        2: 2738:      should_run_(false),
        2: 2739:      is_disabled_(false),
        2: 2740:      matches_filter_(false),
        2: 2741:      is_in_another_shard_(false),
        2: 2742:      factory_(factory),
        2: 2743:      result_() {}
        2: 2743-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 2743-block  1
    $$$$$: 2743-block  2
call    3 never executed
    $$$$$: 2743-block  3
call    4 never executed
    $$$$$: 2743-block  4
call    5 never executed
    $$$$$: 2743-block  5
call    6 never executed
    $$$$$: 2743-block  6
call    7 never executed
        -: 2744:
        -: 2745:// Destructs a TestInfo object.
function _ZN7testing8TestInfoD2Ev called 2 returned 100% blocks executed 100%
        2: 2746:TestInfo::~TestInfo() { delete factory_; }
        2: 2746-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 2746-block  1
call    2 returned 2
        2: 2746-block  2
call    3 returned 2
call    4 returned 2
call    5 returned 2
call    6 returned 2
call    7 returned 2
call    8 returned 2
        -: 2747:
        -: 2748:namespace internal {
        -: 2749:
        -: 2750:// Creates a new TestInfo object and registers it with Google Test;
        -: 2751:// returns the created object.
        -: 2752://
        -: 2753:// Arguments:
        -: 2754://
        -: 2755://   test_suite_name:  name of the test suite
        -: 2756://   name:             name of the test
        -: 2757://   type_param:       the name of the test's type parameter, or NULL if
        -: 2758://                     this is not a typed or a type-parameterized test.
        -: 2759://   value_param:      text representation of the test's value parameter,
        -: 2760://                     or NULL if this is not a value-parameterized test.
        -: 2761://   code_location:    code location where the test is defined
        -: 2762://   fixture_class_id: ID of the test fixture class
        -: 2763://   set_up_tc:        pointer to the function that sets up the test suite
        -: 2764://   tear_down_tc:     pointer to the function that tears down the test suite
        -: 2765://   factory:          pointer to the factory that creates a test object.
        -: 2766://                     The newly created TestInfo instance will assume
        -: 2767://                     ownership of the factory object.
function _ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_15TestFactoryBaseE called 2 returned 100% blocks executed 50%
        2: 2768:TestInfo* MakeAndRegisterTestInfo(
        -: 2769:    const char* test_suite_name, const char* name, const char* type_param,
        -: 2770:    const char* value_param, CodeLocation code_location,
        -: 2771:    TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc,
        -: 2772:    TearDownTestSuiteFunc tear_down_tc, TestFactoryBase* factory) {
        -: 2773:  TestInfo* const test_info =
        -: 2774:      new TestInfo(test_suite_name, name, type_param, value_param,
        2: 2775:                   code_location, fixture_class_id, factory);
        2: 2775-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 2775-block  1
call    4 returned 2
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
        2: 2775-block  2
call    8 returned 2
call    9 returned 2
branch 10 taken 2 (fallthrough)
branch 11 taken 0 (throw)
        2: 2775-block  3
call   12 returned 2
branch 13 taken 2 (fallthrough)
branch 14 taken 0 (throw)
        2: 2775-block  4
call   15 returned 2
call   16 returned 2
call   17 returned 2
call   18 returned 2
call   19 returned 2
    $$$$$: 2775-block  5
call   20 never executed
    $$$$$: 2775-block  6
call   21 never executed
    $$$$$: 2775-block  7
    $$$$$: 2775-block  8
    $$$$$: 2775-block  9
call   22 never executed
    $$$$$: 2775-block 10
call   23 never executed
    $$$$$: 2775-block 11
    $$$$$: 2775-block 12
    $$$$$: 2775-block 13
call   24 never executed
    $$$$$: 2775-block 14
    $$$$$: 2775-block 15
branch 25 never executed
branch 26 never executed
    $$$$$: 2775-block 16
call   27 never executed
        2: 2776:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
call    0 returned 2
call    1 returned 2
        2: 2777:  return test_info;
        2: 2777-block  0
        -: 2778:}
        -: 2779:
function _ZN7testing8internal26ReportInvalidTestSuiteTypeEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####: 2780:void ReportInvalidTestSuiteType(const char* test_suite_name,
        -: 2781:                                CodeLocation code_location) {
    #####: 2782:  Message errors;
    %%%%%: 2782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2783:  errors
    #####: 2784:      << "Attempted redefinition of test suite " << test_suite_name << ".\n"
    %%%%%: 2784-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2784-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2784-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2785:      << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2785-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2786:      << "class.  However, in test suite " << test_suite_name << ", you tried\n"
    %%%%%: 2786-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2786-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2786-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2787:      << "to define a test using a fixture class different from the one\n"
    %%%%%: 2787-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2788:      << "used earlier. This can happen if the two fixture classes are\n"
    %%%%%: 2788-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2789:      << "from different namespaces and have the same name. You should\n"
    %%%%%: 2789-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2790:      << "probably rename one of the classes to put the tests into different\n"
    %%%%%: 2790-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2791:      << "test suites.";
    %%%%%: 2791-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2792:
    #####: 2793:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    %%%%%: 2793-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2793-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$: 2793-block  2
call    9 never executed
    $$$$$: 2793-block  3
    $$$$$: 2793-block  4
call   10 never executed
    $$$$$: 2793-block  5
        -: 2794:                                          code_location.line)
    #####: 2795:                    << " " << errors.GetString();
    %%%%%: 2795-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2795-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2795-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2795-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2795-block  4
call   12 never executed
call   13 never executed
    $$$$$: 2795-block  5
call   14 never executed
    $$$$$: 2795-block  6
    #####: 2796:}
call    0 never executed
    $$$$$: 2796-block  0
call    1 never executed
        -: 2797:
        -: 2798:// This method expands all parameterized tests registered with macros TEST_P
        -: 2799:// and INSTANTIATE_TEST_SUITE_P into regular tests and registers those.
        -: 2800:// This will be done just once during the program runtime.
function _ZN7testing8internal12UnitTestImpl26RegisterParameterizedTestsEv called 2 returned 100% blocks executed 100%
        2: 2801:void UnitTestImpl::RegisterParameterizedTests() {
        2: 2802:  if (!parameterized_tests_registered_) {
        2: 2802-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 2803:    parameterized_test_registry_.RegisterTests();
        2: 2803-block  0
call    0 returned 2
        2: 2804:    type_parameterized_test_registry_.CheckForInstantiations();
call    0 returned 2
        2: 2805:    parameterized_tests_registered_ = true;
        -: 2806:  }
        2: 2807:}
        -: 2808:
        -: 2809:}  // namespace internal
        -: 2810:
        -: 2811:// Creates the test object, runs it, records its result, and then
        -: 2812:// deletes it.
function _ZN7testing8TestInfo3RunEv called 1 returned 100% blocks executed 86%
        1: 2813:void TestInfo::Run() {
        1: 2814:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
        1: 2814-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2814-block  1
call    3 returned 1
call    4 returned 1
        1: 2815:  if (!should_run_) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 2816:    if (is_disabled_ && matches_filter_) repeater->OnTestDisabled(*this);
    %%%%%: 2816-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2816-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 2816-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2817:    return;
    %%%%%: 2817-block  0
        -: 2818:  }
        -: 2819:
        -: 2820:  // Tells UnitTest where to store test result.
        1: 2821:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        1: 2821-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2822:  impl->set_current_test_info(this);
        1: 2822-block  0
call    0 returned 1
        -: 2823:
        -: 2824:  // Notifies the unit test event listeners that a test is about to start.
        1: 2825:  repeater->OnTestStart(*this);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2826:  result_.set_start_timestamp(internal::GetTimeInMillis());
        1: 2826-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2826-block  1
call    3 returned 1
        1: 2827:  internal::Timer timer;
call    0 returned 1
        1: 2828:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2828-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -: 2829:
        -: 2830:  // Creates the test object.
        2: 2831:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
        1: 2832:      factory_, &internal::TestFactoryBase::CreateTest,
        1: 2832-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2833:      "the test fixture's constructor");
        -: 2834:
        -: 2835:  // Runs the test if the constructor didn't generate a fatal failure or invoke
        -: 2836:  // GTEST_SKIP().
        -: 2837:  // Note that the object will not be null
       1*: 2838:  if (!Test::HasFatalFailure() && !Test::IsSkipped()) {
        1: 2838-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2838-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 2838-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 2838-block  3
branch  8 taken 1 (fallthrough)
branch  9 taken 0
        1: 2838-block  4
    %%%%%: 2838-block  5
        1: 2838-block  6
branch 10 taken 1 (fallthrough)
branch 11 taken 0
        -: 2839:    // This doesn't throw as all user code that can throw are wrapped into
        -: 2840:    // exception handling code.
        1: 2841:    test->Run();
        1: 2841-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2842:  }
        -: 2843:
        1: 2844:  if (test != nullptr) {
        1: 2844-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 2845:    // Deletes the test object.
        1: 2846:    impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 2846-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2846-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 2847:    internal::HandleExceptionsInMethodIfSupported(
        1: 2847-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2848:        test, &Test::DeleteSelf_, "the test fixture's destructor");
        -: 2849:  }
        -: 2850:
        1: 2851:  result_.set_elapsed_time(timer.Elapsed());
        1: 2851-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2851-block  1
call    3 returned 1
        -: 2852:
        -: 2853:  // Notifies the unit test event listener that a test has just finished.
        1: 2854:  repeater->OnTestEnd(*this);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2855:
        -: 2856:  // Tells UnitTest to stop associating assertion results to this
        -: 2857:  // test.
        1: 2858:  impl->set_current_test_info(nullptr);
        1: 2858-block  0
call    0 returned 1
        -: 2859:}
        -: 2860:
        -: 2861:// Skip and records a skipped test result for this object.
function _ZN7testing8TestInfo4SkipEv called 0 returned 0% blocks executed 0%
    #####: 2862:void TestInfo::Skip() {
    #####: 2863:  if (!should_run_) return;
    %%%%%: 2863-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2863-block  1
        -: 2864:
    #####: 2865:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2865-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2866:  impl->set_current_test_info(this);
    %%%%%: 2866-block  0
call    0 never executed
        -: 2867:
    #####: 2868:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2868-block  0
call    3 never executed
call    4 never executed
        -: 2869:
        -: 2870:  // Notifies the unit test event listeners that a test is about to start.
    #####: 2871:  repeater->OnTestStart(*this);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2872:
        -: 2873:  const TestPartResult test_part_result =
    #####: 2874:      TestPartResult(TestPartResult::kSkip, this->file(), this->line(), "");
    %%%%%: 2874-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2875:  impl->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
    %%%%%: 2875-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2875-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2876:      test_part_result);
        -: 2877:
        -: 2878:  // Notifies the unit test event listener that a test has just finished.
    #####: 2879:  repeater->OnTestEnd(*this);
    %%%%%: 2879-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2880:  impl->set_current_test_info(nullptr);
    %%%%%: 2880-block  0
call    0 never executed
    #####: 2881:}
call    0 never executed
    $$$$$: 2881-block  0
call    1 never executed
        -: 2882:
        -: 2883:// class TestSuite
        -: 2884:
        -: 2885:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 2886:int TestSuite::successful_test_count() const {
        1: 2887:  return CountIf(test_info_list_, TestPassed);
        1: 2887-block  0
call    0 returned 1
        -: 2888:}
        -: 2889:
        -: 2890:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 2891:int TestSuite::skipped_test_count() const {
        1: 2892:  return CountIf(test_info_list_, TestSkipped);
        1: 2892-block  0
call    0 returned 1
        -: 2893:}
        -: 2894:
        -: 2895:// Gets the number of failed tests in this test suite.
function _ZNK7testing9TestSuite17failed_test_countEv called 2 returned 100% blocks executed 100%
        2: 2896:int TestSuite::failed_test_count() const {
        2: 2897:  return CountIf(test_info_list_, TestFailed);
        2: 2897-block  0
call    0 returned 2
        -: 2898:}
        -: 2899:
        -: 2900:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing9TestSuite30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 2901:int TestSuite::reportable_disabled_test_count() const {
        1: 2902:  return CountIf(test_info_list_, TestReportableDisabled);
        1: 2902-block  0
call    0 returned 1
        -: 2903:}
        -: 2904:
        -: 2905:// Gets the number of disabled tests in this test suite.
function _ZNK7testing9TestSuite19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2906:int TestSuite::disabled_test_count() const {
    #####: 2907:  return CountIf(test_info_list_, TestDisabled);
    %%%%%: 2907-block  0
call    0 never executed
        -: 2908:}
        -: 2909:
        -: 2910:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing9TestSuite21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2911:int TestSuite::reportable_test_count() const {
    #####: 2912:  return CountIf(test_info_list_, TestReportable);
    %%%%%: 2912-block  0
call    0 never executed
        -: 2913:}
        -: 2914:
        -: 2915:// Get the number of tests in this test suite that should run.
function _ZNK7testing9TestSuite17test_to_run_countEv called 4 returned 100% blocks executed 100%
        4: 2916:int TestSuite::test_to_run_count() const {
        4: 2917:  return CountIf(test_info_list_, ShouldRunTest);
        4: 2917-block  0
call    0 returned 4
        -: 2918:}
        -: 2919:
        -: 2920:// Gets the number of all tests.
function _ZNK7testing9TestSuite16total_test_countEv called 2 returned 100% blocks executed 100%
        2: 2921:int TestSuite::total_test_count() const {
        2: 2922:  return static_cast<int>(test_info_list_.size());
        2: 2922-block  0
call    0 returned 2
        -: 2923:}
        -: 2924:
        -: 2925:// Creates a TestSuite with the given name.
        -: 2926://
        -: 2927:// Arguments:
        -: 2928://
        -: 2929://   a_name:       name of the test suite
        -: 2930://   a_type_param: the name of the test suite's type parameter, or NULL if
        -: 2931://                 this is not a typed or a type-parameterized test suite.
        -: 2932://   set_up_tc:    pointer to the function that sets up the test suite
        -: 2933://   tear_down_tc: pointer to the function that tears down the test suite
function _ZN7testing9TestSuiteC2EPKcS2_PFvvES4_ called 2 returned 100% blocks executed 34%
        2: 2934:TestSuite::TestSuite(const char* a_name, const char* a_type_param,
        -: 2935:                     internal::SetUpTestSuiteFunc set_up_tc,
        2: 2936:                     internal::TearDownTestSuiteFunc tear_down_tc)
        2: 2937:    : name_(a_name),
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 2937-block  0
call    3 returned 2
    $$$$$: 2937-block  1
call    4 never executed
    $$$$$: 2937-block  2
call    5 never executed
       2*: 2938:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 2938-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2938-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2938-block  2
        2: 2938-block  3
        2: 2938-block  4
call    9 returned 2
branch 10 taken 0 (fallthrough)
branch 11 taken 2
    %%%%%: 2938-block  5
call   12 never executed
    $$$$$: 2938-block  6
branch 13 never executed
branch 14 never executed
    $$$$$: 2938-block  7
call   15 never executed
    $$$$$: 2938-block  8
    $$$$$: 2938-block  9
branch 16 never executed
branch 17 never executed
    $$$$$: 2938-block 10
branch 18 never executed
branch 19 never executed
    $$$$$: 2938-block 11
call   20 never executed
        2: 2939:      set_up_tc_(set_up_tc),
        2: 2940:      tear_down_tc_(tear_down_tc),
        2: 2941:      should_run_(false),
        2: 2942:      start_timestamp_(0),
        4: 2943:      elapsed_time_(0) {}
        2: 2943-block  0
call    0 returned 2
        2: 2943-block  1
call    1 returned 2
call    2 returned 2
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 2943-block  2
    $$$$$: 2943-block  3
call    6 never executed
    $$$$$: 2943-block  4
call    7 never executed
    $$$$$: 2943-block  5
call    8 never executed
    $$$$$: 2943-block  6
call    9 never executed
        -: 2944:
        -: 2945:// Destructor of TestSuite.
        6: 2946:TestSuite::~TestSuite() {
        -: 2947:  // Deletes every Test in the collection.
        2: 2948:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        4: 2949:}
------------------
_ZN7testing9TestSuiteD0Ev:
function _ZN7testing9TestSuiteD0Ev called 2 returned 100% blocks executed 100%
        2: 2946:TestSuite::~TestSuite() {
        -: 2947:  // Deletes every Test in the collection.
        -: 2948:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        2: 2949:}
        2: 2949-block  0
call    0 returned 2
call    1 returned 2
------------------
_ZN7testing9TestSuiteD2Ev:
function _ZN7testing9TestSuiteD2Ev called 2 returned 100% blocks executed 100%
        4: 2946:TestSuite::~TestSuite() {
        -: 2947:  // Deletes every Test in the collection.
        2: 2948:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        2: 2948-block  0
call    0 returned 2
        2: 2949:}
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
------------------
        -: 2950:
        -: 2951:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2952:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing9TestSuite11GetTestInfoEi called 0 returned 0% blocks executed 0%
    #####: 2953:const TestInfo* TestSuite::GetTestInfo(int i) const {
    #####: 2954:  const int index = GetElementOr(test_indices_, i, -1);
    %%%%%: 2954-block  0
call    0 never executed
    #####: 2955:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 never executed
branch  1 never executed
    %%%%%: 2955-block  0
call    2 never executed
    %%%%%: 2955-block  1
    %%%%%: 2955-block  2
        -: 2956:}
        -: 2957:
        -: 2958:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2959:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing9TestSuite18GetMutableTestInfoEi called 1 returned 100% blocks executed 86%
        1: 2960:TestInfo* TestSuite::GetMutableTestInfo(int i) {
        1: 2961:  const int index = GetElementOr(test_indices_, i, -1);
        1: 2961-block  0
call    0 returned 1
       1*: 2962:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2962-block  0
call    2 returned 1
    %%%%%: 2962-block  1
        1: 2962-block  2
        -: 2963:}
        -: 2964:
        -: 2965:// Adds a test to this test suite.  Will delete the test upon
        -: 2966:// destruction of the TestSuite object.
function _ZN7testing9TestSuite11AddTestInfoEPNS_8TestInfoE called 2 returned 100% blocks executed 100%
        2: 2967:void TestSuite::AddTestInfo(TestInfo* test_info) {
        2: 2968:  test_info_list_.push_back(test_info);
        2: 2968-block  0
call    0 returned 2
        2: 2969:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 2970:}
        2: 2970-block  0
        -: 2971:
        -: 2972:// Runs every test in this TestSuite.
function _ZN7testing9TestSuite3RunEv called 1 returned 100% blocks executed 70%
        1: 2973:void TestSuite::Run() {
       1*: 2974:  if (!should_run_) return;
        1: 2974-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2974-block  1
        -: 2975:
        1: 2976:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        1: 2976-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2977:  impl->set_current_test_suite(this);
        1: 2977-block  0
call    0 returned 1
        -: 2978:
        1: 2979:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2979-block  0
call    3 returned 1
call    4 returned 1
        -: 2980:
        -: 2981:  // Call both legacy and the new API
        1: 2982:  repeater->OnTestSuiteStart(*this);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2983://  Legacy API is deprecated but still available
        -: 2984:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        1: 2985:  repeater->OnTestCaseStart(*this);
        1: 2985-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2986:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 2987:
        1: 2988:  impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 2988-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2988-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 2989:  internal::HandleExceptionsInMethodIfSupported(
        1: 2989-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2990:      this, &TestSuite::RunSetUpTestSuite, "SetUpTestSuite()");
        -: 2991:
        1: 2992:  const bool skip_all = ad_hoc_test_result().Failed();
        1: 2992-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 2993:
        1: 2994:  start_timestamp_ = internal::GetTimeInMillis();
        1: 2994-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2995:  internal::Timer timer;
        1: 2995-block  0
call    0 returned 1
        2: 2996:  for (int i = 0; i < total_test_count(); i++) {
        1: 2996-block  0
        2: 2996-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 2997:    if (skip_all) {
        1: 2997-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 2998:      GetMutableTestInfo(i)->Skip();
    %%%%%: 2998-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2998-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2999:    } else {
        1: 3000:      GetMutableTestInfo(i)->Run();
        1: 3000-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3000-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -: 3001:    }
       1*: 3002:    if (GTEST_FLAG_GET(fail_fast) &&
        1: 3002-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3002-block  1
        1: 3002-block  2
        1: 3002-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 3003:        GetMutableTestInfo(i)->result()->Failed()) {
    %%%%%: 3003-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3003-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3003-block  2
branch  7 never executed
branch  8 never executed
    #####: 3004:      for (int j = i + 1; j < total_test_count(); j++) {
    %%%%%: 3004-block  0
    %%%%%: 3004-block  1
    %%%%%: 3004-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3005:        GetMutableTestInfo(j)->Skip();
    %%%%%: 3005-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3005-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3006:      }
    #####: 3007:      break;
    %%%%%: 3007-block  0
        -: 3008:    }
        -: 3009:  }
        1: 3010:  elapsed_time_ = timer.Elapsed();
        1: 3010-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3011:
        1: 3012:  impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 3012-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3012-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3013:  internal::HandleExceptionsInMethodIfSupported(
        1: 3013-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3014:      this, &TestSuite::RunTearDownTestSuite, "TearDownTestSuite()");
        -: 3015:
        -: 3016:  // Call both legacy and the new API
        1: 3017:  repeater->OnTestSuiteEnd(*this);
        1: 3017-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3018://  Legacy API is deprecated but still available
        -: 3019:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        1: 3020:  repeater->OnTestCaseEnd(*this);
        1: 3020-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3021:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3022:
        1: 3023:  impl->set_current_test_suite(nullptr);
        1: 3023-block  0
call    0 returned 1
        -: 3024:}
        -: 3025:
        -: 3026:// Skips all tests under this TestSuite.
function _ZN7testing9TestSuite4SkipEv called 0 returned 0% blocks executed 0%
    #####: 3027:void TestSuite::Skip() {
    #####: 3028:  if (!should_run_) return;
    %%%%%: 3028-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3028-block  1
        -: 3029:
    #####: 3030:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 3030-block  0
call    0 never executed
    #####: 3031:  impl->set_current_test_suite(this);
call    0 never executed
        -: 3032:
    #####: 3033:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3034:
        -: 3035:  // Call both legacy and the new API
    #####: 3036:  repeater->OnTestSuiteStart(*this);
call    0 never executed
        -: 3037://  Legacy API is deprecated but still available
        -: 3038:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3039:  repeater->OnTestCaseStart(*this);
call    0 never executed
        -: 3040:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3041:
    #####: 3042:  for (int i = 0; i < total_test_count(); i++) {
    %%%%%: 3042-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3043:    GetMutableTestInfo(i)->Skip();
    %%%%%: 3043-block  0
call    0 never executed
call    1 never executed
        -: 3044:  }
        -: 3045:
        -: 3046:  // Call both legacy and the new API
    #####: 3047:  repeater->OnTestSuiteEnd(*this);
    %%%%%: 3047-block  0
call    0 never executed
        -: 3048:  // Legacy API is deprecated but still available
        -: 3049:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3050:  repeater->OnTestCaseEnd(*this);
call    0 never executed
        -: 3051:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3052:
    #####: 3053:  impl->set_current_test_suite(nullptr);
call    0 never executed
        -: 3054:}
        -: 3055:
        -: 3056:// Clears the results of all tests in this test suite.
function _ZN7testing9TestSuite11ClearResultEv called 1 returned 100% blocks executed 100%
        1: 3057:void TestSuite::ClearResult() {
        1: 3058:  ad_hoc_test_result_.Clear();
        1: 3058-block  0
call    0 returned 1
        1: 3059:  ForEach(test_info_list_, TestInfo::ClearTestResult);
call    0 returned 1
        1: 3060:}
        -: 3061:
        -: 3062:// Shuffles the tests in this test suite.
function _ZN7testing9TestSuite12ShuffleTestsEPNS_8internal6RandomE called 0 returned 0% blocks executed 0%
    #####: 3063:void TestSuite::ShuffleTests(internal::Random* random) {
    #####: 3064:  Shuffle(random, &test_indices_);
    %%%%%: 3064-block  0
call    0 never executed
    #####: 3065:}
        -: 3066:
        -: 3067:// Restores the test order to before the first shuffle.
function _ZN7testing9TestSuite14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 3068:void TestSuite::UnshuffleTests() {
        2: 3069:  for (size_t i = 0; i < test_indices_.size(); i++) {
        1: 3069-block  0
        2: 3069-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 3070:    test_indices_[i] = static_cast<int>(i);
        1: 3070-block  0
call    0 returned 1
        -: 3071:  }
        1: 3072:}
        -: 3073:
        -: 3074:// Formats a countable noun.  Depending on its quantity, either the
        -: 3075:// singular form or the plural form is used. e.g.
        -: 3076://
        -: 3077:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 3078:// FormatCountableNoun(5, "book", "books") returns "5 books".
function _ZN7testingL19FormatCountableNounEiPKcS1_ called 7 returned 100% blocks executed 65%
        7: 3079:static std::string FormatCountableNoun(int count, const char* singular_form,
        -: 3080:                                       const char* plural_form) {
       14: 3081:  return internal::StreamableToString(count) + " " +
        7: 3081-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 3081-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7: 3081-block  2
call    6 returned 7
call    7 returned 7
    $$$$$: 3081-block  3
call    8 never executed
    $$$$$: 3081-block  4
call    9 never executed
    $$$$$: 3081-block  5
      21*: 3082:         (count == 1 ? singular_form : plural_form);
        7: 3082-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7: 3082-block  1
    %%%%%: 3082-block  2
        7: 3082-block  3
call    2 returned 7
branch  3 taken 7 (fallthrough)
branch  4 taken 0 (throw)
        7: 3082-block  4
        -: 3083:}
        -: 3084:
        -: 3085:// Formats the count of tests.
function _ZN7testingL15FormatTestCountEi called 3 returned 100% blocks executed 100%
        3: 3086:static std::string FormatTestCount(int test_count) {
        3: 3087:  return FormatCountableNoun(test_count, "test", "tests");
        3: 3087-block  0
call    0 returned 3
        -: 3088:}
        -: 3089:
        -: 3090:// Formats the count of test suites.
function _ZN7testingL20FormatTestSuiteCountEi called 2 returned 100% blocks executed 100%
        2: 3091:static std::string FormatTestSuiteCount(int test_suite_count) {
        2: 3092:  return FormatCountableNoun(test_suite_count, "test suite", "test suites");
        2: 3092-block  0
call    0 returned 2
        -: 3093:}
        -: 3094:
        -: 3095:// Converts a TestPartResult::Type enum to human-friendly string
        -: 3096:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 3097:// to "Failure", as the user usually doesn't care about the difference
        -: 3098:// between the two when viewing the test result.
function _ZN7testingL26TestPartResultTypeToStringENS_14TestPartResult4TypeE called 0 returned 0% blocks executed 0%
    #####: 3099:static const char* TestPartResultTypeToString(TestPartResult::Type type) {
    #####: 3100:  switch (type) {
    %%%%%: 3100-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3101:    case TestPartResult::kSkip:
    #####: 3102:      return "Skipped\n";
    %%%%%: 3102-block  0
    #####: 3103:    case TestPartResult::kSuccess:
    #####: 3104:      return "Success";
    %%%%%: 3104-block  0
        -: 3105:
    #####: 3106:    case TestPartResult::kNonFatalFailure:
        -: 3107:    case TestPartResult::kFatalFailure:
        -: 3108:#ifdef _MSC_VER
        -: 3109:      return "error: ";
        -: 3110:#else
    #####: 3111:      return "Failure\n";
    %%%%%: 3111-block  0
        -: 3112:#endif
    #####: 3113:    default:
    #####: 3114:      return "Unknown result type";
    %%%%%: 3114-block  0
        -: 3115:  }
        -: 3116:}
        -: 3117:
        -: 3118:namespace internal {
        -: 3119:namespace {
        -: 3120:enum class GTestColor { kDefault, kRed, kGreen, kYellow };
        -: 3121:}  // namespace
        -: 3122:
        -: 3123:// Prints a TestPartResult to an std::string.
function _ZN7testing8internalL27PrintTestPartResultToStringERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3124:static std::string PrintTestPartResultToString(
        -: 3125:    const TestPartResult& test_part_result) {
    #####: 3126:  return (Message() << internal::FormatFileLocation(
    %%%%%: 3126-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3126-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$: 3126-block  2
call    9 never executed
    $$$$$: 3126-block  3
    $$$$$: 3126-block  4
call   10 never executed
        -: 3127:                           test_part_result.file_name(),
    #####: 3128:                           test_part_result.line_number())
    %%%%%: 3128-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3129:                    << " "
    %%%%%: 3129-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3130:                    << TestPartResultTypeToString(test_part_result.type())
    %%%%%: 3130-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3130-block  1
    #####: 3131:                    << test_part_result.message())
    %%%%%: 3131-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3131-block  1
call    4 never executed
    $$$$$: 3131-block  2
    #####: 3132:      .GetString();
    %%%%%: 3132-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3132-block  1
        -: 3133:}
        -: 3134:
        -: 3135:// Prints a TestPartResult.
function _ZN7testing8internalL19PrintTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3136:static void PrintTestPartResult(const TestPartResult& test_part_result) {
    #####: 3137:  const std::string& result = PrintTestPartResultToString(test_part_result);
    %%%%%: 3137-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3138:  printf("%s\n", result.c_str());
    %%%%%: 3138-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3139:  fflush(stdout);
    %%%%%: 3139-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3140:  // If the test program runs in Visual Studio or a debugger, the
        -: 3141:  // following statements add the test part result message to the Output
        -: 3142:  // window such that the user can double-click on it to jump to the
        -: 3143:  // corresponding source code location; otherwise they do nothing.
        -: 3144:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3145:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 3146:  // to stdout is done by OutputDebugString() there already - we don't
        -: 3147:  // want the same message printed twice.
        -: 3148:  ::OutputDebugStringA(result.c_str());
        -: 3149:  ::OutputDebugStringA("\n");
        -: 3150:#endif
    #####: 3151:}
    %%%%%: 3151-block  0
call    0 never executed
    $$$$$: 3151-block  1
call    1 never executed
        -: 3152:
        -: 3153:// class PrettyUnitTestResultPrinter
        -: 3154:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \
        -: 3155:    !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3156:
        -: 3157:// Returns the character attribute for the given color.
        -: 3158:static WORD GetColorAttribute(GTestColor color) {
        -: 3159:  switch (color) {
        -: 3160:    case GTestColor::kRed:
        -: 3161:      return FOREGROUND_RED;
        -: 3162:    case GTestColor::kGreen:
        -: 3163:      return FOREGROUND_GREEN;
        -: 3164:    case GTestColor::kYellow:
        -: 3165:      return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 3166:    default:
        -: 3167:      return 0;
        -: 3168:  }
        -: 3169:}
        -: 3170:
        -: 3171:static int GetBitOffset(WORD color_mask) {
        -: 3172:  if (color_mask == 0) return 0;
        -: 3173:
        -: 3174:  int bitOffset = 0;
        -: 3175:  while ((color_mask & 1) == 0) {
        -: 3176:    color_mask >>= 1;
        -: 3177:    ++bitOffset;
        -: 3178:  }
        -: 3179:  return bitOffset;
        -: 3180:}
        -: 3181:
        -: 3182:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 3183:  // Let's reuse the BG
        -: 3184:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 3185:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 3186:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 3187:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 3188:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 3189:
        -: 3190:  WORD new_color =
        -: 3191:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 3192:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 3193:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 3194:
        -: 3195:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 3196:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 3197:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 3198:  }
        -: 3199:  return new_color;
        -: 3200:}
        -: 3201:
        -: 3202:#else
        -: 3203:
        -: 3204:// Returns the ANSI color code for the given color. GTestColor::kDefault is
        -: 3205:// an invalid input.
function _ZN7testing8internalL16GetAnsiColorCodeENS0_12_GLOBAL__N_110GTestColorE called 0 returned 0% blocks executed 0%
    #####: 3206:static const char* GetAnsiColorCode(GTestColor color) {
    #####: 3207:  switch (color) {
    %%%%%: 3207-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3208:    case GTestColor::kRed:
    #####: 3209:      return "1";
    %%%%%: 3209-block  0
    #####: 3210:    case GTestColor::kGreen:
    #####: 3211:      return "2";
    %%%%%: 3211-block  0
    #####: 3212:    case GTestColor::kYellow:
    #####: 3213:      return "3";
    %%%%%: 3213-block  0
    #####: 3214:    default:
    #####: 3215:      return nullptr;
    %%%%%: 3215-block  0
        -: 3216:  }
        -: 3217:}
        -: 3218:
        -: 3219:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3220:
        -: 3221:// Returns true if and only if Google Test should use colors in the output.
function _ZN7testing8internal14ShouldUseColorEb called 1 returned 100% blocks executed 24%
        1: 3222:bool ShouldUseColor(bool stdout_is_tty) {
        1: 3223:  std::string c = GTEST_FLAG_GET(color);
        1: 3223-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3224:  const char* const gtest_color = c.c_str();
        1: 3224-block  0
call    0 returned 1
        -: 3225:
        1: 3226:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 3227:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 3228:    // On Windows the TERM variable is usually not set, but the
        -: 3229:    // console there does support colors.
        -: 3230:    return stdout_is_tty;
        -: 3231:#else
        -: 3232:    // On non-Windows platforms, we rely on the TERM variable.
    #####: 3233:    const char* const term = posix::GetEnv("TERM");
    %%%%%: 3233-block  0
call    0 never executed
        -: 3234:    const bool term_supports_color =
    #####: 3235:        term != nullptr && (String::CStringEquals(term, "xterm") ||
branch  0 never executed
branch  1 never executed
    %%%%%: 3235-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3235-block  1
    %%%%%: 3235-block  2
    #####: 3236:                            String::CStringEquals(term, "xterm-color") ||
    %%%%%: 3236-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3237:                            String::CStringEquals(term, "xterm-kitty") ||
    %%%%%: 3237-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3238:                            String::CStringEquals(term, "screen") ||
    %%%%%: 3238-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3239:                            String::CStringEquals(term, "tmux") ||
    %%%%%: 3239-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3240:                            String::CStringEquals(term, "rxvt-unicode") ||
    %%%%%: 3240-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3241:                            String::CStringEquals(term, "linux") ||
    %%%%%: 3241-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3242:                            String::CStringEquals(term, "cygwin") ||
    %%%%%: 3242-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3243:                            String::EndsWithCaseInsensitive(term, "-256color"));
    %%%%%: 3243-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3243-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3243-block  2
call    8 never executed
    %%%%%: 3243-block  3
branch  9 never executed
branch 10 never executed
    %%%%%: 3243-block  4
call   11 never executed
    %%%%%: 3243-block  5
branch 12 never executed
branch 13 never executed
    %%%%%: 3243-block  6
call   14 never executed
    %%%%%: 3243-block  7
branch 15 never executed
branch 16 never executed
    %%%%%: 3243-block  8
call   17 never executed
    %%%%%: 3243-block  9
branch 18 never executed
branch 19 never executed
    %%%%%: 3243-block 10
call   20 never executed
    $$$$$: 3243-block 11
branch 21 never executed
branch 22 never executed
    $$$$$: 3243-block 12
call   23 never executed
    $$$$$: 3243-block 13
    $$$$$: 3243-block 14
branch 24 never executed
branch 25 never executed
    $$$$$: 3243-block 15
call   26 never executed
    $$$$$: 3243-block 16
    $$$$$: 3243-block 17
branch 27 never executed
branch 28 never executed
    $$$$$: 3243-block 18
call   29 never executed
    $$$$$: 3243-block 19
    $$$$$: 3243-block 20
branch 30 never executed
branch 31 never executed
    $$$$$: 3243-block 21
call   32 never executed
    $$$$$: 3243-block 22
    #####: 3244:    return stdout_is_tty && term_supports_color;
    %%%%%: 3244-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3244-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3244-block  2
    %%%%%: 3244-block  3
    %%%%%: 3244-block  4
        -: 3245:#endif  // GTEST_OS_WINDOWS
        -: 3246:  }
        -: 3247:
        2: 3248:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
        1: 3248-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        2: 3249:         String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
        1: 3249-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
       3*: 3250:         String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3250-block  0
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3250-block  1
        1: 3250-block  2
        2: 3251:         String::CStringEquals(gtest_color, "1");
        1: 3251-block  0
call    0 returned 1
        1: 3251-block  1
        -: 3252:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 3253:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 3254:  // be conservative.
        1: 3255:}
        1: 3255-block  0
call    0 returned 1
    $$$$$: 3255-block  1
call    1 never executed
        -: 3256:
        -: 3257:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 3258:// cannot simply emit special characters and have the terminal change colors.
        -: 3259:// This routine must actually emit the characters rather than return a string
        -: 3260:// that would be colored when printed, as can be done on Linux.
        -: 3261:
        -: 3262:GTEST_ATTRIBUTE_PRINTF_(2, 3)
function _ZN7testing8internalL13ColoredPrintfENS0_12_GLOBAL__N_110GTestColorEPKcz called 10 returned 100% blocks executed 58%
       10: 3263:static void ColoredPrintf(GTestColor color, const char* fmt, ...) {
        -: 3264:  va_list args;
       10: 3265:  va_start(args, fmt);
        -: 3266:
        -: 3267:  static const bool in_color_mode =
        -: 3268:#if GTEST_HAS_FILE_SYSTEM
       10: 3269:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
       10: 3269-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 9
        1: 3269-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 3269-block  2
call    5 returned 1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 3269-block  3
call   10 returned 1
    $$$$$: 3269-block  4
branch 11 never executed
branch 12 never executed
    $$$$$: 3269-block  5
call   13 never executed
        -: 3270:#else
        -: 3271:      false;
        -: 3272:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 3273:
      10*: 3274:  const bool use_color = in_color_mode && (color != GTestColor::kDefault);
       10: 3274-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    %%%%%: 3274-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3274-block  2
       10: 3274-block  3
        -: 3275:
       10: 3276:  if (!use_color) {
       10: 3276-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 3277:    vprintf(fmt, args);
       10: 3277-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 3278:    va_end(args);
       10: 3279:    return;
       10: 3279-block  0
        -: 3280:  }
        -: 3281:
        -: 3282:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \
        -: 3283:    !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3284:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 3285:
        -: 3286:  // Gets the current text color.
        -: 3287:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 3288:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 3289:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 3290:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 3291:
        -: 3292:  // We need to flush the stream buffers into the console before each
        -: 3293:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 3294:  // printed but has not yet reached the console.
        -: 3295:  fflush(stdout);
        -: 3296:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 3297:
        -: 3298:  vprintf(fmt, args);
        -: 3299:
        -: 3300:  fflush(stdout);
        -: 3301:  // Restores the text color.
        -: 3302:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 3303:#else
    #####: 3304:  printf("\033[0;3%sm", GetAnsiColorCode(color));
    %%%%%: 3304-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3305:  vprintf(fmt, args);
    %%%%%: 3305-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3306:  printf("\033[m");  // Resets the terminal to default.
    %%%%%: 3306-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3307:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
    #####: 3308:  va_end(args);
    %%%%%: 3308-block  0
        -: 3309:}
        -: 3310:
        -: 3311:// Text printed in Google Test's text output and --gtest_list_tests
        -: 3312:// output to label the type parameter and value parameter for a test.
        -: 3313:static const char kTypeParamLabel[] = "TypeParam";
        -: 3314:static const char kValueParamLabel[] = "GetParam()";
        -: 3315:
function _ZN7testing8internalL29PrintFullTestCommentIfPresentERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3316:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
    #####: 3317:  const char* const type_param = test_info.type_param();
    %%%%%: 3317-block  0
call    0 never executed
    #####: 3318:  const char* const value_param = test_info.value_param();
call    0 never executed
        -: 3319:
    #####: 3320:  if (type_param != nullptr || value_param != nullptr) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3320-block  0
branch  2 never executed
branch  3 never executed
    #####: 3321:    printf(", where ");
    %%%%%: 3321-block  0
call    0 never executed
    #####: 3322:    if (type_param != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 3323:      printf("%s = %s", kTypeParamLabel, type_param);
    %%%%%: 3323-block  0
call    0 never executed
    #####: 3324:      if (value_param != nullptr) printf(" and ");
branch  0 never executed
branch  1 never executed
    %%%%%: 3324-block  0
call    2 never executed
        -: 3325:    }
    #####: 3326:    if (value_param != nullptr) {
    %%%%%: 3326-block  0
branch  0 never executed
branch  1 never executed
    #####: 3327:      printf("%s = %s", kValueParamLabel, value_param);
    %%%%%: 3327-block  0
call    0 never executed
        -: 3328:    }
        -: 3329:  }
    #####: 3330:}
        -: 3331:
        -: 3332:// This class implements the TestEventListener interface.
        -: 3333://
        -: 3334:// Class PrettyUnitTestResultPrinter is copyable.
        -: 3335:class PrettyUnitTestResultPrinter : public TestEventListener {
        -: 3336: public:
function _ZN7testing8internal27PrettyUnitTestResultPrinterC2Ev called 2 returned 100% blocks executed 100%
        2: 3337:  PrettyUnitTestResultPrinter() {}
        2: 3337-block  0
call    0 returned 2
function _ZN7testing8internal27PrettyUnitTestResultPrinter13PrintTestNameEPKcS3_ called 2 returned 100% blocks executed 100%
        2: 3338:  static void PrintTestName(const char* test_suite, const char* test) {
        2: 3339:    printf("%s.%s", test_suite, test);
        2: 3339-block  0
call    0 returned 2
        2: 3340:  }
        -: 3341:
        -: 3342:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3343:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
        -: 3344:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3345:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3346:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3347:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3348:  void OnTestCaseStart(const TestCase& test_case) override;
        -: 3349:#else
        -: 3350:  void OnTestSuiteStart(const TestSuite& test_suite) override;
        -: 3351:#endif  // OnTestCaseStart
        -: 3352:
        -: 3353:  void OnTestStart(const TestInfo& test_info) override;
        -: 3354:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3355:
        -: 3356:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3357:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3358:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3359:  void OnTestCaseEnd(const TestCase& test_case) override;
        -: 3360:#else
        -: 3361:  void OnTestSuiteEnd(const TestSuite& test_suite) override;
        -: 3362:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3363:
        -: 3364:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3365:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3366:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3367:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3368:
        -: 3369: private:
        -: 3370:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 3371:  static void PrintFailedTestSuites(const UnitTest& unit_test);
        -: 3372:  static void PrintSkippedTests(const UnitTest& unit_test);
        -: 3373:};
        -: 3374:
        -: 3375:// Fired before each iteration of tests starts.
function _ZN7testing8internal27PrettyUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 62%
        1: 3376:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        -: 3377:    const UnitTest& unit_test, int iteration) {
        1: 3378:  if (GTEST_FLAG_GET(repeat) != 1)
        1: 3378-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3379:    printf("\nRepeating all tests (iteration %d) . . .\n\n", iteration + 1);
    %%%%%: 3379-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3380:
        1: 3381:  std::string f = GTEST_FLAG_GET(filter);
        1: 3381-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3382:  const char* const filter = f.c_str();
        1: 3382-block  0
call    0 returned 1
        -: 3383:
        -: 3384:  // Prints the filter if it's not *.  This reminds the user that some
        -: 3385:  // tests may be skipped.
        1: 3386:  if (!String::CStringEquals(filter, kUniversalFilter)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 3387:    ColoredPrintf(GTestColor::kYellow, "Note: %s filter = %s\n", GTEST_NAME_,
        1: 3387-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3388:                  filter);
        -: 3389:  }
        -: 3390:
        1: 3391:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
        1: 3391-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3391-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 3392:    const int32_t shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    %%%%%: 3392-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3393:    ColoredPrintf(GTestColor::kYellow, "Note: This is test shard %d of %s.\n",
    %%%%%: 3393-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3394:                  static_cast<int>(shard_index) + 1,
        -: 3395:                  internal::posix::GetEnv(kTestTotalShards));
        -: 3396:  }
        -: 3397:
        1: 3398:  if (GTEST_FLAG_GET(shuffle)) {
        1: 3398-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3399:    ColoredPrintf(GTestColor::kYellow,
    %%%%%: 3399-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3400:                  "Note: Randomizing tests' orders with a seed of %d .\n",
        -: 3401:                  unit_test.random_seed());
        -: 3402:  }
        -: 3403:
        1: 3404:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3404-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2: 3405:  printf("Running %s from %s.\n",
        1: 3405-block  0
call    0 returned 1
        1: 3405-block  1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3406:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3406-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3406-block  1
call    6 returned 1
    $$$$$: 3406-block  2
call    7 never executed
    $$$$$: 3406-block  3
        2: 3407:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
        1: 3407-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3407-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$: 3407-block  2
call    7 never executed
    $$$$$: 3407-block  3
        1: 3408:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3409:}
        1: 3409-block  0
call    0 returned 1
    $$$$$: 3409-block  1
call    1 never executed
        -: 3410:
function _ZN7testing8internal27PrettyUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3411:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        -: 3412:    const UnitTest& /*unit_test*/) {
        1: 3413:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3413-block  0
call    0 returned 1
        1: 3414:  printf("Global test environment set-up.\n");
call    0 returned 1
        1: 3415:  fflush(stdout);
call    0 returned 1
        1: 3416:}
        -: 3417:
        -: 3418:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 76%
        1: 3419:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
        -: 3420:  const std::string counts =
        1: 3421:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        1: 3421-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3421-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3422:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3422-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3423:  printf("%s from %s", counts.c_str(), test_case.name());
        1: 3423-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3424:  if (test_case.type_param() == nullptr) {
        1: 3424-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 3425:    printf("\n");
        1: 3425-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3426:  } else {
    #####: 3427:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    %%%%%: 3427-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3428:  }
        1: 3429:  fflush(stdout);
        1: 3429-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3430:}
        1: 3430-block  0
call    0 returned 1
    $$$$$: 3430-block  1
call    1 never executed
        -: 3431:#else
        -: 3432:void PrettyUnitTestResultPrinter::OnTestSuiteStart(
        -: 3433:    const TestSuite& test_suite) {
        -: 3434:  const std::string counts =
        -: 3435:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3436:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3437:  printf("%s from %s", counts.c_str(), test_suite.name());
        -: 3438:  if (test_suite.type_param() == nullptr) {
        -: 3439:    printf("\n");
        -: 3440:  } else {
        -: 3441:    printf(", where %s = %s\n", kTypeParamLabel, test_suite.type_param());
        -: 3442:  }
        -: 3443:  fflush(stdout);
        -: 3444:}
        -: 3445:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3446:
function _ZN7testing8internal27PrettyUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 1 returned 100% blocks executed 100%
        1: 3447:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
        1: 3448:  ColoredPrintf(GTestColor::kGreen, "[ RUN      ] ");
        1: 3448-block  0
call    0 returned 1
        1: 3449:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1: 3450:  printf("\n");
call    0 returned 1
        1: 3451:  fflush(stdout);
call    0 returned 1
        1: 3452:}
        -: 3453:
function _ZN7testing8internal27PrettyUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3454:void PrettyUnitTestResultPrinter::OnTestDisabled(const TestInfo& test_info) {
    #####: 3455:  ColoredPrintf(GTestColor::kYellow, "[ DISABLED ] ");
    %%%%%: 3455-block  0
call    0 never executed
    #####: 3456:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3457:  printf("\n");
call    0 never executed
    #####: 3458:  fflush(stdout);
call    0 never executed
    #####: 3459:}
        -: 3460:
        -: 3461:// Called after an assertion failure.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3462:void PrettyUnitTestResultPrinter::OnTestPartResult(
        -: 3463:    const TestPartResult& result) {
    #####: 3464:  switch (result.type()) {
    %%%%%: 3464-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3465:    // If the test part succeeded, we don't need to do anything.
    #####: 3466:    case TestPartResult::kSuccess:
    #####: 3467:      return;
    %%%%%: 3467-block  0
    #####: 3468:    default:
        -: 3469:      // Print failure message from the assertion
        -: 3470:      // (e.g. expected this and got that).
    #####: 3471:      PrintTestPartResult(result);
    %%%%%: 3471-block  0
call    0 never executed
    #####: 3472:      fflush(stdout);
call    0 never executed
        -: 3473:  }
        -: 3474:}
        -: 3475:
function _ZN7testing8internal27PrettyUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 1 returned 100% blocks executed 68%
        1: 3476:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
        1: 3477:  if (test_info.result()->Passed()) {
        1: 3477-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 3478:    ColoredPrintf(GTestColor::kGreen, "[       OK ] ");
        1: 3478-block  0
call    0 returned 1
    #####: 3479:  } else if (test_info.result()->Skipped()) {
    %%%%%: 3479-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3480:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3480-block  0
call    0 never executed
        -: 3481:  } else {
    #####: 3482:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3482-block  0
call    0 never executed
        -: 3483:  }
        1: 3484:  PrintTestName(test_info.test_suite_name(), test_info.name());
        1: 3484-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
       1*: 3485:  if (test_info.result()->Failed()) PrintFullTestCommentIfPresent(test_info);
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 3485-block  0
call    4 never executed
        -: 3486:
        1: 3487:  if (GTEST_FLAG_GET(print_time)) {
        1: 3487-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3488:    printf(" (%s ms)\n",
        1: 3488-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2: 3489:           internal::StreamableToString(test_info.result()->elapsed_time())
        1: 3489-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3489-block  1
call    5 returned 1
    $$$$$: 3489-block  2
call    6 never executed
    $$$$$: 3489-block  3
        -: 3490:               .c_str());
        -: 3491:  } else {
    #####: 3492:    printf("\n");
    %%%%%: 3492-block  0
call    0 never executed
        -: 3493:  }
        1: 3494:  fflush(stdout);
        1: 3494-block  0
call    0 returned 1
        1: 3495:}
        -: 3496:
        -: 3497:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 70%
        1: 3498:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
       1*: 3499:  if (!GTEST_FLAG_GET(print_time)) return;
        1: 3499-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3499-block  1
        -: 3500:
        -: 3501:  const std::string counts =
        1: 3502:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        1: 3502-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3502-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3503:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3503-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3504:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_case.name(),
        1: 3504-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        2: 3505:         internal::StreamableToString(test_case.elapsed_time()).c_str());
        1: 3505-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3505-block  1
call    4 returned 1
    $$$$$: 3505-block  2
call    5 never executed
    $$$$$: 3505-block  3
    $$$$$: 3505-block  4
        1: 3506:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3507:}
        1: 3507-block  0
call    0 returned 1
    $$$$$: 3507-block  1
call    1 never executed
        -: 3508:#else
        -: 3509:void PrettyUnitTestResultPrinter::OnTestSuiteEnd(const TestSuite& test_suite) {
        -: 3510:  if (!GTEST_FLAG_GET(print_time)) return;
        -: 3511:
        -: 3512:  const std::string counts =
        -: 3513:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3514:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3515:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_suite.name(),
        -: 3516:         internal::StreamableToString(test_suite.elapsed_time()).c_str());
        -: 3517:  fflush(stdout);
        -: 3518:}
        -: 3519:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3520:
function _ZN7testing8internal27PrettyUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3521:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        -: 3522:    const UnitTest& /*unit_test*/) {
        1: 3523:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3523-block  0
call    0 returned 1
        1: 3524:  printf("Global test environment tear-down\n");
call    0 returned 1
        1: 3525:  fflush(stdout);
call    0 returned 1
        1: 3526:}
        -: 3527:
        -: 3528:// Internal helper for printing the list of failed tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16PrintFailedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3529:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
    #####: 3530:  const int failed_test_count = unit_test.failed_test_count();
    %%%%%: 3530-block  0
call    0 never executed
    #####: 3531:  ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
call    0 never executed
    #####: 3532:  printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3532-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3532-block  1
call    7 never executed
    $$$$$: 3532-block  2
call    8 never executed
        -: 3533:
    #####: 3534:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3534-block  0
    %%%%%: 3534-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3535:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3535-block  0
call    0 never executed
    #####: 3536:    if (!test_suite.should_run() || (test_suite.failed_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3536-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3536-block  1
    %%%%%: 3536-block  2
    %%%%%: 3536-block  3
branch  6 never executed
branch  7 never executed
    #####: 3537:      continue;
    %%%%%: 3537-block  0
        -: 3538:    }
    #####: 3539:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3539-block  0
    %%%%%: 3539-block  1
    %%%%%: 3539-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3540:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3540-block  0
call    0 never executed
    #####: 3541:      if (!test_info.should_run() || !test_info.result()->Failed()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3541-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3541-block  1
    %%%%%: 3541-block  2
    %%%%%: 3541-block  3
branch  7 never executed
branch  8 never executed
    #####: 3542:        continue;
    %%%%%: 3542-block  0
        -: 3543:      }
    #####: 3544:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3544-block  0
call    0 never executed
    #####: 3545:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3546:      PrintFullTestCommentIfPresent(test_info);
call    0 never executed
    #####: 3547:      printf("\n");
call    0 never executed
        -: 3548:    }
        -: 3549:  }
    #####: 3550:  printf("\n%2d FAILED %s\n", failed_test_count,
    %%%%%: 3550-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3550-block  1
    %%%%%: 3550-block  2
    %%%%%: 3550-block  3
call    2 never executed
        -: 3551:         failed_test_count == 1 ? "TEST" : "TESTS");
    #####: 3552:}
        -: 3553:
        -: 3554:// Internal helper for printing the list of test suite failures not covered by
        -: 3555:// PrintFailedTests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter21PrintFailedTestSuitesERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3556:void PrettyUnitTestResultPrinter::PrintFailedTestSuites(
        -: 3557:    const UnitTest& unit_test) {
    #####: 3558:  int suite_failure_count = 0;
    #####: 3559:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3559-block  0
    %%%%%: 3559-block  1
    %%%%%: 3559-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3560:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3560-block  0
call    0 never executed
    #####: 3561:    if (!test_suite.should_run()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3562:      continue;
    %%%%%: 3562-block  0
        -: 3563:    }
    #####: 3564:    if (test_suite.ad_hoc_test_result().Failed()) {
    %%%%%: 3564-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3565:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3565-block  0
call    0 never executed
    #####: 3566:      printf("%s: SetUpTestSuite or TearDownTestSuite\n", test_suite.name());
call    0 never executed
call    1 never executed
    #####: 3567:      ++suite_failure_count;
        -: 3568:    }
        -: 3569:  }
    #####: 3570:  if (suite_failure_count > 0) {
    %%%%%: 3570-block  0
branch  0 never executed
branch  1 never executed
    #####: 3571:    printf("\n%2d FAILED TEST %s\n", suite_failure_count,
    %%%%%: 3571-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3571-block  1
    %%%%%: 3571-block  2
    %%%%%: 3571-block  3
call    2 never executed
        -: 3572:           suite_failure_count == 1 ? "SUITE" : "SUITES");
        -: 3573:  }
    #####: 3574:}
        -: 3575:
        -: 3576:// Internal helper for printing the list of skipped tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter17PrintSkippedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3577:void PrettyUnitTestResultPrinter::PrintSkippedTests(const UnitTest& unit_test) {
    #####: 3578:  const int skipped_test_count = unit_test.skipped_test_count();
    %%%%%: 3578-block  0
call    0 never executed
    #####: 3579:  if (skipped_test_count == 0) {
branch  0 never executed
branch  1 never executed
    #####: 3580:    return;
    %%%%%: 3580-block  0
        -: 3581:  }
        -: 3582:
    #####: 3583:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3583-block  0
    %%%%%: 3583-block  1
    %%%%%: 3583-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3584:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3584-block  0
call    0 never executed
    #####: 3585:    if (!test_suite.should_run() || (test_suite.skipped_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3585-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3585-block  1
    %%%%%: 3585-block  2
    %%%%%: 3585-block  3
branch  6 never executed
branch  7 never executed
    #####: 3586:      continue;
    %%%%%: 3586-block  0
        -: 3587:    }
    #####: 3588:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3588-block  0
    %%%%%: 3588-block  1
    %%%%%: 3588-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3589:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3589-block  0
call    0 never executed
    #####: 3590:      if (!test_info.should_run() || !test_info.result()->Skipped()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3590-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3590-block  1
    %%%%%: 3590-block  2
    %%%%%: 3590-block  3
branch  7 never executed
branch  8 never executed
    #####: 3591:        continue;
    %%%%%: 3591-block  0
        -: 3592:      }
    #####: 3593:      ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3593-block  0
call    0 never executed
    #####: 3594:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3595:      printf("\n");
call    0 never executed
        -: 3596:    }
        -: 3597:  }
        -: 3598:}
        -: 3599:
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 52%
        1: 3600:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3601:                                                     int /*iteration*/) {
        1: 3602:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3602-block  0
call    0 returned 1
        2: 3603:  printf("%s from %s ran.",
        1: 3603-block  0
call    0 returned 1
        1: 3603-block  1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3604:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3604-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3604-block  1
call    6 returned 1
    $$$$$: 3604-block  2
call    7 never executed
    $$$$$: 3604-block  3
        2: 3605:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3605-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$: 3605-block  1
call    7 never executed
    $$$$$: 3605-block  2
call    8 never executed
        1: 3606:  if (GTEST_FLAG_GET(print_time)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3607:    printf(" (%s ms total)",
        1: 3607-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2: 3608:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
        1: 3608-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3608-block  1
call    4 returned 1
    $$$$$: 3608-block  2
call    5 never executed
    $$$$$: 3608-block  3
    $$$$$: 3608-block  4
call    6 never executed
        -: 3609:  }
        1: 3610:  printf("\n");
        1: 3610-block  0
call    0 returned 1
        1: 3611:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 returned 1
        1: 3612:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3612-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3612-block  1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 3612-block  2
call   10 returned 1
    $$$$$: 3612-block  3
call   11 never executed
    $$$$$: 3612-block  4
call   12 never executed
        -: 3613:
        1: 3614:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 returned 1
        1: 3615:  if (skipped_test_count > 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3616:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3616-block  0
call    0 never executed
    #####: 3617:    printf("%s, listed below:\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3617-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3617-block  1
call    7 never executed
    $$$$$: 3617-block  2
call    8 never executed
    #####: 3618:    PrintSkippedTests(unit_test);
call    0 never executed
        -: 3619:  }
        -: 3620:
        1: 3621:  if (!unit_test.Passed()) {
        1: 3621-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3622:    PrintFailedTests(unit_test);
    %%%%%: 3622-block  0
call    0 never executed
    #####: 3623:    PrintFailedTestSuites(unit_test);
call    0 never executed
        -: 3624:  }
        -: 3625:
        1: 3626:  int num_disabled = unit_test.reportable_disabled_test_count();
        1: 3626-block  0
call    0 returned 1
       1*: 3627:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3627-block  0
branch  2 never executed
branch  3 never executed
    #####: 3628:    if (unit_test.Passed()) {
    %%%%%: 3628-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3629:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3629-block  0
call    0 never executed
        -: 3630:    }
    #####: 3631:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3631-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3631-block  1
    %%%%%: 3631-block  2
    %%%%%: 3631-block  3
call    2 never executed
        -: 3632:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3633:  }
        -: 3634:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
        1: 3635:  fflush(stdout);
        1: 3635-block  0
call    0 returned 1
        1: 3636:}
        -: 3637:
        -: 3638:// End PrettyUnitTestResultPrinter
        -: 3639:
        -: 3640:// This class implements the TestEventListener interface.
        -: 3641://
        -: 3642:// Class BriefUnitTestResultPrinter is copyable.
        -: 3643:class BriefUnitTestResultPrinter : public TestEventListener {
        -: 3644: public:
function _ZN7testing8internal26BriefUnitTestResultPrinterC2Ev called 0 returned 0% blocks executed 0%
    #####: 3645:  BriefUnitTestResultPrinter() {}
    %%%%%: 3645-block  0
call    0 never executed
function _ZN7testing8internal26BriefUnitTestResultPrinter13PrintTestNameEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 3646:  static void PrintTestName(const char* test_suite, const char* test) {
    #####: 3647:    printf("%s.%s", test_suite, test);
    %%%%%: 3647-block  0
call    0 never executed
    #####: 3648:  }
        -: 3649:
        -: 3650:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3651:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3652:  void OnTestIterationStart(const UnitTest& /*unit_test*/,
    #####: 3653:                            int /*iteration*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3654:  void OnEnvironmentsSetUpStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3655:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3656:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3657:  void OnTestCaseStart(const TestCase& /*test_case*/) override {}
        -: 3658:#else
        -: 3659:  void OnTestSuiteStart(const TestSuite& /*test_suite*/) override {}
        -: 3660:#endif  // OnTestCaseStart
        -: 3661:
function _ZN7testing8internal26BriefUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3662:  void OnTestStart(const TestInfo& /*test_info*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3663:  void OnTestDisabled(const TestInfo& /*test_info*/) override {}
        -: 3664:
        -: 3665:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3666:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3667:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3668:  void OnTestCaseEnd(const TestCase& /*test_case*/) override {}
        -: 3669:#else
        -: 3670:  void OnTestSuiteEnd(const TestSuite& /*test_suite*/) override {}
        -: 3671:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3672:
function _ZN7testing8internal26BriefUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3673:  void OnEnvironmentsTearDownStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3674:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3675:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3676:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3677:};
        -: 3678:
        -: 3679:// Called after an assertion failure.
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3680:void BriefUnitTestResultPrinter::OnTestPartResult(
        -: 3681:    const TestPartResult& result) {
    #####: 3682:  switch (result.type()) {
    %%%%%: 3682-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3683:    // If the test part succeeded, we don't need to do anything.
    #####: 3684:    case TestPartResult::kSuccess:
    #####: 3685:      return;
    %%%%%: 3685-block  0
    #####: 3686:    default:
        -: 3687:      // Print failure message from the assertion
        -: 3688:      // (e.g. expected this and got that).
    #####: 3689:      PrintTestPartResult(result);
    %%%%%: 3689-block  0
call    0 never executed
    #####: 3690:      fflush(stdout);
call    0 never executed
        -: 3691:  }
        -: 3692:}
        -: 3693:
function _ZN7testing8internal26BriefUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3694:void BriefUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
    #####: 3695:  if (test_info.result()->Failed()) {
    %%%%%: 3695-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3696:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3696-block  0
call    0 never executed
    #####: 3697:    PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3698:    PrintFullTestCommentIfPresent(test_info);
call    0 never executed
        -: 3699:
    #####: 3700:    if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed
branch  1 never executed
    #####: 3701:      printf(" (%s ms)\n",
    %%%%%: 3701-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3702:             internal::StreamableToString(test_info.result()->elapsed_time())
    %%%%%: 3702-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3702-block  1
call    5 never executed
    $$$$$: 3702-block  2
call    6 never executed
    $$$$$: 3702-block  3
        -: 3703:                 .c_str());
        -: 3704:    } else {
    #####: 3705:      printf("\n");
    %%%%%: 3705-block  0
call    0 never executed
        -: 3706:    }
    #####: 3707:    fflush(stdout);
    %%%%%: 3707-block  0
call    0 never executed
        -: 3708:  }
    #####: 3709:}
    %%%%%: 3709-block  0
        -: 3710:
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3711:void BriefUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3712:                                                    int /*iteration*/) {
    #####: 3713:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
    %%%%%: 3713-block  0
call    0 never executed
    #####: 3714:  printf("%s from %s ran.",
    %%%%%: 3714-block  0
call    0 never executed
    %%%%%: 3714-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3715:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3715-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3715-block  1
call    6 never executed
    $$$$$: 3715-block  2
call    7 never executed
    $$$$$: 3715-block  3
    #####: 3716:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3716-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 3716-block  1
call    7 never executed
    $$$$$: 3716-block  2
call    8 never executed
    #####: 3717:  if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed
branch  1 never executed
    #####: 3718:    printf(" (%s ms total)",
    %%%%%: 3718-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3719:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
    %%%%%: 3719-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3719-block  1
call    4 never executed
    $$$$$: 3719-block  2
call    5 never executed
    $$$$$: 3719-block  3
    $$$$$: 3719-block  4
call    6 never executed
        -: 3720:  }
    #####: 3721:  printf("\n");
    %%%%%: 3721-block  0
call    0 never executed
    #####: 3722:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 never executed
    #####: 3723:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3723-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3723-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 3723-block  2
call   10 never executed
    $$$$$: 3723-block  3
call   11 never executed
    $$$$$: 3723-block  4
call   12 never executed
        -: 3724:
    #####: 3725:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 never executed
    #####: 3726:  if (skipped_test_count > 0) {
branch  0 never executed
branch  1 never executed
    #####: 3727:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3727-block  0
call    0 never executed
    #####: 3728:    printf("%s.\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3728-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3728-block  1
call    7 never executed
    $$$$$: 3728-block  2
call    8 never executed
        -: 3729:  }
        -: 3730:
    #####: 3731:  int num_disabled = unit_test.reportable_disabled_test_count();
    %%%%%: 3731-block  0
call    0 never executed
    #####: 3732:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3732-block  0
branch  2 never executed
branch  3 never executed
    #####: 3733:    if (unit_test.Passed()) {
    %%%%%: 3733-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3734:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3734-block  0
call    0 never executed
        -: 3735:    }
    #####: 3736:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3736-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3736-block  1
    %%%%%: 3736-block  2
    %%%%%: 3736-block  3
call    2 never executed
        -: 3737:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3738:  }
        -: 3739:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
    #####: 3740:  fflush(stdout);
    %%%%%: 3740-block  0
call    0 never executed
    #####: 3741:}
        -: 3742:
        -: 3743:// End BriefUnitTestResultPrinter
        -: 3744:
        -: 3745:// class TestEventRepeater
        -: 3746://
        -: 3747:// This class forwards events to other event listeners.
        -: 3748:class TestEventRepeater : public TestEventListener {
        -: 3749: public:
function _ZN7testing8internal17TestEventRepeaterC2Ev called 2 returned 100% blocks executed 100%
        2: 3750:  TestEventRepeater() : forwarding_enabled_(true) {}
        2: 3750-block  0
call    0 returned 2
call    1 returned 2
        -: 3751:  ~TestEventRepeater() override;
        -: 3752:  void Append(TestEventListener* listener);
        -: 3753:  TestEventListener* Release(TestEventListener* listener);
        -: 3754:
        -: 3755:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3756:  // in death test child processes.
function _ZNK7testing8internal17TestEventRepeater18forwarding_enabledEv called 0 returned 0% blocks executed 0%
    #####: 3757:  bool forwarding_enabled() const { return forwarding_enabled_; }
    %%%%%: 3757-block  0
function _ZN7testing8internal17TestEventRepeater22set_forwarding_enabledEb called 0 returned 0% blocks executed 0%
    #####: 3758:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
        -: 3759:
        -: 3760:  void OnTestProgramStart(const UnitTest& unit_test) override;
        -: 3761:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3762:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
        -: 3763:  void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) override;
        -: 3764://  Legacy API is deprecated but still available
        -: 3765:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3766:  void OnTestCaseStart(const TestSuite& parameter) override;
        -: 3767:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3768:  void OnTestSuiteStart(const TestSuite& parameter) override;
        -: 3769:  void OnTestStart(const TestInfo& test_info) override;
        -: 3770:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3771:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3772:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3773://  Legacy API is deprecated but still available
        -: 3774:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3775:  void OnTestCaseEnd(const TestCase& parameter) override;
        -: 3776:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3777:  void OnTestSuiteEnd(const TestSuite& parameter) override;
        -: 3778:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
        -: 3779:  void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) override;
        -: 3780:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3781:  void OnTestProgramEnd(const UnitTest& unit_test) override;
        -: 3782:
        -: 3783: private:
        -: 3784:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3785:  // in death test child processes.
        -: 3786:  bool forwarding_enabled_;
        -: 3787:  // The list of listeners that receive events.
        -: 3788:  std::vector<TestEventListener*> listeners_;
        -: 3789:
        -: 3790:  TestEventRepeater(const TestEventRepeater&) = delete;
        -: 3791:  TestEventRepeater& operator=(const TestEventRepeater&) = delete;
        -: 3792:};
        -: 3793:
        4: 3794:TestEventRepeater::~TestEventRepeater() {
        2: 3795:  ForEach(listeners_, Delete<TestEventListener>);
        4: 3796:}
------------------
_ZN7testing8internal17TestEventRepeaterD0Ev:
function _ZN7testing8internal17TestEventRepeaterD0Ev called 2 returned 100% blocks executed 100%
        2: 3794:TestEventRepeater::~TestEventRepeater() {
        -: 3795:  ForEach(listeners_, Delete<TestEventListener>);
        2: 3796:}
        2: 3796-block  0
call    0 returned 2
call    1 returned 2
------------------
_ZN7testing8internal17TestEventRepeaterD2Ev:
function _ZN7testing8internal17TestEventRepeaterD2Ev called 2 returned 100% blocks executed 100%
        2: 3794:TestEventRepeater::~TestEventRepeater() {
        2: 3795:  ForEach(listeners_, Delete<TestEventListener>);
        2: 3795-block  0
call    0 returned 2
        2: 3796:}
call    0 returned 2
call    1 returned 2
------------------
        -: 3797:
function _ZN7testing8internal17TestEventRepeater6AppendEPNS_17TestEventListenerE called 2 returned 100% blocks executed 100%
        2: 3798:void TestEventRepeater::Append(TestEventListener* listener) {
        2: 3799:  listeners_.push_back(listener);
        2: 3799-block  0
call    0 returned 2
        2: 3800:}
        -: 3801:
function _ZN7testing8internal17TestEventRepeater7ReleaseEPNS_17TestEventListenerE called 2 returned 100% blocks executed 38%
        2: 3802:TestEventListener* TestEventRepeater::Release(TestEventListener* listener) {
       2*: 3803:  for (size_t i = 0; i < listeners_.size(); ++i) {
        2: 3803-block  0
    %%%%%: 3803-block  1
        2: 3803-block  2
call    0 returned 2
branch  1 taken 0
branch  2 taken 2 (fallthrough)
    #####: 3804:    if (listeners_[i] == listener) {
    %%%%%: 3804-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3805:      listeners_.erase(listeners_.begin() + static_cast<int>(i));
    %%%%%: 3805-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3805-block  1
    $$$$$: 3805-block  2
    #####: 3806:      return listener;
    %%%%%: 3806-block  0
        -: 3807:    }
        -: 3808:  }
        -: 3809:
        2: 3810:  return nullptr;
        2: 3810-block  0
        -: 3811:}
        -: 3812:
        -: 3813:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 3814:// This defines a member that forwards the call to all listeners.
        -: 3815:#define GTEST_REPEATER_METHOD_(Name, Type)              \
        -: 3816:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3817:    if (forwarding_enabled_) {                          \
        -: 3818:      for (size_t i = 0; i < listeners_.size(); i++) {  \
        -: 3819:        listeners_[i]->Name(parameter);                 \
        -: 3820:      }                                                 \
        -: 3821:    }                                                   \
        -: 3822:  }
        -: 3823:// This defines a member that forwards the call to all listeners in reverse
        -: 3824:// order.
        -: 3825:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type)      \
        -: 3826:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3827:    if (forwarding_enabled_) {                          \
        -: 3828:      for (size_t i = listeners_.size(); i != 0; i--) { \
        -: 3829:        listeners_[i - 1]->Name(parameter);             \
        -: 3830:      }                                                 \
        -: 3831:    }                                                   \
        -: 3832:  }
        -: 3833:
function _ZN7testing8internal17TestEventRepeater18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3834:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
        1: 3834-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3834-block  1
        1: 3834-block  2
call    2 returned 1
call    3 returned 1
        2: 3834-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3835:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
        1: 3835-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3835-block  1
        1: 3835-block  2
call    2 returned 1
call    3 returned 1
        2: 3835-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3836://  Legacy API is deprecated but still available
        -: 3837:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater15OnTestCaseStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3838:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestSuite)
        1: 3838-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3838-block  1
        1: 3838-block  2
call    2 returned 1
call    3 returned 1
        2: 3838-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3839:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater16OnTestSuiteStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3840:GTEST_REPEATER_METHOD_(OnTestSuiteStart, TestSuite)
        1: 3840-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3840-block  1
        1: 3840-block  2
call    2 returned 1
call    3 returned 1
        2: 3840-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater11OnTestStartERKNS_8TestInfoE called 1 returned 100% blocks executed 100%
        2: 3841:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
        1: 3841-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3841-block  1
        1: 3841-block  2
call    2 returned 1
call    3 returned 1
        2: 3841-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3842:GTEST_REPEATER_METHOD_(OnTestDisabled, TestInfo)
    %%%%%: 3842-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3842-block  1
    %%%%%: 3842-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3842-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
function _ZN7testing8internal17TestEventRepeater16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3843:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
    %%%%%: 3843-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3843-block  1
    %%%%%: 3843-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3843-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
function _ZN7testing8internal17TestEventRepeater27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3844:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
        1: 3844-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3844-block  1
        1: 3844-block  2
call    2 returned 1
call    3 returned 1
        2: 3844-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3845:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
        1: 3845-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3845-block  1
call    2 returned 1
        1: 3845-block  2
call    3 returned 1
call    4 returned 1
        2: 3845-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3846:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
        1: 3846-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3846-block  1
call    2 returned 1
        1: 3846-block  2
call    3 returned 1
call    4 returned 1
        2: 3846-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater9OnTestEndERKNS_8TestInfoE called 1 returned 100% blocks executed 100%
        2: 3847:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
        1: 3847-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3847-block  1
call    2 returned 1
        1: 3847-block  2
call    3 returned 1
call    4 returned 1
        2: 3847-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3848://  Legacy API is deprecated but still available
        -: 3849:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater13OnTestCaseEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3850:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestSuite)
        1: 3850-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3850-block  1
call    2 returned 1
        1: 3850-block  2
call    3 returned 1
call    4 returned 1
        2: 3850-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3851:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater14OnTestSuiteEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3852:GTEST_REVERSE_REPEATER_METHOD_(OnTestSuiteEnd, TestSuite)
        1: 3852-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3852-block  1
call    2 returned 1
        1: 3852-block  2
call    3 returned 1
call    4 returned 1
        2: 3852-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3853:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
        1: 3853-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3853-block  1
call    2 returned 1
        1: 3853-block  2
call    3 returned 1
call    4 returned 1
        2: 3853-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3854:
        -: 3855:#undef GTEST_REPEATER_METHOD_
        -: 3856:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 3857:
function _ZN7testing8internal17TestEventRepeater20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3858:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        -: 3859:                                             int iteration) {
        1: 3860:  if (forwarding_enabled_) {
        1: 3860-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3861:    for (size_t i = 0; i < listeners_.size(); i++) {
        1: 3861-block  0
        2: 3861-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 3862:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
        1: 3862-block  0
call    0 returned 1
call    1 returned 1
        -: 3863:    }
        -: 3864:  }
        1: 3865:}
        -: 3866:
function _ZN7testing8internal17TestEventRepeater18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3867:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3868:                                           int iteration) {
        1: 3869:  if (forwarding_enabled_) {
        1: 3869-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3870:    for (size_t i = listeners_.size(); i > 0; i--) {
        1: 3870-block  0
call    0 returned 1
        2: 3870-block  1
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 3871:      listeners_[i - 1]->OnTestIterationEnd(unit_test, iteration);
        1: 3871-block  0
call    0 returned 1
call    1 returned 1
        -: 3872:    }
        -: 3873:  }
        1: 3874:}
        -: 3875:
        -: 3876:// End TestEventRepeater
        -: 3877:
        -: 3878:#if GTEST_HAS_FILE_SYSTEM
        -: 3879:// This class generates an XML output file.
        -: 3880:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
        -: 3881: public:
        -: 3882:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 3883:
        -: 3884:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3885:  void ListTestsMatchingFilter(const std::vector<TestSuite*>& test_suites);
        -: 3886:
        -: 3887:  // Prints an XML summary of all unit tests.
        -: 3888:  static void PrintXmlTestsList(std::ostream* stream,
        -: 3889:                                const std::vector<TestSuite*>& test_suites);
        -: 3890:
        -: 3891: private:
        -: 3892:  // Is c a whitespace character that is normalized to a space character
        -: 3893:  // when it appears in an XML attribute value?
function _ZN7testing8internal24XmlUnitTestResultPrinter24IsNormalizableWhitespaceEh called 0 returned 0% blocks executed 0%
    #####: 3894:  static bool IsNormalizableWhitespace(unsigned char c) {
    #####: 3895:    return c == '\t' || c == '\n' || c == '\r';
    %%%%%: 3895-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3895-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3895-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 3895-block  3
    %%%%%: 3895-block  4
    %%%%%: 3895-block  5
        -: 3896:  }
        -: 3897:
        -: 3898:  // May c appear in a well-formed XML document?
        -: 3899:  // https://www.w3.org/TR/REC-xml/#charsets
function _ZN7testing8internal24XmlUnitTestResultPrinter19IsValidXmlCharacterEh called 0 returned 0% blocks executed 0%
    #####: 3900:  static bool IsValidXmlCharacter(unsigned char c) {
    #####: 3901:    return IsNormalizableWhitespace(c) || c >= 0x20;
    %%%%%: 3901-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3901-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 3901-block  2
    %%%%%: 3901-block  3
    %%%%%: 3901-block  4
        -: 3902:  }
        -: 3903:
        -: 3904:  // Returns an XML-escaped copy of the input string str.  If
        -: 3905:  // is_attribute is true, the text is meant to appear as an attribute
        -: 3906:  // value, and normalizable whitespace is preserved by replacing it
        -: 3907:  // with character references.
        -: 3908:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 3909:
        -: 3910:  // Returns the given string with all characters invalid in XML removed.
        -: 3911:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 3912:
        -: 3913:  // Convenience wrapper around EscapeXml when str is an attribute value.
function _ZN7testing8internal24XmlUnitTestResultPrinter18EscapeXmlAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3914:  static std::string EscapeXmlAttribute(const std::string& str) {
    #####: 3915:    return EscapeXml(str, true);
    %%%%%: 3915-block  0
call    0 never executed
        -: 3916:  }
        -: 3917:
        -: 3918:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 3919:  static std::string EscapeXmlText(const char* str) {
        -: 3920:    return EscapeXml(str, false);
        -: 3921:  }
        -: 3922:
        -: 3923:  // Verifies that the given attribute belongs to the given element and
        -: 3924:  // streams the attribute as XML.
        -: 3925:  static void OutputXmlAttribute(std::ostream* stream,
        -: 3926:                                 const std::string& element_name,
        -: 3927:                                 const std::string& name,
        -: 3928:                                 const std::string& value);
        -: 3929:
        -: 3930:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 3931:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 3932:
        -: 3933:  // Streams a test suite XML stanza containing the given test result.
        -: 3934:  //
        -: 3935:  // Requires: result.Failed()
        -: 3936:  static void OutputXmlTestSuiteForTestResult(::std::ostream* stream,
        -: 3937:                                              const TestResult& result);
        -: 3938:
        -: 3939:  // Streams an XML representation of a TestResult object.
        -: 3940:  static void OutputXmlTestResult(::std::ostream* stream,
        -: 3941:                                  const TestResult& result);
        -: 3942:
        -: 3943:  // Streams an XML representation of a TestInfo object.
        -: 3944:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 3945:                                const char* test_suite_name,
        -: 3946:                                const TestInfo& test_info);
        -: 3947:
        -: 3948:  // Prints an XML representation of a TestSuite object
        -: 3949:  static void PrintXmlTestSuite(::std::ostream* stream,
        -: 3950:                                const TestSuite& test_suite);
        -: 3951:
        -: 3952:  // Prints an XML summary of unit_test to output stream out.
        -: 3953:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 3954:                               const UnitTest& unit_test);
        -: 3955:
        -: 3956:  // Produces a string representing the test properties in a result as space
        -: 3957:  // delimited XML attributes based on the property key="value" pairs.
        -: 3958:  // When the std::string is not empty, it includes a space at the beginning,
        -: 3959:  // to delimit this attribute from prior attributes.
        -: 3960:  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);
        -: 3961:
        -: 3962:  // Streams an XML representation of the test properties of a TestResult
        -: 3963:  // object.
        -: 3964:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 3965:                                      const TestResult& result);
        -: 3966:
        -: 3967:  // The output file.
        -: 3968:  const std::string output_file_;
        -: 3969:
        -: 3970:  XmlUnitTestResultPrinter(const XmlUnitTestResultPrinter&) = delete;
        -: 3971:  XmlUnitTestResultPrinter& operator=(const XmlUnitTestResultPrinter&) = delete;
        -: 3972:};
        -: 3973:
        -: 3974:// Creates a new XmlUnitTestResultPrinter.
function _ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 3975:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 3976:    : output_file_(output_file) {
    %%%%%: 3976-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3976-block  1
call    5 never executed
    $$$$$: 3976-block  2
call    6 never executed
    $$$$$: 3976-block  3
    #####: 3977:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3978:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 3978-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3978-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3978-block  2
call    7 never executed
    $$$$$: 3978-block  3
call    8 never executed
    $$$$$: 3978-block  4
        -: 3979:  }
    #####: 3980:}
    %%%%%: 3980-block  0
    $$$$$: 3980-block  1
call    0 never executed
    $$$$$: 3980-block  2
call    1 never executed
        -: 3981:
        -: 3982:// Called after the unit test ends.
function _ZN7testing8internal24XmlUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3983:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3984:                                                  int /*iteration*/) {
    #####: 3985:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 3985-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3986:  std::stringstream stream;
    %%%%%: 3986-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3987:  PrintXmlUnitTest(&stream, unit_test);
    %%%%%: 3987-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3988:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 3988-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3988-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3988-block  2
call    7 never executed
    $$$$$: 3988-block  3
call    8 never executed
    $$$$$: 3988-block  4
    #####: 3989:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3990:}
    %%%%%: 3990-block  0
call    0 never executed
    $$$$$: 3990-block  1
call    1 never executed
        -: 3991:
function _ZN7testing8internal24XmlUnitTestResultPrinter23ListTestsMatchingFilterERKSt6vectorIPNS_9TestSuiteESaIS4_EE called 0 returned 0% blocks executed 0%
    #####: 3992:void XmlUnitTestResultPrinter::ListTestsMatchingFilter(
        -: 3993:    const std::vector<TestSuite*>& test_suites) {
    #####: 3994:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 3994-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3995:  std::stringstream stream;
    %%%%%: 3995-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3996:  PrintXmlTestsList(&stream, test_suites);
    %%%%%: 3996-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3997:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 3997-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3997-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3997-block  2
call    7 never executed
    $$$$$: 3997-block  3
call    8 never executed
    $$$$$: 3997-block  4
    #####: 3998:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3999:}
    %%%%%: 3999-block  0
call    0 never executed
    $$$$$: 3999-block  1
call    1 never executed
        -: 4000:
        -: 4001:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 4002:// is true, the text is meant to appear as an attribute value, and
        -: 4003:// normalizable whitespace is preserved by replacing it with character
        -: 4004:// references.
        -: 4005://
        -: 4006:// Invalid XML characters in str, if any, are stripped from the output.
        -: 4007:// It is expected that most, if not all, of the text processed by this
        -: 4008:// module will consist of ordinary English text.
        -: 4009:// If this module is ever modified to produce version 1.1 XML output,
        -: 4010:// most invalid characters can be retained using character references.
function _ZN7testing8internal24XmlUnitTestResultPrinter9EscapeXmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 4011:std::string XmlUnitTestResultPrinter::EscapeXml(const std::string& str,
        -: 4012:                                                bool is_attribute) {
    #####: 4013:  Message m;
    %%%%%: 4013-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4014:
    #####: 4015:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4015-block  0
    %%%%%: 4015-block  1
    %%%%%: 4015-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4016:    const char ch = str[i];
    %%%%%: 4016-block  0
call    0 never executed
    #####: 4017:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4018:      case '<':
    #####: 4019:        m << "&lt;";
    %%%%%: 4019-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4020:        break;
    %%%%%: 4020-block  0
    #####: 4021:      case '>':
    #####: 4022:        m << "&gt;";
    %%%%%: 4022-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4023:        break;
    %%%%%: 4023-block  0
    #####: 4024:      case '&':
    #####: 4025:        m << "&amp;";
    %%%%%: 4025-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4026:        break;
    %%%%%: 4026-block  0
    #####: 4027:      case '\'':
    #####: 4028:        if (is_attribute)
    %%%%%: 4028-block  0
branch  0 never executed
branch  1 never executed
    #####: 4029:          m << "&apos;";
    %%%%%: 4029-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4030:        else
    #####: 4031:          m << '\'';
    %%%%%: 4031-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4031-block  1
    $$$$$: 4031-block  2
    #####: 4032:        break;
    %%%%%: 4032-block  0
    #####: 4033:      case '"':
    #####: 4034:        if (is_attribute)
    %%%%%: 4034-block  0
branch  0 never executed
branch  1 never executed
    #####: 4035:          m << "&quot;";
    %%%%%: 4035-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4036:        else
    #####: 4037:          m << '"';
    %%%%%: 4037-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4037-block  1
    $$$$$: 4037-block  2
    #####: 4038:        break;
    %%%%%: 4038-block  0
    #####: 4039:      default:
    #####: 4040:        if (IsValidXmlCharacter(static_cast<unsigned char>(ch))) {
    %%%%%: 4040-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4041:          if (is_attribute &&
    %%%%%: 4041-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4041-block  1
    %%%%%: 4041-block  2
    %%%%%: 4041-block  3
branch  4 never executed
branch  5 never executed
    #####: 4042:              IsNormalizableWhitespace(static_cast<unsigned char>(ch)))
    %%%%%: 4042-block  0
call    0 never executed
    #####: 4043:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    %%%%%: 4043-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4043-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4043-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4043-block  3
call    9 never executed
    $$$$$: 4043-block  4
call   10 never executed
    $$$$$: 4043-block  5
    #####: 4044:              << ";";
    %%%%%: 4044-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4045:          else
    #####: 4046:            m << ch;
    %%%%%: 4046-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4047:        }
    #####: 4048:        break;
    %%%%%: 4048-block  0
        -: 4049:    }
        -: 4050:  }
        -: 4051:
    #####: 4052:  return m.GetString();
    %%%%%: 4052-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4052-block  1
    #####: 4053:}
    %%%%%: 4053-block  0
call    0 never executed
    $$$$$: 4053-block  1
call    1 never executed
        -: 4054:
        -: 4055:// Returns the given string with all characters invalid in XML removed.
        -: 4056:// Currently invalid characters are dropped from the string. An
        -: 4057:// alternative is to replace them with certain characters such as . or ?.
function _ZN7testing8internal24XmlUnitTestResultPrinter26RemoveInvalidXmlCharactersERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4058:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
        -: 4059:    const std::string& str) {
    #####: 4060:  std::string output;
    %%%%%: 4060-block  0
call    0 never executed
    #####: 4061:  output.reserve(str.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4062:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    %%%%%: 4062-block  0
call    0 never executed
    %%%%%: 4062-block  1
call    1 never executed
    %%%%%: 4062-block  2
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4063:    if (IsValidXmlCharacter(static_cast<unsigned char>(*it)))
    %%%%%: 4063-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4064:      output.push_back(*it);
    %%%%%: 4064-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4065:
    #####: 4066:  return output;
    %%%%%: 4066-block  0
    %%%%%: 4066-block  1
    =====: 4067:}
    $$$$$: 4067-block  0
call    0 never executed
        -: 4068:
        -: 4069:// The following routines generate an XML representation of a UnitTest
        -: 4070:// object.
        -: 4071://
        -: 4072:// This is how Google Test concepts map to the DTD:
        -: 4073://
        -: 4074:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 4075://   <testsuite name="testcase-name">  <-- corresponds to a TestSuite object
        -: 4076://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 4077://       <failure message="...">...</failure>
        -: 4078://       <failure message="...">...</failure>
        -: 4079://       <failure message="...">...</failure>
        -: 4080://                                     <-- individual assertion failures
        -: 4081://     </testcase>
        -: 4082://   </testsuite>
        -: 4083:// </testsuites>
        -: 4084:
        -: 4085:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internal27FormatTimeInMillisAsSecondsB5cxx11El called 0 returned 0% blocks executed 0%
    #####: 4086:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    #####: 4087:  ::std::stringstream ss;
    %%%%%: 4087-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4088:  // For the exact N seconds, makes sure output has a trailing decimal point.
        -: 4089:  // Sets precision so that we won't have many trailing zeros (e.g., 300 ms
        -: 4090:  // will be just 0.3, 410 ms 0.41, and so on)
    #####: 4091:  ss << std::fixed
    %%%%%: 4091-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4092:     << std::setprecision(
    #####: 4093:            ms % 1000 == 0 ? 0 : (ms % 100 == 0 ? 1 : (ms % 10 == 0 ? 2 : 3)))
    %%%%%: 4093-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4093-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4093-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 4093-block  3
    %%%%%: 4093-block  4
    %%%%%: 4093-block  5
    %%%%%: 4093-block  6
    %%%%%: 4093-block  7
    %%%%%: 4093-block  8
    %%%%%: 4093-block  9
call    6 never executed
call    7 never executed
    #####: 4094:     << std::showpoint;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4095:  ss << (static_cast<double>(ms) * 1e-3);
    %%%%%: 4095-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4096:  return ss.str();
    %%%%%: 4096-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4096-block  1
    #####: 4097:}
    %%%%%: 4097-block  0
call    0 never executed
    $$$$$: 4097-block  1
call    1 never executed
        -: 4098:
function _ZN7testing8internalL17PortableLocaltimeElP2tm called 0 returned 0% blocks executed 0%
    #####: 4099:static bool PortableLocaltime(time_t seconds, struct tm* out) {
        -: 4100:#if defined(_MSC_VER)
        -: 4101:  return localtime_s(out, &seconds) == 0;
        -: 4102:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 4103:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 4104:  // Windows' localtime(), which has a thread-local tm buffer.
        -: 4105:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
        -: 4106:  if (tm_ptr == nullptr) return false;
        -: 4107:  *out = *tm_ptr;
        -: 4108:  return true;
        -: 4109:#elif defined(__STDC_LIB_EXT1__)
        -: 4110:  // Uses localtime_s when available as localtime_r is only available from
        -: 4111:  // C23 standard.
        -: 4112:  return localtime_s(&seconds, out) != nullptr;
        -: 4113:#else
    #####: 4114:  return localtime_r(&seconds, out) != nullptr;
    %%%%%: 4114-block  0
call    0 never executed
        -: 4115:#endif
        -: 4116:}
        -: 4117:
        -: 4118:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 4119:// 8601 format, without the timezone information.
function _ZN7testing8internal32FormatEpochTimeInMillisAsIso8601B5cxx11El called 0 returned 0% blocks executed 0%
    #####: 4120:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
        -: 4121:  struct tm time_struct;
    #####: 4122:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4122-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4123:    return "";
    %%%%%: 4123-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4123-block  1
call    4 never executed
    $$$$$: 4123-block  2
call    5 never executed
    $$$$$: 4123-block  3
        -: 4124:  // YYYY-MM-DDThh:mm:ss.sss
    #####: 4125:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4125-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4125-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4125-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4125-block  3
call   12 never executed
    $$$$$: 4125-block  4
call   13 never executed
    $$$$$: 4125-block  5
call   14 never executed
    $$$$$: 4125-block  6
    $$$$$: 4125-block  7
    $$$$$: 4125-block  8
    $$$$$: 4125-block  9
    #####: 4126:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4126-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4126-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4126-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4126-block  3
call   12 never executed
    $$$$$: 4126-block  4
call   13 never executed
    $$$$$: 4126-block  5
call   14 never executed
    $$$$$: 4126-block  6
    $$$$$: 4126-block  7
    $$$$$: 4126-block  8
    #####: 4127:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4127-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4127-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4127-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4127-block  3
call   12 never executed
    $$$$$: 4127-block  4
call   13 never executed
    $$$$$: 4127-block  5
call   14 never executed
    $$$$$: 4127-block  6
    $$$$$: 4127-block  7
    $$$$$: 4127-block  8
    #####: 4128:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4128-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4128-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4128-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4128-block  3
call   12 never executed
    $$$$$: 4128-block  4
call   13 never executed
    $$$$$: 4128-block  5
call   14 never executed
    $$$$$: 4128-block  6
    $$$$$: 4128-block  7
    $$$$$: 4128-block  8
    #####: 4129:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4129-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4129-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4129-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4129-block  3
call   12 never executed
    $$$$$: 4129-block  4
call   13 never executed
    $$$$$: 4129-block  5
call   14 never executed
    $$$$$: 4129-block  6
    $$$$$: 4129-block  7
    $$$$$: 4129-block  8
    #####: 4130:         String::FormatIntWidth2(time_struct.tm_sec) + "." +
    %%%%%: 4130-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4130-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4130-block  2
call    6 never executed
call    7 never executed
    $$$$$: 4130-block  3
call    8 never executed
    $$$$$: 4130-block  4
call    9 never executed
    $$$$$: 4130-block  5
    $$$$$: 4130-block  6
    #####: 4131:         String::FormatIntWidthN(static_cast<int>(ms % 1000), 3);
    %%%%%: 4131-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4131-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4131-block  2
call    7 never executed
    $$$$$: 4131-block  3
        -: 4132:}
        -: 4133:
        -: 4134:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
function _ZN7testing8internal24XmlUnitTestResultPrinter21OutputXmlCDataSectionEPSoPKc called 0 returned 0% blocks executed 0%
    #####: 4135:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
        -: 4136:                                                     const char* data) {
    #####: 4137:  const char* segment = data;
    #####: 4138:  *stream << "<![CDATA[";
    %%%%%: 4138-block  0
call    0 never executed
        -: 4139:  for (;;) {
    #####: 4140:    const char* const next_segment = strstr(segment, "]]>");
    #####: 4141:    if (next_segment != nullptr) {
    %%%%%: 4141-block  0
branch  0 never executed
branch  1 never executed
    #####: 4142:      stream->write(segment,
    #####: 4143:                    static_cast<std::streamsize>(next_segment - segment));
    %%%%%: 4143-block  0
call    0 never executed
    #####: 4144:      *stream << "]]>]]&gt;<![CDATA[";
call    0 never executed
    #####: 4145:      segment = next_segment + strlen("]]>");
        -: 4146:    } else {
    #####: 4147:      *stream << segment;
    %%%%%: 4147-block  0
call    0 never executed
    #####: 4148:      break;
        -: 4149:    }
    #####: 4150:  }
    %%%%%: 4150-block  0
    #####: 4151:  *stream << "]]>";
    %%%%%: 4151-block  0
call    0 never executed
    #####: 4152:}
        -: 4153:
function _ZN7testing8internal24XmlUnitTestResultPrinter18OutputXmlAttributeEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 4154:void XmlUnitTestResultPrinter::OutputXmlAttribute(
        -: 4155:    std::ostream* stream, const std::string& element_name,
        -: 4156:    const std::string& name, const std::string& value) {
        -: 4157:  const std::vector<std::string>& allowed_names =
    #####: 4158:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4158-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4159:
    #####: 4160:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4160-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4160-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4160-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4160-block  3
call   13 never executed
    %%%%%: 4160-block  4
call   14 never executed
    $$$$$: 4160-block  5
    $$$$$: 4160-block  6
    $$$$$: 4160-block  7
call   15 never executed
    $$$$$: 4160-block  8
        -: 4161:               allowed_names.end())
        -: 4162:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 4163:      << ">.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4163-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4163-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4163-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4163-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4163-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4164:
    #####: 4165:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    %%%%%: 4165-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4165-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4165-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4165-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4165-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4165-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4165-block  6
call   18 never executed
    $$$$$: 4165-block  7
call   19 never executed
    $$$$$: 4165-block  8
    #####: 4166:}
call    0 never executed
    $$$$$: 4166-block  0
call    1 never executed
        -: 4167:
        -: 4168:// Streams a test suite XML stanza containing the given test result.
function _ZN7testing8internal24XmlUnitTestResultPrinter31OutputXmlTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4169:void XmlUnitTestResultPrinter::OutputXmlTestSuiteForTestResult(
        -: 4170:    ::std::ostream* stream, const TestResult& result) {
        -: 4171:  // Output the boilerplate for a minimal test suite with one test.
    #####: 4172:  *stream << "  <testsuite";
    %%%%%: 4172-block  0
call    0 never executed
    #####: 4173:  OutputXmlAttribute(stream, "testsuite", "name", "NonTestSuiteFailure");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4173-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4173-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4173-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4173-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4173-block  4
call   21 never executed
    $$$$$: 4173-block  5
call   22 never executed
    $$$$$: 4173-block  6
    $$$$$: 4173-block  7
    $$$$$: 4173-block  8
call   23 never executed
    $$$$$: 4173-block  9
call   24 never executed
    $$$$$: 4173-block 10
    $$$$$: 4173-block 11
    $$$$$: 4173-block 12
call   25 never executed
    $$$$$: 4173-block 13
call   26 never executed
    $$$$$: 4173-block 14
    $$$$$: 4173-block 15
call   27 never executed
    #####: 4174:  OutputXmlAttribute(stream, "testsuite", "tests", "1");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4174-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4174-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4174-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4174-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4174-block  4
call   21 never executed
    $$$$$: 4174-block  5
call   22 never executed
    $$$$$: 4174-block  6
    $$$$$: 4174-block  7
    $$$$$: 4174-block  8
call   23 never executed
    $$$$$: 4174-block  9
call   24 never executed
    $$$$$: 4174-block 10
    $$$$$: 4174-block 11
    $$$$$: 4174-block 12
call   25 never executed
    $$$$$: 4174-block 13
call   26 never executed
    $$$$$: 4174-block 14
    $$$$$: 4174-block 15
call   27 never executed
    #####: 4175:  OutputXmlAttribute(stream, "testsuite", "failures", "1");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4175-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4175-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4175-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4175-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4175-block  4
call   21 never executed
    $$$$$: 4175-block  5
call   22 never executed
    $$$$$: 4175-block  6
    $$$$$: 4175-block  7
    $$$$$: 4175-block  8
call   23 never executed
    $$$$$: 4175-block  9
call   24 never executed
    $$$$$: 4175-block 10
    $$$$$: 4175-block 11
    $$$$$: 4175-block 12
call   25 never executed
    $$$$$: 4175-block 13
call   26 never executed
    $$$$$: 4175-block 14
    $$$$$: 4175-block 15
call   27 never executed
    #####: 4176:  OutputXmlAttribute(stream, "testsuite", "disabled", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4176-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4176-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4176-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4176-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4176-block  4
call   21 never executed
    $$$$$: 4176-block  5
call   22 never executed
    $$$$$: 4176-block  6
    $$$$$: 4176-block  7
    $$$$$: 4176-block  8
call   23 never executed
    $$$$$: 4176-block  9
call   24 never executed
    $$$$$: 4176-block 10
    $$$$$: 4176-block 11
    $$$$$: 4176-block 12
call   25 never executed
    $$$$$: 4176-block 13
call   26 never executed
    $$$$$: 4176-block 14
    $$$$$: 4176-block 15
call   27 never executed
    #####: 4177:  OutputXmlAttribute(stream, "testsuite", "skipped", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4177-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4177-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4177-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4177-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4177-block  4
call   21 never executed
    $$$$$: 4177-block  5
call   22 never executed
    $$$$$: 4177-block  6
    $$$$$: 4177-block  7
    $$$$$: 4177-block  8
call   23 never executed
    $$$$$: 4177-block  9
call   24 never executed
    $$$$$: 4177-block 10
    $$$$$: 4177-block 11
    $$$$$: 4177-block 12
call   25 never executed
    $$$$$: 4177-block 13
call   26 never executed
    $$$$$: 4177-block 14
    $$$$$: 4177-block 15
call   27 never executed
    #####: 4178:  OutputXmlAttribute(stream, "testsuite", "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4178-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4178-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4178-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4178-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4178-block  4
call   21 never executed
    $$$$$: 4178-block  5
call   22 never executed
    $$$$$: 4178-block  6
    $$$$$: 4178-block  7
    $$$$$: 4178-block  8
call   23 never executed
    $$$$$: 4178-block  9
call   24 never executed
    $$$$$: 4178-block 10
    $$$$$: 4178-block 11
    $$$$$: 4178-block 12
call   25 never executed
    $$$$$: 4178-block 13
call   26 never executed
    $$$$$: 4178-block 14
    $$$$$: 4178-block 15
call   27 never executed
    #####: 4179:  OutputXmlAttribute(stream, "testsuite", "time",
    %%%%%: 4179-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4179-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4179-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4179-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4179-block  4
call   15 never executed
    $$$$$: 4179-block  5
call   16 never executed
    $$$$$: 4179-block  6
    $$$$$: 4179-block  7
    $$$$$: 4179-block  8
call   17 never executed
    $$$$$: 4179-block  9
call   18 never executed
    $$$$$: 4179-block 10
    $$$$$: 4179-block 11
    #####: 4180:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4180-block  0
call    5 never executed
    $$$$$: 4180-block  1
call    6 never executed
    #####: 4181:  OutputXmlAttribute(
    %%%%%: 4181-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4181-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4181-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4181-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4181-block  4
call   15 never executed
    $$$$$: 4181-block  5
call   16 never executed
    $$$$$: 4181-block  6
    $$$$$: 4181-block  7
    $$$$$: 4181-block  8
call   17 never executed
    $$$$$: 4181-block  9
call   18 never executed
    $$$$$: 4181-block 10
    $$$$$: 4181-block 11
        -: 4182:      stream, "testsuite", "timestamp",
    #####: 4183:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4183-block  0
call    5 never executed
    $$$$$: 4183-block  1
call    6 never executed
    #####: 4184:  *stream << ">";
call    0 never executed
        -: 4185:
        -: 4186:  // Output the boilerplate for a minimal test case with a single test.
    #####: 4187:  *stream << "    <testcase";
call    0 never executed
    #####: 4188:  OutputXmlAttribute(stream, "testcase", "name", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4188-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4188-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4188-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4188-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4188-block  4
call   21 never executed
    $$$$$: 4188-block  5
call   22 never executed
    $$$$$: 4188-block  6
    $$$$$: 4188-block  7
    $$$$$: 4188-block  8
call   23 never executed
    $$$$$: 4188-block  9
call   24 never executed
    $$$$$: 4188-block 10
    $$$$$: 4188-block 11
    $$$$$: 4188-block 12
call   25 never executed
    $$$$$: 4188-block 13
call   26 never executed
    $$$$$: 4188-block 14
    $$$$$: 4188-block 15
call   27 never executed
    #####: 4189:  OutputXmlAttribute(stream, "testcase", "status", "run");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4189-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4189-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4189-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4189-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4189-block  4
call   21 never executed
    $$$$$: 4189-block  5
call   22 never executed
    $$$$$: 4189-block  6
    $$$$$: 4189-block  7
    $$$$$: 4189-block  8
call   23 never executed
    $$$$$: 4189-block  9
call   24 never executed
    $$$$$: 4189-block 10
    $$$$$: 4189-block 11
    $$$$$: 4189-block 12
call   25 never executed
    $$$$$: 4189-block 13
call   26 never executed
    $$$$$: 4189-block 14
    $$$$$: 4189-block 15
call   27 never executed
    #####: 4190:  OutputXmlAttribute(stream, "testcase", "result", "completed");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4190-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4190-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4190-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4190-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4190-block  4
call   21 never executed
    $$$$$: 4190-block  5
call   22 never executed
    $$$$$: 4190-block  6
    $$$$$: 4190-block  7
    $$$$$: 4190-block  8
call   23 never executed
    $$$$$: 4190-block  9
call   24 never executed
    $$$$$: 4190-block 10
    $$$$$: 4190-block 11
    $$$$$: 4190-block 12
call   25 never executed
    $$$$$: 4190-block 13
call   26 never executed
    $$$$$: 4190-block 14
    $$$$$: 4190-block 15
call   27 never executed
    #####: 4191:  OutputXmlAttribute(stream, "testcase", "classname", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4191-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4191-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4191-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4191-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4191-block  4
call   21 never executed
    $$$$$: 4191-block  5
call   22 never executed
    $$$$$: 4191-block  6
    $$$$$: 4191-block  7
    $$$$$: 4191-block  8
call   23 never executed
    $$$$$: 4191-block  9
call   24 never executed
    $$$$$: 4191-block 10
    $$$$$: 4191-block 11
    $$$$$: 4191-block 12
call   25 never executed
    $$$$$: 4191-block 13
call   26 never executed
    $$$$$: 4191-block 14
    $$$$$: 4191-block 15
call   27 never executed
    #####: 4192:  OutputXmlAttribute(stream, "testcase", "time",
    %%%%%: 4192-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4192-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4192-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4192-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4192-block  4
call   15 never executed
    $$$$$: 4192-block  5
call   16 never executed
    $$$$$: 4192-block  6
    $$$$$: 4192-block  7
    $$$$$: 4192-block  8
call   17 never executed
    $$$$$: 4192-block  9
call   18 never executed
    $$$$$: 4192-block 10
    $$$$$: 4192-block 11
    #####: 4193:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4193-block  0
call    5 never executed
    $$$$$: 4193-block  1
call    6 never executed
    #####: 4194:  OutputXmlAttribute(
    %%%%%: 4194-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4194-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4194-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4194-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4194-block  4
call   15 never executed
    $$$$$: 4194-block  5
call   16 never executed
    $$$$$: 4194-block  6
    $$$$$: 4194-block  7
    $$$$$: 4194-block  8
call   17 never executed
    $$$$$: 4194-block  9
call   18 never executed
    $$$$$: 4194-block 10
    $$$$$: 4194-block 11
        -: 4195:      stream, "testcase", "timestamp",
    #####: 4196:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4196-block  0
call    5 never executed
        -: 4197:
        -: 4198:  // Output the actual test result.
    #####: 4199:  OutputXmlTestResult(stream, result);
call    0 never executed
        -: 4200:
        -: 4201:  // Complete the test suite.
    #####: 4202:  *stream << "  </testsuite>\n";
call    0 never executed
    #####: 4203:}
        -: 4204:
        -: 4205:// Prints an XML representation of a TestInfo object.
function _ZN7testing8internal24XmlUnitTestResultPrinter17OutputXmlTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4206:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
        -: 4207:                                                 const char* test_suite_name,
        -: 4208:                                                 const TestInfo& test_info) {
    #####: 4209:  const TestResult& result = *test_info.result();
    %%%%%: 4209-block  0
call    0 never executed
    #####: 4210:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4210-block  0
call    4 never executed
    $$$$$: 4210-block  1
call    5 never executed
    $$$$$: 4210-block  2
        -: 4211:
    #####: 4212:  if (test_info.is_in_another_shard()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4213:    return;
    %%%%%: 4213-block  0
        -: 4214:  }
        -: 4215:
    #####: 4216:  *stream << "    <testcase";
    %%%%%: 4216-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4217:  OutputXmlAttribute(stream, kTestsuite, "name", test_info.name());
    %%%%%: 4217-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4217-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4217-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4217-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4217-block  4
call   16 never executed
    $$$$$: 4217-block  5
call   17 never executed
    $$$$$: 4217-block  6
    $$$$$: 4217-block  7
    $$$$$: 4217-block  8
call   18 never executed
    $$$$$: 4217-block  9
call   19 never executed
    $$$$$: 4217-block 10
    $$$$$: 4217-block 11
        -: 4218:
    #####: 4219:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4220:    OutputXmlAttribute(stream, kTestsuite, "value_param",
    %%%%%: 4220-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4220-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4220-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4220-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4220-block  4
call   16 never executed
    $$$$$: 4220-block  5
call   17 never executed
    $$$$$: 4220-block  6
    $$$$$: 4220-block  7
    $$$$$: 4220-block  8
call   18 never executed
    $$$$$: 4220-block  9
call   19 never executed
    $$$$$: 4220-block 10
    $$$$$: 4220-block 11
        -: 4221:                       test_info.value_param());
        -: 4222:  }
    #####: 4223:  if (test_info.type_param() != nullptr) {
    %%%%%: 4223-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4224:    OutputXmlAttribute(stream, kTestsuite, "type_param",
    %%%%%: 4224-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4224-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4224-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4224-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4224-block  4
call   16 never executed
    $$$$$: 4224-block  5
call   17 never executed
    $$$$$: 4224-block  6
    $$$$$: 4224-block  7
    $$$$$: 4224-block  8
call   18 never executed
    $$$$$: 4224-block  9
call   19 never executed
    $$$$$: 4224-block 10
    $$$$$: 4224-block 11
        -: 4225:                       test_info.type_param());
        -: 4226:  }
        -: 4227:
    #####: 4228:  OutputXmlAttribute(stream, kTestsuite, "file", test_info.file());
    %%%%%: 4228-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4228-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4228-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4228-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4228-block  4
call   16 never executed
    $$$$$: 4228-block  5
call   17 never executed
    $$$$$: 4228-block  6
    $$$$$: 4228-block  7
    $$$$$: 4228-block  8
call   18 never executed
    $$$$$: 4228-block  9
call   19 never executed
    $$$$$: 4228-block 10
    $$$$$: 4228-block 11
    #####: 4229:  OutputXmlAttribute(stream, kTestsuite, "line",
    %%%%%: 4229-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4229-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4229-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4229-block  3
call    9 never executed
    $$$$$: 4229-block  4
call   10 never executed
    $$$$$: 4229-block  5
    $$$$$: 4229-block  6
    #####: 4230:                     StreamableToString(test_info.line()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4230-block  0
call    5 never executed
    $$$$$: 4230-block  1
    $$$$$: 4230-block  2
    #####: 4231:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4232:    *stream << " />\n";
    %%%%%: 4232-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4233:    return;
    %%%%%: 4233-block  0
        -: 4234:  }
        -: 4235:
    #####: 4236:  OutputXmlAttribute(stream, kTestsuite, "status",
    %%%%%: 4236-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4236-block  1
    %%%%%: 4236-block  2
    %%%%%: 4236-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4236-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4236-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4236-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4236-block  7
call   17 never executed
    $$$$$: 4236-block  8
call   18 never executed
    $$$$$: 4236-block  9
    $$$$$: 4236-block 10
    $$$$$: 4236-block 11
call   19 never executed
    $$$$$: 4236-block 12
call   20 never executed
    $$$$$: 4236-block 13
    $$$$$: 4236-block 14
    #####: 4237:                     test_info.should_run() ? "run" : "notrun");
call    0 never executed
    #####: 4238:  OutputXmlAttribute(stream, kTestsuite, "result",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4238-block  0
    %%%%%: 4238-block  1
    %%%%%: 4238-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4238-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4238-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4238-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4238-block  6
call   17 never executed
    $$$$$: 4238-block  7
call   18 never executed
    $$$$$: 4238-block  8
    $$$$$: 4238-block  9
    $$$$$: 4238-block 10
call   19 never executed
    $$$$$: 4238-block 11
call   20 never executed
    $$$$$: 4238-block 12
    $$$$$: 4238-block 13
    #####: 4239:                     test_info.should_run()
call    0 never executed
    #####: 4240:                         ? (result.Skipped() ? "skipped" : "completed")
    %%%%%: 4240-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4240-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4240-block  2
    %%%%%: 4240-block  3
        -: 4241:                         : "suppressed");
    #####: 4242:  OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4242-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4242-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4242-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4242-block  3
call    9 never executed
    $$$$$: 4242-block  4
call   10 never executed
    $$$$$: 4242-block  5
    $$$$$: 4242-block  6
    #####: 4243:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4243-block  0
call    5 never executed
    $$$$$: 4243-block  1
    #####: 4244:  OutputXmlAttribute(
    %%%%%: 4244-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4244-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4244-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4244-block  3
call    9 never executed
    $$$$$: 4244-block  4
call   10 never executed
    $$$$$: 4244-block  5
    $$$$$: 4244-block  6
        -: 4245:      stream, kTestsuite, "timestamp",
    #####: 4246:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4246-block  0
call    5 never executed
    $$$$$: 4246-block  1
    #####: 4247:  OutputXmlAttribute(stream, kTestsuite, "classname", test_suite_name);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4247-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4247-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4247-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4247-block  3
call   15 never executed
    $$$$$: 4247-block  4
call   16 never executed
    $$$$$: 4247-block  5
    $$$$$: 4247-block  6
    $$$$$: 4247-block  7
call   17 never executed
    $$$$$: 4247-block  8
call   18 never executed
    $$$$$: 4247-block  9
    $$$$$: 4247-block 10
        -: 4248:
    #####: 4249:  OutputXmlTestResult(stream, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4250:}
    %%%%%: 4250-block  0
    %%%%%: 4250-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4250-block  2
call    3 never executed
        -: 4251:
function _ZN7testing8internal24XmlUnitTestResultPrinter19OutputXmlTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4252:void XmlUnitTestResultPrinter::OutputXmlTestResult(::std::ostream* stream,
        -: 4253:                                                   const TestResult& result) {
    #####: 4254:  int failures = 0;
    #####: 4255:  int skips = 0;
    #####: 4256:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4256-block  0
    %%%%%: 4256-block  1
    %%%%%: 4256-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4257:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4257-block  0
call    0 never executed
    #####: 4258:    if (part.failed()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4259:      if (++failures == 1 && skips == 0) {
    %%%%%: 4259-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4259-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4259-block  2
    %%%%%: 4259-block  3
    %%%%%: 4259-block  4
branch  4 never executed
branch  5 never executed
    #####: 4260:        *stream << ">\n";
    %%%%%: 4260-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4261:      }
        -: 4262:      const std::string location =
        -: 4263:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4264:                                                          part.line_number());
    %%%%%: 4264-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4265:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4265-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4265-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4265-block  2
call    7 never executed
    $$$$$: 4265-block  3
call    8 never executed
    $$$$$: 4265-block  4
    #####: 4266:      *stream << "      <failure message=\"" << EscapeXmlAttribute(summary)
    %%%%%: 4266-block  0
call    0 never executed
    $$$$$: 4266-block  1
call    1 never executed
    $$$$$: 4266-block  2
    #####: 4267:              << "\" type=\"\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4267-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4267-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4267-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4268:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4268-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4268-block  1
call    7 never executed
    $$$$$: 4268-block  2
call    8 never executed
    $$$$$: 4268-block  3
    #####: 4269:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4269-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4269-block  1
call    7 never executed
    $$$$$: 4269-block  2
call    8 never executed
    $$$$$: 4269-block  3
    #####: 4270:      *stream << "</failure>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4271:    } else if (part.skipped()) {
    %%%%%: 4271-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%: 4271-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4271-block  2
call    6 never executed
    $$$$$: 4271-block  3
call    7 never executed
    $$$$$: 4271-block  4
call    8 never executed
    #####: 4272:      if (++skips == 1 && failures == 0) {
    %%%%%: 4272-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4272-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4272-block  2
    %%%%%: 4272-block  3
    %%%%%: 4272-block  4
branch  4 never executed
branch  5 never executed
    #####: 4273:        *stream << ">\n";
    %%%%%: 4273-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4274:      }
        -: 4275:      const std::string location =
        -: 4276:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4277:                                                          part.line_number());
    %%%%%: 4277-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4278:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4278-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4278-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4278-block  2
call    7 never executed
    $$$$$: 4278-block  3
call    8 never executed
    $$$$$: 4278-block  4
        -: 4279:      *stream << "      <skipped message=\""
    #####: 4280:              << EscapeXmlAttribute(summary.c_str()) << "\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4280-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4280-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4280-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4280-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4280-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4280-block  5
call   20 never executed
    $$$$$: 4280-block  6
call   21 never executed
    $$$$$: 4280-block  7
call   22 never executed
    $$$$$: 4280-block  8
    $$$$$: 4280-block  9
    $$$$$: 4280-block 10
    #####: 4281:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4281-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4281-block  1
call    7 never executed
    $$$$$: 4281-block  2
call    8 never executed
    $$$$$: 4281-block  3
    #####: 4282:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4282-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4282-block  1
call    7 never executed
    $$$$$: 4282-block  2
call    8 never executed
    $$$$$: 4282-block  3
    #####: 4283:      *stream << "</skipped>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4284:    }
    %%%%%: 4284-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4284-block  1
call    3 never executed
    $$$$$: 4284-block  2
call    4 never executed
    $$$$$: 4284-block  3
call    5 never executed
        -: 4285:  }
        -: 4286:
    #####: 4287:  if (failures == 0 && skips == 0 && result.test_property_count() == 0) {
    %%%%%: 4287-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4287-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4287-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4287-block  3
    %%%%%: 4287-block  4
    %%%%%: 4287-block  5
branch  7 never executed
branch  8 never executed
    #####: 4288:    *stream << " />\n";
    %%%%%: 4288-block  0
call    0 never executed
        -: 4289:  } else {
    #####: 4290:    if (failures == 0 && skips == 0) {
    %%%%%: 4290-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4290-block  1
branch  2 never executed
branch  3 never executed
    #####: 4291:      *stream << ">\n";
    %%%%%: 4291-block  0
call    0 never executed
        -: 4292:    }
    #####: 4293:    OutputXmlTestProperties(stream, result);
    %%%%%: 4293-block  0
call    0 never executed
    #####: 4294:    *stream << "    </testcase>\n";
call    0 never executed
        -: 4295:  }
    #####: 4296:}
    %%%%%: 4296-block  0
        -: 4297:
        -: 4298:// Prints an XML representation of a TestSuite object
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4299:void XmlUnitTestResultPrinter::PrintXmlTestSuite(std::ostream* stream,
        -: 4300:                                                 const TestSuite& test_suite) {
    #####: 4301:  const std::string kTestsuite = "testsuite";
    %%%%%: 4301-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4301-block  1
call    4 never executed
    $$$$$: 4301-block  2
call    5 never executed
    $$$$$: 4301-block  3
    #####: 4302:  *stream << "  <" << kTestsuite;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4302-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4303:  OutputXmlAttribute(stream, kTestsuite, "name", test_suite.name());
    %%%%%: 4303-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4303-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4303-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4303-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4303-block  4
call   16 never executed
    $$$$$: 4303-block  5
call   17 never executed
    $$$$$: 4303-block  6
    $$$$$: 4303-block  7
    $$$$$: 4303-block  8
call   18 never executed
    $$$$$: 4303-block  9
call   19 never executed
    $$$$$: 4303-block 10
    $$$$$: 4303-block 11
    #####: 4304:  OutputXmlAttribute(stream, kTestsuite, "tests",
    %%%%%: 4304-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4304-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4304-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4304-block  3
call    9 never executed
    $$$$$: 4304-block  4
call   10 never executed
    $$$$$: 4304-block  5
    $$$$$: 4304-block  6
    #####: 4305:                     StreamableToString(test_suite.reportable_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4305-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4305-block  1
call    7 never executed
    $$$$$: 4305-block  2
    $$$$$: 4305-block  3
    #####: 4306:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4307:    OutputXmlAttribute(stream, kTestsuite, "failures",
    %%%%%: 4307-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4307-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4307-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4307-block  3
call    9 never executed
    $$$$$: 4307-block  4
call   10 never executed
    $$$$$: 4307-block  5
    $$$$$: 4307-block  6
    #####: 4308:                       StreamableToString(test_suite.failed_test_count()));
    %%%%%: 4308-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4308-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4308-block  2
call    7 never executed
    $$$$$: 4308-block  3
    $$$$$: 4308-block  4
    #####: 4309:    OutputXmlAttribute(
    %%%%%: 4309-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4309-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4309-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4309-block  3
call    9 never executed
    $$$$$: 4309-block  4
call   10 never executed
    $$$$$: 4309-block  5
    $$$$$: 4309-block  6
        -: 4310:        stream, kTestsuite, "disabled",
    #####: 4311:        StreamableToString(test_suite.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4311-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4311-block  1
call    7 never executed
    $$$$$: 4311-block  2
    $$$$$: 4311-block  3
    #####: 4312:    OutputXmlAttribute(stream, kTestsuite, "skipped",
    %%%%%: 4312-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4312-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4312-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4312-block  3
call    9 never executed
    $$$$$: 4312-block  4
call   10 never executed
    $$$$$: 4312-block  5
    $$$$$: 4312-block  6
    #####: 4313:                       StreamableToString(test_suite.skipped_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4313-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4313-block  1
call    7 never executed
    $$$$$: 4313-block  2
    $$$$$: 4313-block  3
        -: 4314:
    #####: 4315:    OutputXmlAttribute(stream, kTestsuite, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4315-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4315-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4315-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4315-block  3
call   15 never executed
    $$$$$: 4315-block  4
call   16 never executed
    $$$$$: 4315-block  5
    $$$$$: 4315-block  6
    $$$$$: 4315-block  7
call   17 never executed
    $$$$$: 4315-block  8
call   18 never executed
    $$$$$: 4315-block  9
    $$$$$: 4315-block 10
        -: 4316:
    #####: 4317:    OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4317-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4317-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4317-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4317-block  3
call    9 never executed
    $$$$$: 4317-block  4
call   10 never executed
    $$$$$: 4317-block  5
    $$$$$: 4317-block  6
    #####: 4318:                       FormatTimeInMillisAsSeconds(test_suite.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4318-block  0
call    5 never executed
    $$$$$: 4318-block  1
    #####: 4319:    OutputXmlAttribute(
    %%%%%: 4319-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4319-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4319-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4319-block  3
call    9 never executed
    $$$$$: 4319-block  4
call   10 never executed
    $$$$$: 4319-block  5
    $$$$$: 4319-block  6
        -: 4320:        stream, kTestsuite, "timestamp",
    #####: 4321:        FormatEpochTimeInMillisAsIso8601(test_suite.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4321-block  0
call    5 never executed
    $$$$$: 4321-block  1
    #####: 4322:    *stream << TestPropertiesAsXmlAttributes(test_suite.ad_hoc_test_result());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4322-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4322-block  1
call    7 never executed
    $$$$$: 4322-block  2
call    8 never executed
    $$$$$: 4322-block  3
        -: 4323:  }
    #####: 4324:  *stream << ">\n";
    %%%%%: 4324-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4325:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4325-block  0
    %%%%%: 4325-block  1
    %%%%%: 4325-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4326:    if (test_suite.GetTestInfo(i)->is_reportable())
    %%%%%: 4326-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4326-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4327:      OutputXmlTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4327-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4327-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4328:  }
    #####: 4329:  *stream << "  </" << kTestsuite << ">\n";
    %%%%%: 4329-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4329-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4329-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4330:}
    %%%%%: 4330-block  0
call    0 never executed
    $$$$$: 4330-block  1
call    1 never executed
        -: 4331:
        -: 4332:// Prints an XML summary of unit_test to output stream out.
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4333:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
        -: 4334:                                                const UnitTest& unit_test) {
    #####: 4335:  const std::string kTestsuites = "testsuites";
    %%%%%: 4335-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4335-block  1
call    4 never executed
    $$$$$: 4335-block  2
call    5 never executed
    $$$$$: 4335-block  3
        -: 4336:
    #####: 4337:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4338:  *stream << "<" << kTestsuites;
    %%%%%: 4338-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4338-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4339:
    #####: 4340:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4340-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4340-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4340-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4340-block  3
call    9 never executed
    $$$$$: 4340-block  4
call   10 never executed
    $$$$$: 4340-block  5
    $$$$$: 4340-block  6
    #####: 4341:                     StreamableToString(unit_test.reportable_test_count()));
    %%%%%: 4341-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4341-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4341-block  2
call    7 never executed
    $$$$$: 4341-block  3
    $$$$$: 4341-block  4
    #####: 4342:  OutputXmlAttribute(stream, kTestsuites, "failures",
    %%%%%: 4342-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4342-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4342-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4342-block  3
call    9 never executed
    $$$$$: 4342-block  4
call   10 never executed
    $$$$$: 4342-block  5
    $$$$$: 4342-block  6
    #####: 4343:                     StreamableToString(unit_test.failed_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4343-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4343-block  1
call    7 never executed
    $$$$$: 4343-block  2
    $$$$$: 4343-block  3
    #####: 4344:  OutputXmlAttribute(
    %%%%%: 4344-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4344-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4344-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4344-block  3
call    9 never executed
    $$$$$: 4344-block  4
call   10 never executed
    $$$$$: 4344-block  5
    $$$$$: 4344-block  6
        -: 4345:      stream, kTestsuites, "disabled",
    #####: 4346:      StreamableToString(unit_test.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4346-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4346-block  1
call    7 never executed
    $$$$$: 4346-block  2
    $$$$$: 4346-block  3
    #####: 4347:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4347-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4347-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4347-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4347-block  3
call   15 never executed
    $$$$$: 4347-block  4
call   16 never executed
    $$$$$: 4347-block  5
    $$$$$: 4347-block  6
    $$$$$: 4347-block  7
call   17 never executed
    $$$$$: 4347-block  8
call   18 never executed
    $$$$$: 4347-block  9
    $$$$$: 4347-block 10
    #####: 4348:  OutputXmlAttribute(stream, kTestsuites, "time",
    %%%%%: 4348-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4348-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4348-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4348-block  3
call    9 never executed
    $$$$$: 4348-block  4
call   10 never executed
    $$$$$: 4348-block  5
    $$$$$: 4348-block  6
    #####: 4349:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4349-block  0
call    5 never executed
    $$$$$: 4349-block  1
    #####: 4350:  OutputXmlAttribute(
    %%%%%: 4350-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4350-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4350-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4350-block  3
call    9 never executed
    $$$$$: 4350-block  4
call   10 never executed
    $$$$$: 4350-block  5
    $$$$$: 4350-block  6
        -: 4351:      stream, kTestsuites, "timestamp",
    #####: 4352:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4352-block  0
call    5 never executed
    $$$$$: 4352-block  1
        -: 4353:
    #####: 4354:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4355:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
    %%%%%: 4355-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4355-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4355-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4355-block  3
call    9 never executed
    $$$$$: 4355-block  4
call   10 never executed
    $$$$$: 4355-block  5
    $$$$$: 4355-block  6
    #####: 4356:                       StreamableToString(unit_test.random_seed()));
    %%%%%: 4356-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4356-block  1
call    5 never executed
    $$$$$: 4356-block  2
    $$$$$: 4356-block  3
        -: 4357:  }
    #####: 4358:  *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());
    %%%%%: 4358-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4358-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4358-block  2
call    7 never executed
    $$$$$: 4358-block  3
call    8 never executed
    $$$$$: 4358-block  4
        -: 4359:
    #####: 4360:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4360-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4360-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4360-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4360-block  3
call   15 never executed
    $$$$$: 4360-block  4
call   16 never executed
    $$$$$: 4360-block  5
    $$$$$: 4360-block  6
    $$$$$: 4360-block  7
call   17 never executed
    $$$$$: 4360-block  8
call   18 never executed
    $$$$$: 4360-block  9
    $$$$$: 4360-block 10
    #####: 4361:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4362:
    #####: 4363:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4363-block  0
    %%%%%: 4363-block  1
    %%%%%: 4363-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4364:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0)
    %%%%%: 4364-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4364-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4364-block  2
branch  6 never executed
branch  7 never executed
    #####: 4365:      PrintXmlTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4365-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4365-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4366:  }
        -: 4367:
        -: 4368:  // If there was a test failure outside of one of the test suites (like in a
        -: 4369:  // test environment) include that in the output.
    #####: 4370:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4370-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4370-block  1
branch  4 never executed
branch  5 never executed
    #####: 4371:    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4371-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4372:  }
        -: 4373:
    #####: 4374:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4374-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4374-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4374-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4375:}
    %%%%%: 4375-block  0
call    0 never executed
    $$$$$: 4375-block  1
call    1 never executed
        -: 4376:
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestsListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4377:void XmlUnitTestResultPrinter::PrintXmlTestsList(
        -: 4378:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4379:  const std::string kTestsuites = "testsuites";
    %%%%%: 4379-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4379-block  1
call    4 never executed
    $$$$$: 4379-block  2
call    5 never executed
    $$$$$: 4379-block  3
        -: 4380:
    #####: 4381:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4382:  *stream << "<" << kTestsuites;
    %%%%%: 4382-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4382-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4383:
    #####: 4384:  int total_tests = 0;
    #####: 4385:  for (auto test_suite : test_suites) {
    %%%%%: 4385-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4385-block  1
call    2 never executed
    %%%%%: 4385-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4386:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4387:  }
    #####: 4388:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4388-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4388-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4388-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4388-block  3
call    9 never executed
    $$$$$: 4388-block  4
call   10 never executed
    $$$$$: 4388-block  5
    $$$$$: 4388-block  6
    #####: 4389:                     StreamableToString(total_tests));
    %%%%%: 4389-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 4389-block  1
call    4 never executed
    $$$$$: 4389-block  2
    #####: 4390:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4390-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4390-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4390-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4390-block  3
call   15 never executed
    $$$$$: 4390-block  4
call   16 never executed
    $$$$$: 4390-block  5
    $$$$$: 4390-block  6
    $$$$$: 4390-block  7
call   17 never executed
    $$$$$: 4390-block  8
call   18 never executed
    $$$$$: 4390-block  9
    $$$$$: 4390-block 10
    #####: 4391:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4392:
    #####: 4393:  for (auto test_suite : test_suites) {
    %%%%%: 4393-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4393-block  1
call    2 never executed
    %%%%%: 4393-block  2
call    3 never executed
    %%%%%: 4393-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4394:    PrintXmlTestSuite(stream, *test_suite);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4395:  }
    #####: 4396:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4396-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4396-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4396-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4397:}
    %%%%%: 4397-block  0
call    0 never executed
    $$$$$: 4397-block  1
call    1 never executed
        -: 4398:
        -: 4399:// Produces a string representing the test properties in a result as space
        -: 4400:// delimited XML attributes based on the property key="value" pairs.
function _ZN7testing8internal24XmlUnitTestResultPrinter29TestPropertiesAsXmlAttributesB5cxx11ERKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4401:std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(
        -: 4402:    const TestResult& result) {
    #####: 4403:  Message attributes;
    %%%%%: 4403-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4404:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4404-block  0
    %%%%%: 4404-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4405:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4405-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4406:    attributes << " " << property.key() << "="
    %%%%%: 4406-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4406-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4406-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 4406-block  3
    #####: 4407:               << "\"" << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 4407-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4407-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4407-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4407-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4407-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4407-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4407-block  6
call   20 never executed
    $$$$$: 4407-block  7
call   21 never executed
    $$$$$: 4407-block  8
call   22 never executed
    $$$$$: 4407-block  9
    $$$$$: 4407-block 10
    $$$$$: 4407-block 11
        -: 4408:  }
    #####: 4409:  return attributes.GetString();
    %%%%%: 4409-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4409-block  1
    #####: 4410:}
    %%%%%: 4410-block  0
call    0 never executed
    $$$$$: 4410-block  1
call    1 never executed
        -: 4411:
function _ZN7testing8internal24XmlUnitTestResultPrinter23OutputXmlTestPropertiesEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4412:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
        -: 4413:    std::ostream* stream, const TestResult& result) {
    #####: 4414:  const std::string kProperties = "properties";
    %%%%%: 4414-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4414-block  1
call    4 never executed
    $$$$$: 4414-block  2
call    5 never executed
    $$$$$: 4414-block  3
    #####: 4415:  const std::string kProperty = "property";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4415-block  0
call    4 never executed
    $$$$$: 4415-block  1
call    5 never executed
    $$$$$: 4415-block  2
        -: 4416:
    #####: 4417:  if (result.test_property_count() <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4418:    return;
    %%%%%: 4418-block  0
        -: 4419:  }
        -: 4420:
    #####: 4421:  *stream << "      <" << kProperties << ">\n";
    %%%%%: 4421-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4421-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4421-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4422:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4422-block  0
    %%%%%: 4422-block  1
    %%%%%: 4422-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4423:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4423-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4424:    *stream << "        <" << kProperty;
    %%%%%: 4424-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4424-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4425:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    %%%%%: 4425-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4425-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4425-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4425-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4425-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4425-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4425-block  6
call   20 never executed
    $$$$$: 4425-block  7
call   21 never executed
    $$$$$: 4425-block  8
call   22 never executed
    $$$$$: 4425-block  9
    $$$$$: 4425-block 10
    $$$$$: 4425-block 11
    #####: 4426:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4426-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4426-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4426-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4426-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4426-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4426-block  5
call   20 never executed
    $$$$$: 4426-block  6
call   21 never executed
    $$$$$: 4426-block  7
call   22 never executed
    $$$$$: 4426-block  8
    $$$$$: 4426-block  9
    $$$$$: 4426-block 10
    #####: 4427:    *stream << "/>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4428:  }
    #####: 4429:  *stream << "      </" << kProperties << ">\n";
    %%%%%: 4429-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4429-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4429-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4430:}
    %%%%%: 4430-block  0
    %%%%%: 4430-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4430-block  2
    %%%%%: 4430-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4430-block  4
call    6 never executed
    $$$$$: 4430-block  5
call    7 never executed
        -: 4431:
        -: 4432:// End XmlUnitTestResultPrinter
        -: 4433:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 4434:
        -: 4435:#if GTEST_HAS_FILE_SYSTEM
        -: 4436:// This class generates an JSON output file.
        -: 4437:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
        -: 4438: public:
        -: 4439:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 4440:
        -: 4441:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 4442:
        -: 4443:  // Prints an JSON summary of all unit tests.
        -: 4444:  static void PrintJsonTestList(::std::ostream* stream,
        -: 4445:                                const std::vector<TestSuite*>& test_suites);
        -: 4446:
        -: 4447: private:
        -: 4448:  // Returns an JSON-escaped copy of the input string str.
        -: 4449:  static std::string EscapeJson(const std::string& str);
        -: 4450:
        -: 4451:  //// Verifies that the given attribute belongs to the given element and
        -: 4452:  //// streams the attribute as JSON.
        -: 4453:  static void OutputJsonKey(std::ostream* stream,
        -: 4454:                            const std::string& element_name,
        -: 4455:                            const std::string& name, const std::string& value,
        -: 4456:                            const std::string& indent, bool comma = true);
        -: 4457:  static void OutputJsonKey(std::ostream* stream,
        -: 4458:                            const std::string& element_name,
        -: 4459:                            const std::string& name, int value,
        -: 4460:                            const std::string& indent, bool comma = true);
        -: 4461:
        -: 4462:  // Streams a test suite JSON stanza containing the given test result.
        -: 4463:  //
        -: 4464:  // Requires: result.Failed()
        -: 4465:  static void OutputJsonTestSuiteForTestResult(::std::ostream* stream,
        -: 4466:                                               const TestResult& result);
        -: 4467:
        -: 4468:  // Streams a JSON representation of a TestResult object.
        -: 4469:  static void OutputJsonTestResult(::std::ostream* stream,
        -: 4470:                                   const TestResult& result);
        -: 4471:
        -: 4472:  // Streams a JSON representation of a TestInfo object.
        -: 4473:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 4474:                                 const char* test_suite_name,
        -: 4475:                                 const TestInfo& test_info);
        -: 4476:
        -: 4477:  // Prints a JSON representation of a TestSuite object
        -: 4478:  static void PrintJsonTestSuite(::std::ostream* stream,
        -: 4479:                                 const TestSuite& test_suite);
        -: 4480:
        -: 4481:  // Prints a JSON summary of unit_test to output stream out.
        -: 4482:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 4483:                                const UnitTest& unit_test);
        -: 4484:
        -: 4485:  // Produces a string representing the test properties in a result as
        -: 4486:  // a JSON dictionary.
        -: 4487:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 4488:                                          const std::string& indent);
        -: 4489:
        -: 4490:  // The output file.
        -: 4491:  const std::string output_file_;
        -: 4492:
        -: 4493:  JsonUnitTestResultPrinter(const JsonUnitTestResultPrinter&) = delete;
        -: 4494:  JsonUnitTestResultPrinter& operator=(const JsonUnitTestResultPrinter&) =
        -: 4495:      delete;
        -: 4496:};
        -: 4497:
        -: 4498:// Creates a new JsonUnitTestResultPrinter.
function _ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4499:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 4500:    : output_file_(output_file) {
    %%%%%: 4500-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4500-block  1
call    5 never executed
    $$$$$: 4500-block  2
call    6 never executed
    $$$$$: 4500-block  3
    #####: 4501:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4502:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 4502-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4502-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4502-block  2
call    7 never executed
    $$$$$: 4502-block  3
call    8 never executed
    $$$$$: 4502-block  4
        -: 4503:  }
    #####: 4504:}
    %%%%%: 4504-block  0
    $$$$$: 4504-block  1
call    0 never executed
    $$$$$: 4504-block  2
call    1 never executed
        -: 4505:
function _ZN7testing8internal25JsonUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4506:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4507:                                                   int /*iteration*/) {
    #####: 4508:  FILE* jsonout = OpenFileForWriting(output_file_);
    %%%%%: 4508-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4509:  std::stringstream stream;
    %%%%%: 4509-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4510:  PrintJsonUnitTest(&stream, unit_test);
    %%%%%: 4510-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4511:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4511-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4511-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4511-block  2
call    7 never executed
    $$$$$: 4511-block  3
call    8 never executed
    $$$$$: 4511-block  4
    #####: 4512:  fclose(jsonout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4513:}
    %%%%%: 4513-block  0
call    0 never executed
    $$$$$: 4513-block  1
call    1 never executed
        -: 4514:
        -: 4515:// Returns an JSON-escaped copy of the input string str.
function _ZN7testing8internal25JsonUnitTestResultPrinter10EscapeJsonERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4516:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    #####: 4517:  Message m;
    %%%%%: 4517-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4518:
    #####: 4519:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4519-block  0
    %%%%%: 4519-block  1
    %%%%%: 4519-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4520:    const char ch = str[i];
    %%%%%: 4520-block  0
call    0 never executed
    #####: 4521:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4522:      case '\\':
        -: 4523:      case '"':
        -: 4524:      case '/':
    #####: 4525:        m << '\\' << ch;
    %%%%%: 4525-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4525-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4525-block  2
    #####: 4526:        break;
    %%%%%: 4526-block  0
    #####: 4527:      case '\b':
    #####: 4528:        m << "\\b";
    %%%%%: 4528-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4529:        break;
    %%%%%: 4529-block  0
    #####: 4530:      case '\t':
    #####: 4531:        m << "\\t";
    %%%%%: 4531-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4532:        break;
    %%%%%: 4532-block  0
    #####: 4533:      case '\n':
    #####: 4534:        m << "\\n";
    %%%%%: 4534-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4535:        break;
    %%%%%: 4535-block  0
    #####: 4536:      case '\f':
    #####: 4537:        m << "\\f";
    %%%%%: 4537-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4538:        break;
    %%%%%: 4538-block  0
    #####: 4539:      case '\r':
    #####: 4540:        m << "\\r";
    %%%%%: 4540-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4541:        break;
    %%%%%: 4541-block  0
    #####: 4542:      default:
    #####: 4543:        if (ch < ' ') {
    %%%%%: 4543-block  0
branch  0 never executed
branch  1 never executed
    #####: 4544:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    %%%%%: 4544-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4544-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4544-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4544-block  3
call    9 never executed
    $$$$$: 4544-block  4
call   10 never executed
    $$$$$: 4544-block  5
        -: 4545:        } else {
    #####: 4546:          m << ch;
    %%%%%: 4546-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4547:        }
    #####: 4548:        break;
    %%%%%: 4548-block  0
        -: 4549:    }
        -: 4550:  }
        -: 4551:
    #####: 4552:  return m.GetString();
    %%%%%: 4552-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4552-block  1
    #####: 4553:}
    %%%%%: 4553-block  0
call    0 never executed
    $$$$$: 4553-block  1
call    1 never executed
        -: 4554:
        -: 4555:// The following routines generate an JSON representation of a UnitTest
        -: 4556:// object.
        -: 4557:
        -: 4558:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internalL28FormatTimeInMillisAsDurationEl called 0 returned 0% blocks executed 0%
    #####: 4559:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    #####: 4560:  ::std::stringstream ss;
    %%%%%: 4560-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4561:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    %%%%%: 4561-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4561-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4562:  return ss.str();
    %%%%%: 4562-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4562-block  1
    #####: 4563:}
    %%%%%: 4563-block  0
call    0 never executed
    $$$$$: 4563-block  1
call    1 never executed
        -: 4564:
        -: 4565:// Converts the given epoch time in milliseconds to a date string in the
        -: 4566:// RFC3339 format, without the timezone information.
function _ZN7testing8internalL32FormatEpochTimeInMillisAsRFC3339El called 0 returned 0% blocks executed 0%
    #####: 4567:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
        -: 4568:  struct tm time_struct;
    #####: 4569:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4569-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4570:    return "";
    %%%%%: 4570-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4570-block  1
call    4 never executed
    $$$$$: 4570-block  2
call    5 never executed
    $$$$$: 4570-block  3
        -: 4571:  // YYYY-MM-DDThh:mm:ss
    #####: 4572:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4572-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4572-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4572-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4572-block  3
call   12 never executed
    $$$$$: 4572-block  4
call   13 never executed
    $$$$$: 4572-block  5
call   14 never executed
    $$$$$: 4572-block  6
    $$$$$: 4572-block  7
    $$$$$: 4572-block  8
    $$$$$: 4572-block  9
    #####: 4573:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4573-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4573-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4573-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4573-block  3
call   12 never executed
    $$$$$: 4573-block  4
call   13 never executed
    $$$$$: 4573-block  5
call   14 never executed
    $$$$$: 4573-block  6
    $$$$$: 4573-block  7
    $$$$$: 4573-block  8
    #####: 4574:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4574-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4574-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4574-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4574-block  3
call   12 never executed
    $$$$$: 4574-block  4
call   13 never executed
    $$$$$: 4574-block  5
call   14 never executed
    $$$$$: 4574-block  6
    $$$$$: 4574-block  7
    $$$$$: 4574-block  8
    #####: 4575:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4575-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4575-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4575-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4575-block  3
call   12 never executed
    $$$$$: 4575-block  4
call   13 never executed
    $$$$$: 4575-block  5
call   14 never executed
    $$$$$: 4575-block  6
    $$$$$: 4575-block  7
    $$$$$: 4575-block  8
    #####: 4576:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4576-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4576-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4576-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4576-block  3
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4576-block  4
call   12 never executed
    $$$$$: 4576-block  5
call   13 never executed
    $$$$$: 4576-block  6
call   14 never executed
    $$$$$: 4576-block  7
    $$$$$: 4576-block  8
    $$$$$: 4576-block  9
    #####: 4577:         String::FormatIntWidth2(time_struct.tm_sec) + "Z";
    %%%%%: 4577-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4577-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4577-block  2
call    7 never executed
    $$$$$: 4577-block  3
        -: 4578:}
        -: 4579:
function _ZN7testing8internalL6IndentEm called 0 returned 0% blocks executed 0%
    #####: 4580:static inline std::string Indent(size_t width) {
    #####: 4581:  return std::string(width, ' ');
    %%%%%: 4581-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4581-block  1
call    4 never executed
    %%%%%: 4581-block  2
    $$$$$: 4581-block  3
call    5 never executed
        -: 4582:}
        -: 4583:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_SA_b called 0 returned 0% blocks executed 0%
    #####: 4584:void JsonUnitTestResultPrinter::OutputJsonKey(std::ostream* stream,
        -: 4585:                                              const std::string& element_name,
        -: 4586:                                              const std::string& name,
        -: 4587:                                              const std::string& value,
        -: 4588:                                              const std::string& indent,
        -: 4589:                                              bool comma) {
        -: 4590:  const std::vector<std::string>& allowed_names =
    #####: 4591:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4591-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4592:
    #####: 4593:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4593-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4593-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4593-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4593-block  3
call   13 never executed
    %%%%%: 4593-block  4
call   14 never executed
    $$$$$: 4593-block  5
    $$$$$: 4593-block  6
    $$$$$: 4593-block  7
call   15 never executed
    $$$$$: 4593-block  8
        -: 4594:               allowed_names.end())
        -: 4595:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4596:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4596-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4596-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4596-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4596-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4596-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4597:
    #####: 4598:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    %%%%%: 4598-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4598-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4598-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4598-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4598-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4598-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4598-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4598-block  7
call   21 never executed
    $$$$$: 4598-block  8
call   22 never executed
    $$$$$: 4598-block  9
    #####: 4599:  if (comma) *stream << ",\n";
branch  0 never executed
branch  1 never executed
    %%%%%: 4599-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4600:}
    %%%%%: 4600-block  0
call    0 never executed
    $$$$$: 4600-block  1
call    1 never executed
        -: 4601:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_iSA_b called 0 returned 0% blocks executed 0%
    #####: 4602:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4603:    std::ostream* stream, const std::string& element_name,
        -: 4604:    const std::string& name, int value, const std::string& indent, bool comma) {
        -: 4605:  const std::vector<std::string>& allowed_names =
    #####: 4606:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4606-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4607:
    #####: 4608:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4608-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4608-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4608-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4608-block  3
call   13 never executed
    %%%%%: 4608-block  4
call   14 never executed
    $$$$$: 4608-block  5
    $$$$$: 4608-block  6
    $$$$$: 4608-block  7
call   15 never executed
    $$$$$: 4608-block  8
        -: 4609:               allowed_names.end())
        -: 4610:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4611:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4611-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4611-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4611-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4611-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4611-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4612:
    #####: 4613:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    %%%%%: 4613-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4613-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4613-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4613-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4613-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4613-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4613-block  6
call   18 never executed
    $$$$$: 4613-block  7
call   19 never executed
    $$$$$: 4613-block  8
    #####: 4614:  if (comma) *stream << ",\n";
branch  0 never executed
branch  1 never executed
    %%%%%: 4614-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4615:}
    %%%%%: 4615-block  0
call    0 never executed
    $$$$$: 4615-block  1
call    1 never executed
        -: 4616:
        -: 4617:// Streams a test suite JSON stanza containing the given test result.
function _ZN7testing8internal25JsonUnitTestResultPrinter32OutputJsonTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4618:void JsonUnitTestResultPrinter::OutputJsonTestSuiteForTestResult(
        -: 4619:    ::std::ostream* stream, const TestResult& result) {
        -: 4620:  // Output the boilerplate for a new test suite.
    #####: 4621:  *stream << Indent(4) << "{\n";
    %%%%%: 4621-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4621-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4621-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4621-block  3
call    9 never executed
    $$$$$: 4621-block  4
call   10 never executed
    $$$$$: 4621-block  5
call   11 never executed
    #####: 4622:  OutputJsonKey(stream, "testsuite", "name", "NonTestSuiteFailure", Indent(6));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4622-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4622-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4622-block  2
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4622-block  3
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4622-block  4
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4622-block  5
call   25 never executed
    $$$$$: 4622-block  6
call   26 never executed
    $$$$$: 4622-block  7
    $$$$$: 4622-block  8
    $$$$$: 4622-block  9
call   27 never executed
    $$$$$: 4622-block 10
call   28 never executed
    $$$$$: 4622-block 11
    $$$$$: 4622-block 12
    $$$$$: 4622-block 13
call   29 never executed
    $$$$$: 4622-block 14
call   30 never executed
    $$$$$: 4622-block 15
    $$$$$: 4622-block 16
    $$$$$: 4622-block 17
call   31 never executed
    $$$$$: 4622-block 18
call   32 never executed
    #####: 4623:  OutputJsonKey(stream, "testsuite", "tests", 1, Indent(6));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4623-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4623-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4623-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4623-block  3
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4623-block  4
call   19 never executed
    $$$$$: 4623-block  5
call   20 never executed
    $$$$$: 4623-block  6
    $$$$$: 4623-block  7
    $$$$$: 4623-block  8
call   21 never executed
    $$$$$: 4623-block  9
call   22 never executed
    $$$$$: 4623-block 10
    $$$$$: 4623-block 11
    $$$$$: 4623-block 12
call   23 never executed
    $$$$$: 4623-block 13
call   24 never executed
    #####: 4624:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4625:    OutputJsonKey(stream, "testsuite", "failures", 1, Indent(6));
    %%%%%: 4625-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4625-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4625-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4625-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4625-block  4
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4625-block  5
call   19 never executed
    $$$$$: 4625-block  6
call   20 never executed
    $$$$$: 4625-block  7
    $$$$$: 4625-block  8
    $$$$$: 4625-block  9
call   21 never executed
    $$$$$: 4625-block 10
call   22 never executed
    $$$$$: 4625-block 11
    $$$$$: 4625-block 12
    $$$$$: 4625-block 13
call   23 never executed
    $$$$$: 4625-block 14
call   24 never executed
    #####: 4626:    OutputJsonKey(stream, "testsuite", "disabled", 0, Indent(6));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4626-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4626-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4626-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4626-block  3
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4626-block  4
call   19 never executed
    $$$$$: 4626-block  5
call   20 never executed
    $$$$$: 4626-block  6
    $$$$$: 4626-block  7
    $$$$$: 4626-block  8
call   21 never executed
    $$$$$: 4626-block  9
call   22 never executed
    $$$$$: 4626-block 10
    $$$$$: 4626-block 11
    $$$$$: 4626-block 12
call   23 never executed
    $$$$$: 4626-block 13
call   24 never executed
    #####: 4627:    OutputJsonKey(stream, "testsuite", "skipped", 0, Indent(6));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4627-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4627-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4627-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4627-block  3
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4627-block  4
call   19 never executed
    $$$$$: 4627-block  5
call   20 never executed
    $$$$$: 4627-block  6
    $$$$$: 4627-block  7
    $$$$$: 4627-block  8
call   21 never executed
    $$$$$: 4627-block  9
call   22 never executed
    $$$$$: 4627-block 10
    $$$$$: 4627-block 11
    $$$$$: 4627-block 12
call   23 never executed
    $$$$$: 4627-block 13
call   24 never executed
    #####: 4628:    OutputJsonKey(stream, "testsuite", "errors", 0, Indent(6));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4628-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4628-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4628-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4628-block  3
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4628-block  4
call   19 never executed
    $$$$$: 4628-block  5
call   20 never executed
    $$$$$: 4628-block  6
    $$$$$: 4628-block  7
    $$$$$: 4628-block  8
call   21 never executed
    $$$$$: 4628-block  9
call   22 never executed
    $$$$$: 4628-block 10
    $$$$$: 4628-block 11
    $$$$$: 4628-block 12
call   23 never executed
    $$$$$: 4628-block 13
call   24 never executed
    #####: 4629:    OutputJsonKey(stream, "testsuite", "time",
    %%%%%: 4629-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4629-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4629-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4629-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4629-block  4
call   15 never executed
    $$$$$: 4629-block  5
call   16 never executed
    $$$$$: 4629-block  6
    $$$$$: 4629-block  7
    $$$$$: 4629-block  8
call   17 never executed
    $$$$$: 4629-block  9
call   18 never executed
    $$$$$: 4629-block 10
    $$$$$: 4629-block 11
    #####: 4630:                  FormatTimeInMillisAsDuration(result.elapsed_time()),
    %%%%%: 4630-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4630-block  1
call    5 never executed
    $$$$$: 4630-block  2
    #####: 4631:                  Indent(6));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 4631-block  0
call    4 never executed
    $$$$$: 4631-block  1
call    5 never executed
    #####: 4632:    OutputJsonKey(stream, "testsuite", "timestamp",
    %%%%%: 4632-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4632-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4632-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4632-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4632-block  4
call   15 never executed
    $$$$$: 4632-block  5
call   16 never executed
    $$$$$: 4632-block  6
    $$$$$: 4632-block  7
    $$$$$: 4632-block  8
call   17 never executed
    $$$$$: 4632-block  9
call   18 never executed
    $$$$$: 4632-block 10
    $$$$$: 4632-block 11
    #####: 4633:                  FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
    %%%%%: 4633-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4633-block  1
call    5 never executed
    $$$$$: 4633-block  2
    #####: 4634:                  Indent(6));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 4634-block  0
call    4 never executed
    $$$$$: 4634-block  1
call    5 never executed
        -: 4635:  }
    #####: 4636:  *stream << Indent(6) << "\"testsuite\": [\n";
    %%%%%: 4636-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4636-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4636-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4636-block  3
call    9 never executed
    $$$$$: 4636-block  4
call   10 never executed
    $$$$$: 4636-block  5
call   11 never executed
        -: 4637:
        -: 4638:  // Output the boilerplate for a new test case.
    #####: 4639:  *stream << Indent(8) << "{\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4639-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4639-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4639-block  2
call    9 never executed
    $$$$$: 4639-block  3
call   10 never executed
    $$$$$: 4639-block  4
call   11 never executed
    #####: 4640:  OutputJsonKey(stream, "testcase", "name", "", Indent(10));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4640-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4640-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4640-block  2
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4640-block  3
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4640-block  4
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4640-block  5
call   25 never executed
    $$$$$: 4640-block  6
call   26 never executed
    $$$$$: 4640-block  7
    $$$$$: 4640-block  8
    $$$$$: 4640-block  9
call   27 never executed
    $$$$$: 4640-block 10
call   28 never executed
    $$$$$: 4640-block 11
    $$$$$: 4640-block 12
    $$$$$: 4640-block 13
call   29 never executed
    $$$$$: 4640-block 14
call   30 never executed
    $$$$$: 4640-block 15
    $$$$$: 4640-block 16
    $$$$$: 4640-block 17
call   31 never executed
    $$$$$: 4640-block 18
call   32 never executed
    #####: 4641:  OutputJsonKey(stream, "testcase", "status", "RUN", Indent(10));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4641-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4641-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4641-block  2
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4641-block  3
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4641-block  4
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4641-block  5
call   25 never executed
    $$$$$: 4641-block  6
call   26 never executed
    $$$$$: 4641-block  7
    $$$$$: 4641-block  8
    $$$$$: 4641-block  9
call   27 never executed
    $$$$$: 4641-block 10
call   28 never executed
    $$$$$: 4641-block 11
    $$$$$: 4641-block 12
    $$$$$: 4641-block 13
call   29 never executed
    $$$$$: 4641-block 14
call   30 never executed
    $$$$$: 4641-block 15
    $$$$$: 4641-block 16
    $$$$$: 4641-block 17
call   31 never executed
    $$$$$: 4641-block 18
call   32 never executed
    #####: 4642:  OutputJsonKey(stream, "testcase", "result", "COMPLETED", Indent(10));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4642-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4642-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4642-block  2
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4642-block  3
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4642-block  4
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4642-block  5
call   25 never executed
    $$$$$: 4642-block  6
call   26 never executed
    $$$$$: 4642-block  7
    $$$$$: 4642-block  8
    $$$$$: 4642-block  9
call   27 never executed
    $$$$$: 4642-block 10
call   28 never executed
    $$$$$: 4642-block 11
    $$$$$: 4642-block 12
    $$$$$: 4642-block 13
call   29 never executed
    $$$$$: 4642-block 14
call   30 never executed
    $$$$$: 4642-block 15
    $$$$$: 4642-block 16
    $$$$$: 4642-block 17
call   31 never executed
    $$$$$: 4642-block 18
call   32 never executed
    #####: 4643:  OutputJsonKey(stream, "testcase", "timestamp",
    %%%%%: 4643-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4643-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4643-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4643-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4643-block  4
call   15 never executed
    $$$$$: 4643-block  5
call   16 never executed
    $$$$$: 4643-block  6
    $$$$$: 4643-block  7
    $$$$$: 4643-block  8
call   17 never executed
    $$$$$: 4643-block  9
call   18 never executed
    $$$$$: 4643-block 10
    $$$$$: 4643-block 11
    #####: 4644:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
    %%%%%: 4644-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4644-block  1
call    5 never executed
    $$$$$: 4644-block  2
    #####: 4645:                Indent(10));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 4645-block  0
call    4 never executed
    $$$$$: 4645-block  1
call    5 never executed
    #####: 4646:  OutputJsonKey(stream, "testcase", "time",
    %%%%%: 4646-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4646-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4646-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4646-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4646-block  4
call   15 never executed
    $$$$$: 4646-block  5
call   16 never executed
    $$$$$: 4646-block  6
    $$$$$: 4646-block  7
    $$$$$: 4646-block  8
call   17 never executed
    $$$$$: 4646-block  9
call   18 never executed
    $$$$$: 4646-block 10
    $$$$$: 4646-block 11
    #####: 4647:                FormatTimeInMillisAsDuration(result.elapsed_time()),
    %%%%%: 4647-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4647-block  1
call    5 never executed
    $$$$$: 4647-block  2
    #####: 4648:                Indent(10));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 4648-block  0
call    4 never executed
    $$$$$: 4648-block  1
call    5 never executed
    #####: 4649:  OutputJsonKey(stream, "testcase", "classname", "", Indent(10), false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4649-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4649-block  1
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4649-block  2
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4649-block  3
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4649-block  4
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4649-block  5
call   25 never executed
    $$$$$: 4649-block  6
call   26 never executed
    $$$$$: 4649-block  7
    $$$$$: 4649-block  8
    $$$$$: 4649-block  9
call   27 never executed
    $$$$$: 4649-block 10
call   28 never executed
    $$$$$: 4649-block 11
    $$$$$: 4649-block 12
    $$$$$: 4649-block 13
call   29 never executed
    $$$$$: 4649-block 14
call   30 never executed
    $$$$$: 4649-block 15
    $$$$$: 4649-block 16
    $$$$$: 4649-block 17
call   31 never executed
    $$$$$: 4649-block 18
call   32 never executed
    #####: 4650:  *stream << TestPropertiesAsJson(result, Indent(10));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4650-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4650-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4650-block  2
call    9 never executed
call   10 never executed
    $$$$$: 4650-block  3
call   11 never executed
    $$$$$: 4650-block  4
call   12 never executed
    $$$$$: 4650-block  5
    $$$$$: 4650-block  6
call   13 never executed
        -: 4651:
        -: 4652:  // Output the actual test result.
    #####: 4653:  OutputJsonTestResult(stream, result);
call    0 never executed
        -: 4654:
        -: 4655:  // Finish the test suite.
    #####: 4656:  *stream << "\n" << Indent(6) << "]\n" << Indent(4) << "}";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4656-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4656-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4656-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4656-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4656-block  4
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4656-block  5
call   19 never executed
call   20 never executed
    $$$$$: 4656-block  6
call   21 never executed
    $$$$$: 4656-block  7
    $$$$$: 4656-block  8
call   22 never executed
    #####: 4657:}
        -: 4658:
        -: 4659:// Prints a JSON representation of a TestInfo object.
function _ZN7testing8internal25JsonUnitTestResultPrinter18OutputJsonTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4660:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
        -: 4661:                                                   const char* test_suite_name,
        -: 4662:                                                   const TestInfo& test_info) {
    #####: 4663:  const TestResult& result = *test_info.result();
    %%%%%: 4663-block  0
call    0 never executed
    #####: 4664:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4664-block  0
call    4 never executed
    $$$$$: 4664-block  1
call    5 never executed
    $$$$$: 4664-block  2
    #####: 4665:  const std::string kIndent = Indent(10);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4666:
    #####: 4667:  *stream << Indent(8) << "{\n";
    %%%%%: 4667-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4667-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4667-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4667-block  3
call    9 never executed
    $$$$$: 4667-block  4
call   10 never executed
    $$$$$: 4667-block  5
    #####: 4668:  OutputJsonKey(stream, kTestsuite, "name", test_info.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4668-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4668-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4668-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4668-block  3
call   16 never executed
    $$$$$: 4668-block  4
call   17 never executed
    $$$$$: 4668-block  5
    $$$$$: 4668-block  6
    $$$$$: 4668-block  7
call   18 never executed
    $$$$$: 4668-block  8
call   19 never executed
    $$$$$: 4668-block  9
    $$$$$: 4668-block 10
        -: 4669:
    #####: 4670:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4671:    OutputJsonKey(stream, kTestsuite, "value_param", test_info.value_param(),
    %%%%%: 4671-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4671-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4671-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4671-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4671-block  4
call   16 never executed
    $$$$$: 4671-block  5
call   17 never executed
    $$$$$: 4671-block  6
    $$$$$: 4671-block  7
    $$$$$: 4671-block  8
call   18 never executed
    $$$$$: 4671-block  9
call   19 never executed
    $$$$$: 4671-block 10
    $$$$$: 4671-block 11
        -: 4672:                  kIndent);
        -: 4673:  }
    #####: 4674:  if (test_info.type_param() != nullptr) {
    %%%%%: 4674-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4675:    OutputJsonKey(stream, kTestsuite, "type_param", test_info.type_param(),
    %%%%%: 4675-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4675-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4675-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4675-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4675-block  4
call   16 never executed
    $$$$$: 4675-block  5
call   17 never executed
    $$$$$: 4675-block  6
    $$$$$: 4675-block  7
    $$$$$: 4675-block  8
call   18 never executed
    $$$$$: 4675-block  9
call   19 never executed
    $$$$$: 4675-block 10
    $$$$$: 4675-block 11
        -: 4676:                  kIndent);
        -: 4677:  }
        -: 4678:
    #####: 4679:  OutputJsonKey(stream, kTestsuite, "file", test_info.file(), kIndent);
    %%%%%: 4679-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4679-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4679-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4679-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4679-block  4
call   16 never executed
    $$$$$: 4679-block  5
call   17 never executed
    $$$$$: 4679-block  6
    $$$$$: 4679-block  7
    $$$$$: 4679-block  8
call   18 never executed
    $$$$$: 4679-block  9
call   19 never executed
    $$$$$: 4679-block 10
    $$$$$: 4679-block 11
    #####: 4680:  OutputJsonKey(stream, kTestsuite, "line", test_info.line(), kIndent, false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4680-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4680-block  1
call    8 never executed
call    9 never executed
    $$$$$: 4680-block  2
call   10 never executed
    $$$$$: 4680-block  3
call   11 never executed
    $$$$$: 4680-block  4
    $$$$$: 4680-block  5
    #####: 4681:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4682:    *stream << "\n" << Indent(8) << "}";
    %%%%%: 4682-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4682-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4682-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4682-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4682-block  4
call   12 never executed
    $$$$$: 4682-block  5
call   13 never executed
    $$$$$: 4682-block  6
    #####: 4683:    return;
        -: 4684:  } else {
    #####: 4685:    *stream << ",\n";
    %%%%%: 4685-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4686:  }
        -: 4687:
    #####: 4688:  OutputJsonKey(stream, kTestsuite, "status",
    %%%%%: 4688-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4688-block  1
    %%%%%: 4688-block  2
    %%%%%: 4688-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4688-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4688-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4688-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4688-block  7
call   17 never executed
    $$$$$: 4688-block  8
call   18 never executed
    $$$$$: 4688-block  9
    $$$$$: 4688-block 10
    $$$$$: 4688-block 11
call   19 never executed
    $$$$$: 4688-block 12
call   20 never executed
    $$$$$: 4688-block 13
    $$$$$: 4688-block 14
    #####: 4689:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
call    0 never executed
    #####: 4690:  OutputJsonKey(stream, kTestsuite, "result",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4690-block  0
    %%%%%: 4690-block  1
    %%%%%: 4690-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4690-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4690-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4690-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4690-block  6
call   17 never executed
    $$$$$: 4690-block  7
call   18 never executed
    $$$$$: 4690-block  8
    $$$$$: 4690-block  9
    $$$$$: 4690-block 10
call   19 never executed
    $$$$$: 4690-block 11
call   20 never executed
    $$$$$: 4690-block 12
    $$$$$: 4690-block 13
    #####: 4691:                test_info.should_run()
call    0 never executed
    #####: 4692:                    ? (result.Skipped() ? "SKIPPED" : "COMPLETED")
    %%%%%: 4692-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4692-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4692-block  2
    %%%%%: 4692-block  3
        -: 4693:                    : "SUPPRESSED",
        -: 4694:                kIndent);
    #####: 4695:  OutputJsonKey(stream, kTestsuite, "timestamp",
    %%%%%: 4695-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4695-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4695-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4695-block  3
call    9 never executed
    $$$$$: 4695-block  4
call   10 never executed
    $$$$$: 4695-block  5
    $$$$$: 4695-block  6
    #####: 4696:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4696-block  0
call    5 never executed
    $$$$$: 4696-block  1
        -: 4697:                kIndent);
    #####: 4698:  OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4698-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4698-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4698-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4698-block  3
call    9 never executed
    $$$$$: 4698-block  4
call   10 never executed
    $$$$$: 4698-block  5
    $$$$$: 4698-block  6
    #####: 4699:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4699-block  0
call    5 never executed
    $$$$$: 4699-block  1
    #####: 4700:  OutputJsonKey(stream, kTestsuite, "classname", test_suite_name, kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4700-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4700-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4700-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4700-block  3
call   15 never executed
    $$$$$: 4700-block  4
call   16 never executed
    $$$$$: 4700-block  5
    $$$$$: 4700-block  6
    $$$$$: 4700-block  7
call   17 never executed
    $$$$$: 4700-block  8
call   18 never executed
    $$$$$: 4700-block  9
    $$$$$: 4700-block 10
        -: 4701:                false);
    #####: 4702:  *stream << TestPropertiesAsJson(result, kIndent);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4702-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4702-block  1
call    6 never executed
    $$$$$: 4702-block  2
call    7 never executed
    $$$$$: 4702-block  3
        -: 4703:
    #####: 4704:  OutputJsonTestResult(stream, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4705:}
    %%%%%: 4705-block  0
    %%%%%: 4705-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4705-block  2
    %%%%%: 4705-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4705-block  4
call    6 never executed
    $$$$$: 4705-block  5
call    7 never executed
        -: 4706:
function _ZN7testing8internal25JsonUnitTestResultPrinter20OutputJsonTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4707:void JsonUnitTestResultPrinter::OutputJsonTestResult(::std::ostream* stream,
        -: 4708:                                                     const TestResult& result) {
    #####: 4709:  const std::string kIndent = Indent(10);
    %%%%%: 4709-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4710:
    #####: 4711:  int failures = 0;
    #####: 4712:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4712-block  0
    %%%%%: 4712-block  1
    %%%%%: 4712-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4713:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4713-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4714:    if (part.failed()) {
    %%%%%: 4714-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4715:      *stream << ",\n";
    %%%%%: 4715-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4716:      if (++failures == 1) {
    %%%%%: 4716-block  0
branch  0 never executed
branch  1 never executed
        -: 4717:        *stream << kIndent << "\""
        -: 4718:                << "failures"
    #####: 4719:                << "\": [\n";
    %%%%%: 4719-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4719-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4719-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4719-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4720:      }
        -: 4721:      const std::string location =
        -: 4722:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4723:                                                          part.line_number());
    %%%%%: 4723-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4724:      const std::string message = EscapeJson(location + "\n" + part.message());
    %%%%%: 4724-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4724-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4724-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4724-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4724-block  4
call   12 never executed
    $$$$$: 4724-block  5
call   13 never executed
    $$$$$: 4724-block  6
    $$$$$: 4724-block  7
        -: 4725:      *stream << kIndent << "  {\n"
        -: 4726:              << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 4727:              << kIndent << "    \"type\": \"\"\n"
    #####: 4728:              << kIndent << "  }";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4728-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4728-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4728-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4728-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4728-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4728-block  5
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4728-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4728-block  7
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%: 4728-block  8
call   27 never executed
branch 28 never executed
branch 29 never executed
    #####: 4729:    }
    %%%%%: 4729-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4729-block  1
call    2 never executed
    $$$$$: 4729-block  2
call    3 never executed
        -: 4730:  }
        -: 4731:
    #####: 4732:  if (failures > 0) *stream << "\n" << kIndent << "]";
    %%%%%: 4732-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4732-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4732-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4732-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 4733:  *stream << "\n" << Indent(8) << "}";
    %%%%%: 4733-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4733-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4733-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4733-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4733-block  4
call   12 never executed
    $$$$$: 4733-block  5
call   13 never executed
    $$$$$: 4733-block  6
    #####: 4734:}
call    0 never executed
    $$$$$: 4734-block  0
call    1 never executed
        -: 4735:
        -: 4736:// Prints an JSON representation of a TestSuite object
function _ZN7testing8internal25JsonUnitTestResultPrinter18PrintJsonTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4737:void JsonUnitTestResultPrinter::PrintJsonTestSuite(
        -: 4738:    std::ostream* stream, const TestSuite& test_suite) {
    #####: 4739:  const std::string kTestsuite = "testsuite";
    %%%%%: 4739-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4739-block  1
call    4 never executed
    $$$$$: 4739-block  2
call    5 never executed
    $$$$$: 4739-block  3
    #####: 4740:  const std::string kIndent = Indent(6);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4741:
    #####: 4742:  *stream << Indent(4) << "{\n";
    %%%%%: 4742-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4742-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4742-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4742-block  3
call    9 never executed
    $$$$$: 4742-block  4
call   10 never executed
    $$$$$: 4742-block  5
    #####: 4743:  OutputJsonKey(stream, kTestsuite, "name", test_suite.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4743-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4743-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4743-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4743-block  3
call   16 never executed
    $$$$$: 4743-block  4
call   17 never executed
    $$$$$: 4743-block  5
    $$$$$: 4743-block  6
    $$$$$: 4743-block  7
call   18 never executed
    $$$$$: 4743-block  8
call   19 never executed
    $$$$$: 4743-block  9
    $$$$$: 4743-block 10
    #####: 4744:  OutputJsonKey(stream, kTestsuite, "tests", test_suite.reportable_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4744-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4744-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4744-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4744-block  3
call   12 never executed
    $$$$$: 4744-block  4
call   13 never executed
    $$$$$: 4744-block  5
    $$$$$: 4744-block  6
        -: 4745:                kIndent);
    #####: 4746:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4747:    OutputJsonKey(stream, kTestsuite, "failures",
    %%%%%: 4747-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4747-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4747-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4747-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4747-block  4
call   12 never executed
    $$$$$: 4747-block  5
call   13 never executed
    $$$$$: 4747-block  6
    $$$$$: 4747-block  7
        -: 4748:                  test_suite.failed_test_count(), kIndent);
    #####: 4749:    OutputJsonKey(stream, kTestsuite, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4749-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4749-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4749-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4749-block  3
call   12 never executed
    $$$$$: 4749-block  4
call   13 never executed
    $$$$$: 4749-block  5
    $$$$$: 4749-block  6
        -: 4750:                  test_suite.reportable_disabled_test_count(), kIndent);
    #####: 4751:    OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4751-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4751-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4751-block  2
call    9 never executed
    $$$$$: 4751-block  3
call   10 never executed
    $$$$$: 4751-block  4
    $$$$$: 4751-block  5
    #####: 4752:    OutputJsonKey(
    %%%%%: 4752-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4752-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4752-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4752-block  3
call    9 never executed
    $$$$$: 4752-block  4
call   10 never executed
    $$$$$: 4752-block  5
    $$$$$: 4752-block  6
        -: 4753:        stream, kTestsuite, "timestamp",
    #####: 4754:        FormatEpochTimeInMillisAsRFC3339(test_suite.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4754-block  0
call    5 never executed
    $$$$$: 4754-block  1
        -: 4755:        kIndent);
    #####: 4756:    OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4756-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4756-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4756-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4756-block  3
call    9 never executed
    $$$$$: 4756-block  4
call   10 never executed
    $$$$$: 4756-block  5
    $$$$$: 4756-block  6
    #####: 4757:                  FormatTimeInMillisAsDuration(test_suite.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4757-block  0
call    5 never executed
    $$$$$: 4757-block  1
        -: 4758:                  kIndent, false);
    #####: 4759:    *stream << TestPropertiesAsJson(test_suite.ad_hoc_test_result(), kIndent)
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4759-block  0
call    3 never executed
    $$$$$: 4759-block  1
call    4 never executed
    $$$$$: 4759-block  2
    #####: 4760:            << ",\n";
call    0 never executed
    %%%%%: 4760-block  0
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4760-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4761:  }
        -: 4762:
    #####: 4763:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
    %%%%%: 4763-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4763-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4763-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4763-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4764:
    #####: 4765:  bool comma = false;
    #####: 4766:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4766-block  0
    %%%%%: 4766-block  1
    %%%%%: 4766-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4767:    if (test_suite.GetTestInfo(i)->is_reportable()) {
    %%%%%: 4767-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4767-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4768:      if (comma) {
    %%%%%: 4768-block  0
branch  0 never executed
branch  1 never executed
    #####: 4769:        *stream << ",\n";
    %%%%%: 4769-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4770:      } else {
    #####: 4771:        comma = true;
    %%%%%: 4771-block  0
        -: 4772:      }
    #####: 4773:      OutputJsonTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4773-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4773-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4774:    }
        -: 4775:  }
    #####: 4776:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    %%%%%: 4776-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4776-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4776-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4776-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4776-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4776-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4776-block  6
call   18 never executed
    $$$$$: 4776-block  7
call   19 never executed
    $$$$$: 4776-block  8
    #####: 4777:}
call    0 never executed
call    1 never executed
    $$$$$: 4777-block  0
call    2 never executed
    $$$$$: 4777-block  1
call    3 never executed
        -: 4778:
        -: 4779:// Prints a JSON summary of unit_test to output stream out.
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4780:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
        -: 4781:                                                  const UnitTest& unit_test) {
    #####: 4782:  const std::string kTestsuites = "testsuites";
    %%%%%: 4782-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4782-block  1
call    4 never executed
    $$$$$: 4782-block  2
call    5 never executed
    $$$$$: 4782-block  3
    #####: 4783:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4784:  *stream << "{\n";
    %%%%%: 4784-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4785:
    #####: 4786:  OutputJsonKey(stream, kTestsuites, "tests", unit_test.reportable_test_count(),
    %%%%%: 4786-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4786-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4786-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4786-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4786-block  4
call   12 never executed
    $$$$$: 4786-block  5
call   13 never executed
    $$$$$: 4786-block  6
    $$$$$: 4786-block  7
        -: 4787:                kIndent);
    #####: 4788:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4788-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4788-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4788-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4788-block  3
call   12 never executed
    $$$$$: 4788-block  4
call   13 never executed
    $$$$$: 4788-block  5
    $$$$$: 4788-block  6
        -: 4789:                kIndent);
    #####: 4790:  OutputJsonKey(stream, kTestsuites, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4790-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4790-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4790-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4790-block  3
call   12 never executed
    $$$$$: 4790-block  4
call   13 never executed
    $$$$$: 4790-block  5
    $$$$$: 4790-block  6
        -: 4791:                unit_test.reportable_disabled_test_count(), kIndent);
    #####: 4792:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4792-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4792-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4792-block  2
call    9 never executed
    $$$$$: 4792-block  3
call   10 never executed
    $$$$$: 4792-block  4
    $$$$$: 4792-block  5
    #####: 4793:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4794:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    %%%%%: 4794-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4794-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4794-block  2
call    8 never executed
call    9 never executed
    $$$$$: 4794-block  3
call   10 never executed
    $$$$$: 4794-block  4
call   11 never executed
    $$$$$: 4794-block  5
    $$$$$: 4794-block  6
        -: 4795:                  kIndent);
        -: 4796:  }
    #####: 4797:  OutputJsonKey(stream, kTestsuites, "timestamp",
    %%%%%: 4797-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4797-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4797-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4797-block  3
call    9 never executed
    $$$$$: 4797-block  4
call   10 never executed
    $$$$$: 4797-block  5
    $$$$$: 4797-block  6
    #####: 4798:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    %%%%%: 4798-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4798-block  1
call    5 never executed
    $$$$$: 4798-block  2
        -: 4799:                kIndent);
    #####: 4800:  OutputJsonKey(stream, kTestsuites, "time",
    %%%%%: 4800-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4800-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4800-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4800-block  3
call    9 never executed
    $$$$$: 4800-block  4
call   10 never executed
    $$$$$: 4800-block  5
    $$$$$: 4800-block  6
    #####: 4801:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4801-block  0
call    5 never executed
    $$$$$: 4801-block  1
        -: 4802:                false);
        -: 4803:
    #####: 4804:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4804-block  0
call    3 never executed
    $$$$$: 4804-block  1
call    4 never executed
    $$$$$: 4804-block  2
    #####: 4805:          << ",\n";
call    0 never executed
    %%%%%: 4805-block  0
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4805-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4806:
    #####: 4807:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4807-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4807-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4807-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4807-block  3
call   15 never executed
    $$$$$: 4807-block  4
call   16 never executed
    $$$$$: 4807-block  5
    $$$$$: 4807-block  6
    $$$$$: 4807-block  7
call   17 never executed
    $$$$$: 4807-block  8
call   18 never executed
    $$$$$: 4807-block  9
    $$$$$: 4807-block 10
    #####: 4808:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4808-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4808-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4808-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4809:
    #####: 4810:  bool comma = false;
    #####: 4811:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4811-block  0
    %%%%%: 4811-block  1
    %%%%%: 4811-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4812:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0) {
    %%%%%: 4812-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4812-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4812-block  2
branch  6 never executed
branch  7 never executed
    #####: 4813:      if (comma) {
    %%%%%: 4813-block  0
branch  0 never executed
branch  1 never executed
    #####: 4814:        *stream << ",\n";
    %%%%%: 4814-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4815:      } else {
    #####: 4816:        comma = true;
    %%%%%: 4816-block  0
        -: 4817:      }
    #####: 4818:      PrintJsonTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4818-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4818-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4819:    }
        -: 4820:  }
        -: 4821:
        -: 4822:  // If there was a test failure outside of one of the test suites (like in a
        -: 4823:  // test environment) include that in the output.
    #####: 4824:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4824-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4824-block  1
branch  4 never executed
branch  5 never executed
    #####: 4825:    if (comma) {
    %%%%%: 4825-block  0
branch  0 never executed
branch  1 never executed
    #####: 4826:      *stream << ",\n";
    %%%%%: 4826-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4827:    }
    #####: 4828:    OutputJsonTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4828-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4829:  }
        -: 4830:
        -: 4831:  *stream << "\n"
        -: 4832:          << kIndent << "]\n"
    #####: 4833:          << "}\n";
    %%%%%: 4833-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4833-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4833-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4833-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4834:}
    %%%%%: 4834-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4834-block  1
call    2 never executed
    $$$$$: 4834-block  2
call    3 never executed
        -: 4835:
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4836:void JsonUnitTestResultPrinter::PrintJsonTestList(
        -: 4837:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4838:  const std::string kTestsuites = "testsuites";
    %%%%%: 4838-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4838-block  1
call    4 never executed
    $$$$$: 4838-block  2
call    5 never executed
    $$$$$: 4838-block  3
    #####: 4839:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4840:  *stream << "{\n";
    %%%%%: 4840-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4841:  int total_tests = 0;
    #####: 4842:  for (auto test_suite : test_suites) {
    %%%%%: 4842-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4842-block  1
call    2 never executed
    %%%%%: 4842-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4843:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4844:  }
    #####: 4845:  OutputJsonKey(stream, kTestsuites, "tests", total_tests, kIndent);
    %%%%%: 4845-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4845-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4845-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4845-block  3
call    9 never executed
    $$$$$: 4845-block  4
call   10 never executed
    $$$$$: 4845-block  5
    $$$$$: 4845-block  6
        -: 4846:
    #####: 4847:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4847-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4847-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4847-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4847-block  3
call   15 never executed
    $$$$$: 4847-block  4
call   16 never executed
    $$$$$: 4847-block  5
    $$$$$: 4847-block  6
    $$$$$: 4847-block  7
call   17 never executed
    $$$$$: 4847-block  8
call   18 never executed
    $$$$$: 4847-block  9
    $$$$$: 4847-block 10
    #####: 4848:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4848-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4848-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4848-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4849:
    #####: 4850:  for (size_t i = 0; i < test_suites.size(); ++i) {
    %%%%%: 4850-block  0
    %%%%%: 4850-block  1
    %%%%%: 4850-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4851:    if (i != 0) {
    %%%%%: 4851-block  0
branch  0 never executed
branch  1 never executed
    #####: 4852:      *stream << ",\n";
    %%%%%: 4852-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4853:    }
    #####: 4854:    PrintJsonTestSuite(stream, *test_suites[i]);
    %%%%%: 4854-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4855:  }
        -: 4856:
        -: 4857:  *stream << "\n"
        -: 4858:          << kIndent << "]\n"
    #####: 4859:          << "}\n";
    %%%%%: 4859-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4859-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4859-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4859-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4860:}
    %%%%%: 4860-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4860-block  1
call    2 never executed
    $$$$$: 4860-block  2
call    3 never executed
        -: 4861:// Produces a string representing the test properties in a result as
        -: 4862:// a JSON dictionary.
function _ZN7testing8internal25JsonUnitTestResultPrinter20TestPropertiesAsJsonERKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4863:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
        -: 4864:    const TestResult& result, const std::string& indent) {
    #####: 4865:  Message attributes;
    %%%%%: 4865-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4866:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4866-block  0
    %%%%%: 4866-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4867:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4867-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4868:    attributes << ",\n"
    %%%%%: 4868-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4869:               << indent << "\"" << property.key() << "\": "
    %%%%%: 4869-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4869-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4869-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4869-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 4869-block  4
    #####: 4870:               << "\"" << EscapeJson(property.value()) << "\"";
    %%%%%: 4870-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4870-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4870-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4870-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4870-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4870-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4870-block  6
call   20 never executed
    $$$$$: 4870-block  7
call   21 never executed
    $$$$$: 4870-block  8
call   22 never executed
    $$$$$: 4870-block  9
    $$$$$: 4870-block 10
    $$$$$: 4870-block 11
        -: 4871:  }
    #####: 4872:  return attributes.GetString();
    %%%%%: 4872-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4872-block  1
    #####: 4873:}
    %%%%%: 4873-block  0
call    0 never executed
    $$$$$: 4873-block  1
call    1 never executed
        -: 4874:
        -: 4875:// End JsonUnitTestResultPrinter
        -: 4876:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 4877:
        -: 4878:#if GTEST_CAN_STREAM_RESULTS_
        -: 4879:
        -: 4880:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 4881:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 4882:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 4883:// in both time and space -- important as the input str may contain an
        -: 4884:// arbitrarily long test failure message and stack trace.
function _ZN7testing8internal17StreamingListener9UrlEncodeB5cxx11EPKc called 0 returned 0% blocks executed 0%
    #####: 4885:std::string StreamingListener::UrlEncode(const char* str) {
    #####: 4886:  std::string result;
    %%%%%: 4886-block  0
call    0 never executed
    #####: 4887:  result.reserve(strlen(str) + 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4888:  for (char ch = *str; ch != '\0'; ch = *++str) {
    %%%%%: 4888-block  0
    %%%%%: 4888-block  1
    %%%%%: 4888-block  2
branch  0 never executed
branch  1 never executed
    #####: 4889:    switch (ch) {
    %%%%%: 4889-block  0
branch  0 never executed
branch  1 never executed
    #####: 4890:      case '%':
        -: 4891:      case '=':
        -: 4892:      case '&':
        -: 4893:      case '\n':
    #####: 4894:        result.push_back('%');
    %%%%%: 4894-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4895:        result.append(String::FormatByte(static_cast<unsigned char>(ch)));
    %%%%%: 4895-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4895-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4895-block  2
call    6 never executed
    $$$$$: 4895-block  3
call    7 never executed
    $$$$$: 4895-block  4
    #####: 4896:        break;
    #####: 4897:      default:
    #####: 4898:        result.push_back(ch);
    %%%%%: 4898-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4899:        break;
    %%%%%: 4899-block  0
        -: 4900:    }
        -: 4901:  }
    #####: 4902:  return result;
    %%%%%: 4902-block  0
    %%%%%: 4902-block  1
    =====: 4903:}
    $$$$$: 4903-block  0
call    0 never executed
        -: 4904:
function _ZN7testing8internal17StreamingListener12SocketWriter14MakeConnectionEv called 0 returned 0% blocks executed 0%
    #####: 4905:void StreamingListener::SocketWriter::MakeConnection() {
    #####: 4906:  GTEST_CHECK_(sockfd_ == -1)
    %%%%%: 4906-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4906-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4906-block  2
call    6 never executed
    %%%%%: 4906-block  3
call    7 never executed
    $$$$$: 4906-block  4
call    8 never executed
    $$$$$: 4906-block  5
    #####: 4907:      << "MakeConnection() can't be called when there is already a connection.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4907-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4908:
        -: 4909:  addrinfo hints;
    #####: 4910:  memset(&hints, 0, sizeof(hints));
    #####: 4911:  hints.ai_family = AF_UNSPEC;  // To allow both IPv4 and IPv6 addresses.
    #####: 4912:  hints.ai_socktype = SOCK_STREAM;
    #####: 4913:  addrinfo* servinfo = nullptr;
        -: 4914:
        -: 4915:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 4916:  // the given host name.
        -: 4917:  const int error_num =
    #####: 4918:      getaddrinfo(host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
    %%%%%: 4918-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4919:  if (error_num != 0) {
    %%%%%: 4919-block  0
branch  0 never executed
branch  1 never executed
    #####: 4920:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
    %%%%%: 4920-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4920-block  1
call    3 never executed
    %%%%%: 4920-block  2
call    4 never executed
    $$$$$: 4920-block  3
call    5 never executed
    $$$$$: 4920-block  4
    #####: 4921:                        << gai_strerror(error_num);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4921-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4922:  }
        -: 4923:
        -: 4924:  // Loop through all the results and connect to the first we can.
    #####: 4925:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != nullptr;
    %%%%%: 4925-block  0
    %%%%%: 4925-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 4925-block  2
branch  2 never executed
branch  3 never executed
    #####: 4926:       cur_addr = cur_addr->ai_next) {
    %%%%%: 4926-block  0
    #####: 4927:    sockfd_ = socket(cur_addr->ai_family, cur_addr->ai_socktype,
    %%%%%: 4927-block  0
call    0 never executed
        -: 4928:                     cur_addr->ai_protocol);
    #####: 4929:    if (sockfd_ != -1) {
branch  0 never executed
branch  1 never executed
        -: 4930:      // Connect the client socket to the server socket.
    #####: 4931:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
    %%%%%: 4931-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4931-block  1
branch  3 never executed
branch  4 never executed
    #####: 4932:        close(sockfd_);
    %%%%%: 4932-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4933:        sockfd_ = -1;
    %%%%%: 4933-block  0
        -: 4934:      }
        -: 4935:    }
        -: 4936:  }
        -: 4937:
    #####: 4938:  freeaddrinfo(servinfo);  // all done with this structure
    %%%%%: 4938-block  0
call    0 never executed
        -: 4939:
    #####: 4940:  if (sockfd_ == -1) {
branch  0 never executed
branch  1 never executed
    #####: 4941:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
    %%%%%: 4941-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4941-block  1
call    3 never executed
    %%%%%: 4941-block  2
call    4 never executed
    $$$$$: 4941-block  3
call    5 never executed
    $$$$$: 4941-block  4
    #####: 4942:                        << host_name_ << ":" << port_num_;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4942-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4942-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4942-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4943:  }
    #####: 4944:}
    %%%%%: 4944-block  0
        -: 4945:
        -: 4946:// End of class Streaming Listener
        -: 4947:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 4948:
        -: 4949:// class OsStackTraceGetter
        -: 4950:
        -: 4951:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 4952:    "... " GTEST_NAME_ " internal frames ...";
        -: 4953:
function _ZN7testing8internal18OsStackTraceGetter17CurrentStackTraceB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 4954:std::string OsStackTraceGetter::CurrentStackTrace(int max_depth, int skip_count)
        -: 4955:    GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 4956:#if GTEST_HAS_ABSL
        -: 4957:  std::string result;
        -: 4958:
        -: 4959:  if (max_depth <= 0) {
        -: 4960:    return result;
        -: 4961:  }
        -: 4962:
        -: 4963:  max_depth = std::min(max_depth, kMaxStackTraceDepth);
        -: 4964:
        -: 4965:  std::vector<void*> raw_stack(max_depth);
        -: 4966:  // Skips the frames requested by the caller, plus this function.
        -: 4967:  const int raw_stack_size =
        -: 4968:      absl::GetStackTrace(&raw_stack[0], max_depth, skip_count + 1);
        -: 4969:
        -: 4970:  void* caller_frame = nullptr;
        -: 4971:  {
        -: 4972:    MutexLock lock(&mutex_);
        -: 4973:    caller_frame = caller_frame_;
        -: 4974:  }
        -: 4975:
        -: 4976:  for (int i = 0; i < raw_stack_size; ++i) {
        -: 4977:    if (raw_stack[i] == caller_frame &&
        -: 4978:        !GTEST_FLAG_GET(show_internal_stack_frames)) {
        -: 4979:      // Add a marker to the trace and stop adding frames.
        -: 4980:      absl::StrAppend(&result, kElidedFramesMarker, "\n");
        -: 4981:      break;
        -: 4982:    }
        -: 4983:
        -: 4984:    char tmp[1024];
        -: 4985:    const char* symbol = "(unknown)";
        -: 4986:    if (absl::Symbolize(raw_stack[i], tmp, sizeof(tmp))) {
        -: 4987:      symbol = tmp;
        -: 4988:    }
        -: 4989:
        -: 4990:    char line[1024];
        -: 4991:    snprintf(line, sizeof(line), "  %p: %s\n", raw_stack[i], symbol);
        -: 4992:    result += line;
        -: 4993:  }
        -: 4994:
        -: 4995:  return result;
        -: 4996:
        -: 4997:#else   // !GTEST_HAS_ABSL
        -: 4998:  static_cast<void>(max_depth);
        -: 4999:  static_cast<void>(skip_count);
    #####: 5000:  return "";
    %%%%%: 5000-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5000-block  1
call    4 never executed
    %%%%%: 5000-block  2
    $$$$$: 5000-block  3
call    5 never executed
        -: 5001:#endif  // GTEST_HAS_ABSL
        -: 5002:}
        -: 5003:
function _ZN7testing8internal18OsStackTraceGetter16UponLeavingGTestEv called 7 returned 100% blocks executed 100%
        7: 5004:void OsStackTraceGetter::UponLeavingGTest() GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 5005:#if GTEST_HAS_ABSL
        -: 5006:  void* caller_frame = nullptr;
        -: 5007:  if (absl::GetStackTrace(&caller_frame, 1, 3) <= 0) {
        -: 5008:    caller_frame = nullptr;
        -: 5009:  }
        -: 5010:
        -: 5011:  MutexLock lock(&mutex_);
        -: 5012:  caller_frame_ = caller_frame;
        -: 5013:#endif  // GTEST_HAS_ABSL
        7: 5014:}
        -: 5015:
        -: 5016:#if GTEST_HAS_DEATH_TEST
        -: 5017:// A helper class that creates the premature-exit file in its
        -: 5018:// constructor and deletes the file in its destructor.
        -: 5019:class ScopedPrematureExitFile {
        -: 5020: public:
function _ZN7testing8internal23ScopedPrematureExitFileC2EPKc called 2 returned 100% blocks executed 50%
        2: 5021:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
       2*: 5022:      : premature_exit_filepath_(
        2: 5022-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    %%%%%: 5022-block  1
        2: 5022-block  2
        2: 5022-block  3
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 5022-block  4
call    6 returned 2
    $$$$$: 5022-block  5
call    7 never executed
    $$$$$: 5022-block  6
call    8 never executed
        -: 5023:            premature_exit_filepath ? premature_exit_filepath : "") {
        -: 5024:    // If a path to the premature-exit file is specified...
        2: 5025:    if (!premature_exit_filepath_.empty()) {
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -: 5026:      // create the file with a single "0" character in it.  I/O
        -: 5027:      // errors are ignored as there's nothing better we can do and we
        -: 5028:      // don't want to fail the test because of this.
    #####: 5029:      FILE* pfile = posix::FOpen(premature_exit_filepath_.c_str(), "w");
    %%%%%: 5029-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5030:      fwrite("0", 1, 1, pfile);
    %%%%%: 5030-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5031:      fclose(pfile);
    %%%%%: 5031-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5032:    }
        2: 5033:  }
        2: 5033-block  0
    $$$$$: 5033-block  1
call    0 never executed
        -: 5034:
function _ZN7testing8internal23ScopedPrematureExitFileD2Ev called 2 returned 100% blocks executed 27%
        4: 5035:  ~ScopedPrematureExitFile() {
        -: 5036:#if !GTEST_OS_ESP8266
        2: 5037:    if (!premature_exit_filepath_.empty()) {
        2: 5037-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####: 5038:      int retval = remove(premature_exit_filepath_.c_str());
    %%%%%: 5038-block  0
call    0 never executed
call    1 never executed
    #####: 5039:      if (retval) {
branch  0 never executed
branch  1 never executed
    #####: 5040:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    %%%%%: 5040-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5041:                          << premature_exit_filepath_ << "\" with error "
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5042:                          << retval;
call    0 never executed
        -: 5043:      }
        -: 5044:    }
        -: 5045:#endif
        2: 5046:  }
        2: 5046-block  0
call    0 returned 2
        -: 5047:
        -: 5048: private:
        -: 5049:  const std::string premature_exit_filepath_;
        -: 5050:
        -: 5051:  ScopedPrematureExitFile(const ScopedPrematureExitFile&) = delete;
        -: 5052:  ScopedPrematureExitFile& operator=(const ScopedPrematureExitFile&) = delete;
        -: 5053:};
        -: 5054:#endif  // GTEST_HAS_DEATH_TEST
        -: 5055:
        -: 5056:}  // namespace internal
        -: 5057:
        -: 5058:// class TestEventListeners
        -: 5059:
function _ZN7testing18TestEventListenersC2Ev called 2 returned 100% blocks executed 100%
        2: 5060:TestEventListeners::TestEventListeners()
        2: 5061:    : repeater_(new internal::TestEventRepeater()),
        2: 5061-block  0
call    0 returned 2
call    1 returned 2
        2: 5062:      default_result_printer_(nullptr),
        2: 5063:      default_xml_generator_(nullptr) {}
        -: 5064:
function _ZN7testing18TestEventListenersD2Ev called 2 returned 100% blocks executed 100%
        2: 5065:TestEventListeners::~TestEventListeners() { delete repeater_; }
        2: 5065-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5065-block  1
call    2 returned 2
        -: 5066:
        -: 5067:// Returns the standard listener responsible for the default console
        -: 5068:// output.  Can be removed from the listeners list to shut down default
        -: 5069:// console output.  Note that removing this object from the listener list
        -: 5070:// with Release transfers its ownership to the user.
function _ZN7testing18TestEventListeners6AppendEPNS_17TestEventListenerE called 2 returned 100% blocks executed 100%
        2: 5071:void TestEventListeners::Append(TestEventListener* listener) {
        2: 5072:  repeater_->Append(listener);
        2: 5072-block  0
call    0 returned 2
        2: 5073:}
        -: 5074:
        -: 5075:// Removes the given event listener from the list and returns it.  It then
        -: 5076:// becomes the caller's responsibility to delete the listener. Returns
        -: 5077:// NULL if the listener is not found in the list.
function _ZN7testing18TestEventListeners7ReleaseEPNS_17TestEventListenerE called 2 returned 100% blocks executed 71%
        2: 5078:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        2: 5079:  if (listener == default_result_printer_)
        2: 5079-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5080:    default_result_printer_ = nullptr;
        2: 5080-block  0
    #####: 5081:  else if (listener == default_xml_generator_)
    %%%%%: 5081-block  0
branch  0 never executed
branch  1 never executed
    #####: 5082:    default_xml_generator_ = nullptr;
    %%%%%: 5082-block  0
        2: 5083:  return repeater_->Release(listener);
        2: 5083-block  0
call    0 returned 2
        -: 5084:}
        -: 5085:
        -: 5086:// Returns repeater that broadcasts the TestEventListener events to all
        -: 5087:// subscribers.
function _ZN7testing18TestEventListeners8repeaterEv called 3 returned 100% blocks executed 100%
        3: 5088:TestEventListener* TestEventListeners::repeater() { return repeater_; }
        3: 5088-block  0
        -: 5089:
        -: 5090:// Sets the default_result_printer attribute to the provided listener.
        -: 5091:// The listener is also added to the listener list and previous
        -: 5092:// default_result_printer is removed from it and deleted. The listener can
        -: 5093:// also be NULL in which case it will not be added to the list. Does
        -: 5094:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners23SetDefaultResultPrinterEPNS_17TestEventListenerE called 2 returned 100% blocks executed 86%
        2: 5095:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        2: 5096:  if (default_result_printer_ != listener) {
        2: 5096-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -: 5097:    // It is an error to pass this method a listener that is already in the
        -: 5098:    // list.
       2*: 5099:    delete Release(default_result_printer_);
        2: 5099-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    %%%%%: 5099-block  1
call    3 never executed
        2: 5100:    default_result_printer_ = listener;
        2: 5101:    if (listener != nullptr) Append(listener);
        2: 5101-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5101-block  1
call    2 returned 2
        -: 5102:  }
        2: 5103:}
        -: 5104:
        -: 5105:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 5106:// listener is also added to the listener list and previous
        -: 5107:// default_xml_generator is removed from it and deleted. The listener can
        -: 5108:// also be NULL in which case it will not be added to the list. Does
        -: 5109:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners22SetDefaultXmlGeneratorEPNS_17TestEventListenerE called 0 returned 0% blocks executed 0%
    #####: 5110:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    #####: 5111:  if (default_xml_generator_ != listener) {
    %%%%%: 5111-block  0
branch  0 never executed
branch  1 never executed
        -: 5112:    // It is an error to pass this method a listener that is already in the
        -: 5113:    // list.
    #####: 5114:    delete Release(default_xml_generator_);
    %%%%%: 5114-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5114-block  1
call    3 never executed
    #####: 5115:    default_xml_generator_ = listener;
    #####: 5116:    if (listener != nullptr) Append(listener);
    %%%%%: 5116-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5116-block  1
call    2 never executed
        -: 5117:  }
    #####: 5118:}
        -: 5119:
        -: 5120:// Controls whether events will be forwarded by the repeater to the
        -: 5121:// listeners in the list.
function _ZNK7testing18TestEventListeners22EventForwardingEnabledEv called 0 returned 0% blocks executed 0%
    #####: 5122:bool TestEventListeners::EventForwardingEnabled() const {
    #####: 5123:  return repeater_->forwarding_enabled();
    %%%%%: 5123-block  0
call    0 never executed
        -: 5124:}
        -: 5125:
function _ZN7testing18TestEventListeners23SuppressEventForwardingEv called 0 returned 0% blocks executed 0%
    #####: 5126:void TestEventListeners::SuppressEventForwarding() {
    #####: 5127:  repeater_->set_forwarding_enabled(false);
    %%%%%: 5127-block  0
call    0 never executed
    #####: 5128:}
        -: 5129:
        -: 5130:// class UnitTest
        -: 5131:
        -: 5132:// Gets the singleton UnitTest object.  The first time this method is
        -: 5133:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 5134:// calls will return the same object.
        -: 5135://
        -: 5136:// We don't protect this under mutex_ as a user is not supposed to
        -: 5137:// call this before main() starts, from which point on the return
        -: 5138:// value will never change.
function _ZN7testing8UnitTest11GetInstanceEv called 29 returned 100% blocks executed 82%
       29: 5139:UnitTest* UnitTest::GetInstance() {
        -: 5140:  // CodeGear C++Builder insists on a public destructor for the
        -: 5141:  // default implementation.  Use this implementation to keep good OO
        -: 5142:  // design with private destructor.
        -: 5143:
        -: 5144:#if defined(__BORLANDC__)
        -: 5145:  static UnitTest* const instance = new UnitTest;
        -: 5146:  return instance;
        -: 5147:#else
       29: 5148:  static UnitTest instance;
       29: 5148-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 27
        2: 5148-block  1
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0
        2: 5148-block  2
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
        2: 5148-block  3
call    8 returned 2
call    9 returned 2
    $$$$$: 5148-block  4
branch 10 never executed
branch 11 never executed
    $$$$$: 5148-block  5
call   12 never executed
       29: 5149:  return &instance;
       29: 5149-block  0
       29: 5149-block  1
        -: 5150:#endif  // defined(__BORLANDC__)
        -: 5151:}
        -: 5152:
        -: 5153:// Gets the number of successful test suites.
function _ZNK7testing8UnitTest27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5154:int UnitTest::successful_test_suite_count() const {
    #####: 5155:  return impl()->successful_test_suite_count();
    %%%%%: 5155-block  0
call    0 never executed
call    1 never executed
        -: 5156:}
        -: 5157:
        -: 5158:// Gets the number of failed test suites.
function _ZNK7testing8UnitTest23failed_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5159:int UnitTest::failed_test_suite_count() const {
    #####: 5160:  return impl()->failed_test_suite_count();
    %%%%%: 5160-block  0
call    0 never executed
call    1 never executed
        -: 5161:}
        -: 5162:
        -: 5163:// Gets the number of all test suites.
function _ZNK7testing8UnitTest22total_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5164:int UnitTest::total_test_suite_count() const {
    #####: 5165:  return impl()->total_test_suite_count();
    %%%%%: 5165-block  0
call    0 never executed
call    1 never executed
        -: 5166:}
        -: 5167:
        -: 5168:// Gets the number of all test suites that contain at least one test
        -: 5169:// that should run.
function _ZNK7testing8UnitTest23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5170:int UnitTest::test_suite_to_run_count() const {
        2: 5171:  return impl()->test_suite_to_run_count();
        2: 5171-block  0
call    0 returned 2
call    1 returned 2
        -: 5172:}
        -: 5173:
        -: 5174://  Legacy API is deprecated but still available
        -: 5175:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5176:int UnitTest::successful_test_case_count() const {
    #####: 5177:  return impl()->successful_test_suite_count();
    %%%%%: 5177-block  0
call    0 never executed
call    1 never executed
        -: 5178:}
function _ZNK7testing8UnitTest22failed_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5179:int UnitTest::failed_test_case_count() const {
    #####: 5180:  return impl()->failed_test_suite_count();
    %%%%%: 5180-block  0
call    0 never executed
call    1 never executed
        -: 5181:}
function _ZNK7testing8UnitTest21total_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5182:int UnitTest::total_test_case_count() const {
    #####: 5183:  return impl()->total_test_suite_count();
    %%%%%: 5183-block  0
call    0 never executed
call    1 never executed
        -: 5184:}
function _ZNK7testing8UnitTest22test_case_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 5185:int UnitTest::test_case_to_run_count() const {
    #####: 5186:  return impl()->test_suite_to_run_count();
    %%%%%: 5186-block  0
call    0 never executed
call    1 never executed
        -: 5187:}
        -: 5188:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5189:
        -: 5190:// Gets the number of successful tests.
function _ZNK7testing8UnitTest21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 5191:int UnitTest::successful_test_count() const {
        1: 5192:  return impl()->successful_test_count();
        1: 5192-block  0
call    0 returned 1
call    1 returned 1
        -: 5193:}
        -: 5194:
        -: 5195:// Gets the number of skipped tests.
function _ZNK7testing8UnitTest18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 5196:int UnitTest::skipped_test_count() const {
        1: 5197:  return impl()->skipped_test_count();
        1: 5197-block  0
call    0 returned 1
call    1 returned 1
        -: 5198:}
        -: 5199:
        -: 5200:// Gets the number of failed tests.
function _ZNK7testing8UnitTest17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5201:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
    %%%%%: 5201-block  0
call    0 never executed
call    1 never executed
        -: 5202:
        -: 5203:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8UnitTest30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 5204:int UnitTest::reportable_disabled_test_count() const {
        1: 5205:  return impl()->reportable_disabled_test_count();
        1: 5205-block  0
call    0 returned 1
call    1 returned 1
        -: 5206:}
        -: 5207:
        -: 5208:// Gets the number of disabled tests.
function _ZNK7testing8UnitTest19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5209:int UnitTest::disabled_test_count() const {
    #####: 5210:  return impl()->disabled_test_count();
    %%%%%: 5210-block  0
call    0 never executed
call    1 never executed
        -: 5211:}
        -: 5212:
        -: 5213:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8UnitTest21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5214:int UnitTest::reportable_test_count() const {
    #####: 5215:  return impl()->reportable_test_count();
    %%%%%: 5215-block  0
call    0 never executed
call    1 never executed
        -: 5216:}
        -: 5217:
        -: 5218:// Gets the number of all tests.
function _ZNK7testing8UnitTest16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5219:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    %%%%%: 5219-block  0
call    0 never executed
call    1 never executed
        -: 5220:
        -: 5221:// Gets the number of tests that should run.
function _ZNK7testing8UnitTest17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5222:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
        2: 5222-block  0
call    0 returned 2
call    1 returned 2
        -: 5223:
        -: 5224:// Gets the time of the test program start, in ms from the start of the
        -: 5225:// UNIX epoch.
function _ZNK7testing8UnitTest15start_timestampEv called 0 returned 0% blocks executed 0%
    #####: 5226:internal::TimeInMillis UnitTest::start_timestamp() const {
    #####: 5227:  return impl()->start_timestamp();
    %%%%%: 5227-block  0
call    0 never executed
call    1 never executed
        -: 5228:}
        -: 5229:
        -: 5230:// Gets the elapsed time, in milliseconds.
function _ZNK7testing8UnitTest12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1: 5231:internal::TimeInMillis UnitTest::elapsed_time() const {
        1: 5232:  return impl()->elapsed_time();
        1: 5232-block  0
call    0 returned 1
call    1 returned 1
        -: 5233:}
        -: 5234:
        -: 5235:// Returns true if and only if the unit test passed (i.e. all test suites
        -: 5236:// passed).
function _ZNK7testing8UnitTest6PassedEv called 1 returned 100% blocks executed 100%
        1: 5237:bool UnitTest::Passed() const { return impl()->Passed(); }
        1: 5237-block  0
call    0 returned 1
call    1 returned 1
        -: 5238:
        -: 5239:// Returns true if and only if the unit test failed (i.e. some test suite
        -: 5240:// failed or something outside of all tests failed).
function _ZNK7testing8UnitTest6FailedEv called 0 returned 0% blocks executed 0%
    #####: 5241:bool UnitTest::Failed() const { return impl()->Failed(); }
    %%%%%: 5241-block  0
call    0 never executed
call    1 never executed
        -: 5242:
        -: 5243:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5244:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8UnitTest12GetTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5245:const TestSuite* UnitTest::GetTestSuite(int i) const {
    #####: 5246:  return impl()->GetTestSuite(i);
    %%%%%: 5246-block  0
call    0 never executed
call    1 never executed
        -: 5247:}
        -: 5248:
        -: 5249://  Legacy API is deprecated but still available
        -: 5250:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest11GetTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 5251:const TestCase* UnitTest::GetTestCase(int i) const {
    #####: 5252:  return impl()->GetTestCase(i);
    %%%%%: 5252-block  0
call    0 never executed
call    1 never executed
        -: 5253:}
        -: 5254:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5255:
        -: 5256:// Returns the TestResult containing information on test failures and
        -: 5257:// properties logged outside of individual test suites.
function _ZNK7testing8UnitTest18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 5258:const TestResult& UnitTest::ad_hoc_test_result() const {
    #####: 5259:  return *impl()->ad_hoc_test_result();
    %%%%%: 5259-block  0
call    0 never executed
call    1 never executed
        -: 5260:}
        -: 5261:
        -: 5262:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5263:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8UnitTest19GetMutableTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5264:TestSuite* UnitTest::GetMutableTestSuite(int i) {
    #####: 5265:  return impl()->GetMutableSuiteCase(i);
    %%%%%: 5265-block  0
call    0 never executed
call    1 never executed
        -: 5266:}
        -: 5267:
        -: 5268:// Returns the list of event listeners that can be used to track events
        -: 5269:// inside Google Test.
function _ZN7testing8UnitTest9listenersEv called 2 returned 100% blocks executed 100%
        2: 5270:TestEventListeners& UnitTest::listeners() { return *impl()->listeners(); }
        2: 5270-block  0
call    0 returned 2
call    1 returned 2
        -: 5271:
        -: 5272:// Registers and returns a global test environment.  When a test
        -: 5273:// program is run, all global test environments will be set-up in the
        -: 5274:// order they were registered.  After all tests in the program have
        -: 5275:// finished, all global test environments will be torn-down in the
        -: 5276:// *reverse* order they were registered.
        -: 5277://
        -: 5278:// The UnitTest object takes ownership of the given environment.
        -: 5279://
        -: 5280:// We don't protect this under mutex_, as we only support calling it
        -: 5281:// from the main thread.
function _ZN7testing8UnitTest14AddEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5282:Environment* UnitTest::AddEnvironment(Environment* env) {
    #####: 5283:  if (env == nullptr) {
    %%%%%: 5283-block  0
branch  0 never executed
branch  1 never executed
    #####: 5284:    return nullptr;
    %%%%%: 5284-block  0
        -: 5285:  }
        -: 5286:
    #####: 5287:  impl_->environments().push_back(env);
    %%%%%: 5287-block  0
call    0 never executed
call    1 never executed
    #####: 5288:  return env;
        -: 5289:}
        -: 5290:
        -: 5291:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 5292:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 5293:// this to report their results.  The user code should use the
        -: 5294:// assertion macros instead of calling this directly.
function _ZN7testing8UnitTest17AddTestPartResultENS_14TestPartResult4TypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_ called 0 returned 0% blocks executed 0%
    #####: 5295:void UnitTest::AddTestPartResult(TestPartResult::Type result_type,
        -: 5296:                                 const char* file_name, int line_number,
        -: 5297:                                 const std::string& message,
        -: 5298:                                 const std::string& os_stack_trace)
        -: 5299:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5300:  Message msg;
    %%%%%: 5300-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5301:  msg << message;
    %%%%%: 5301-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5302:
    #####: 5303:  internal::MutexLock lock(&mutex_);
    %%%%%: 5303-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5304:  if (impl_->gtest_trace_stack().size() > 0) {
    %%%%%: 5304-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5304-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5305:    msg << "\n" << GTEST_NAME_ << " trace:";
    %%%%%: 5305-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5305-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5305-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5306:
    #####: 5307:    for (size_t i = impl_->gtest_trace_stack().size(); i > 0; --i) {
    %%%%%: 5307-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5307-block  1
call    3 never executed
    %%%%%: 5307-block  2
branch  4 never executed
branch  5 never executed
    #####: 5308:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    %%%%%: 5308-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5308-block  1
call    3 never executed
    #####: 5309:      msg << "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5310:          << internal::FormatFileLocation(trace.file, trace.line) << " "
    %%%%%: 5310-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5310-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5310-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5310-block  3
call    9 never executed
    $$$$$: 5310-block  4
call   10 never executed
    $$$$$: 5310-block  5
    #####: 5311:          << trace.message;
    %%%%%: 5311-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5312:    }
        -: 5313:  }
        -: 5314:
    #####: 5315:  if (os_stack_trace.c_str() != nullptr && !os_stack_trace.empty()) {
    %%%%%: 5315-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5315-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5315-block  2
    %%%%%: 5315-block  3
    %%%%%: 5315-block  4
branch  6 never executed
branch  7 never executed
    #####: 5316:    msg << internal::kStackTraceMarker << os_stack_trace;
    %%%%%: 5316-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5316-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5317:  }
        -: 5318:
        -: 5319:  const TestPartResult result = TestPartResult(
    #####: 5320:      result_type, file_name, line_number, msg.GetString().c_str());
    %%%%%: 5320-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5320-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5320-block  2
call    7 never executed
    $$$$$: 5320-block  3
call    8 never executed
    $$$$$: 5320-block  4
    #####: 5321:  impl_->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5321-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5322:      result);
        -: 5323:
    #####: 5324:  if (result_type != TestPartResult::kSuccess &&
    %%%%%: 5324-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5324-block  1
branch  2 never executed
branch  3 never executed
        -: 5325:      result_type != TestPartResult::kSkip) {
        -: 5326:    // gtest_break_on_failure takes precedence over
        -: 5327:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 5328:    // in the code (perhaps in order to use Google Test assertions
        -: 5329:    // with another testing framework) and specify the former on the
        -: 5330:    // command line for debugging.
    #####: 5331:    if (GTEST_FLAG_GET(break_on_failure)) {
    %%%%%: 5331-block  0
branch  0 never executed
branch  1 never executed
        -: 5332:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5333:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 5334:      // when a failure happens and both the --gtest_break_on_failure and
        -: 5335:      // the --gtest_catch_exceptions flags are specified.
        -: 5336:      DebugBreak();
        -: 5337:#elif (!defined(__native_client__)) &&            \
        -: 5338:    ((defined(__clang__) || defined(__GNUC__)) && \
        -: 5339:     (defined(__x86_64__) || defined(__i386__)))
        -: 5340:      // with clang/gcc we can achieve the same effect on x86 by invoking int3
    #####: 5341:      asm("int3");
    %%%%%: 5341-block  0
call    0 never executed
        -: 5342:#elif GTEST_HAS_BUILTIN(__builtin_trap)
        -: 5343:      __builtin_trap();
        -: 5344:#elif defined(SIGTRAP)
        -: 5345:      raise(SIGTRAP);
        -: 5346:#else
        -: 5347:      // Dereference nullptr through a volatile pointer to prevent the compiler
        -: 5348:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 5349:      // portability: some debuggers don't correctly trap abort().
        -: 5350:      *static_cast<volatile int*>(nullptr) = 1;
        -: 5351:#endif  // GTEST_OS_WINDOWS
    #####: 5352:    } else if (GTEST_FLAG_GET(throw_on_failure)) {
    %%%%%: 5352-block  0
branch  0 never executed
branch  1 never executed
        -: 5353:#if GTEST_HAS_EXCEPTIONS
    #####: 5354:      throw internal::GoogleTestFailureException(result);
    %%%%%: 5354-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5354-block  1
call    4 never executed
    $$$$$: 5354-block  2
call    5 never executed
        -: 5355:#else
        -: 5356:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 5357:      // that cannot be suppressed in VC 7.1 or below.
        -: 5358:      exit(1);
        -: 5359:#endif
        -: 5360:    }
        -: 5361:  }
    #####: 5362:}
    %%%%%: 5362-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 5362-block  1
call    3 never executed
    $$$$$: 5362-block  2
call    4 never executed
    $$$$$: 5362-block  3
call    5 never executed
        -: 5363:
        -: 5364:// Adds a TestProperty to the current TestResult object when invoked from
        -: 5365:// inside a test, to current TestSuite's ad_hoc_test_result_ when invoked
        -: 5366:// from SetUpTestSuite or TearDownTestSuite, or to the global property set
        -: 5367:// when invoked elsewhere.  If the result already contains a property with
        -: 5368:// the same key, the value will be updated.
function _ZN7testing8UnitTest14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 5369:void UnitTest::RecordProperty(const std::string& key,
        -: 5370:                              const std::string& value) {
    #####: 5371:  impl_->RecordProperty(TestProperty(key, value));
    %%%%%: 5371-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5371-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5371-block  2
call    6 never executed
    $$$$$: 5371-block  3
call    7 never executed
    #####: 5372:}
        -: 5373:
        -: 5374:// Runs all tests in this UnitTest object and prints the result.
        -: 5375:// Returns 0 if successful, or 1 otherwise.
        -: 5376://
        -: 5377:// We don't protect this under mutex_, as we only support calling it
        -: 5378:// from the main thread.
function _ZN7testing8UnitTest3RunEv called 2 returned 100% blocks executed 78%
        2: 5379:int UnitTest::Run() {
        -: 5380:#if GTEST_HAS_DEATH_TEST
        -: 5381:  const bool in_death_test_child_process =
        2: 5382:      GTEST_FLAG_GET(internal_run_death_test).length() > 0;
        2: 5382-block  0
call    0 returned 2
        -: 5383:
        -: 5384:  // Google Test implements this protocol for catching that a test
        -: 5385:  // program exits before returning control to Google Test:
        -: 5386:  //
        -: 5387:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 5388:  //      is specified by the environment variable
        -: 5389:  //      TEST_PREMATURE_EXIT_FILE.
        -: 5390:  //   2. When Google Test has finished its work, it deletes the file.
        -: 5391:  //
        -: 5392:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 5393:  // running a Google-Test-based test program and check the existence
        -: 5394:  // of the file at the end of the test execution to see if it has
        -: 5395:  // exited prematurely.
        -: 5396:
        -: 5397:  // If we are in the child process of a death test, don't
        -: 5398:  // create/delete the premature exit file, as doing so is unnecessary
        -: 5399:  // and will confuse the parent process.  Otherwise, create/delete
        -: 5400:  // the file upon entering/leaving this function.  If the program
        -: 5401:  // somehow exits before this function has a chance to return, the
        -: 5402:  // premature-exit file will be left undeleted, causing a test runner
        -: 5403:  // that understands the premature-exit-file protocol to report the
        -: 5404:  // test as having failed.
        -: 5405:  const internal::ScopedPrematureExitFile premature_exit_file(
        -: 5406:      in_death_test_child_process
        -: 5407:          ? nullptr
       2*: 5408:          : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 5408-block  0
        2: 5408-block  1
call    2 returned 2
        2: 5408-block  2
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        -: 5409:#endif  // GTEST_HAS_DEATH_TEST
        -: 5410:
        -: 5411:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 5412:  // used for the duration of the program.
        2: 5413:  impl()->set_catch_exceptions(GTEST_FLAG_GET(catch_exceptions));
        2: 5413-block  0
call    0 returned 2
call    1 returned 2
        -: 5414:
        -: 5415:#if GTEST_OS_WINDOWS
        -: 5416:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 5417:  // tests or this is executing in the context of death test child
        -: 5418:  // process. In either case the user does not want to see pop-up dialogs
        -: 5419:  // about crashes - they are expected.
        -: 5420:  if (impl()->catch_exceptions() || in_death_test_child_process) {
        -: 5421:#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5422:    // SetErrorMode doesn't exist on CE.
        -: 5423:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        -: 5424:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 5425:#endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 5426:
        -: 5427:#if (defined(_MSC_VER) || GTEST_OS_WINDOWS_MINGW) && !GTEST_OS_WINDOWS_MOBILE
        -: 5428:    // Death test children can be terminated with _abort().  On Windows,
        -: 5429:    // _abort() can show a dialog with a warning message.  This forces the
        -: 5430:    // abort message to go to stderr instead.
        -: 5431:    _set_error_mode(_OUT_TO_STDERR);
        -: 5432:#endif
        -: 5433:
        -: 5434:#if defined(_MSC_VER) && !GTEST_OS_WINDOWS_MOBILE
        -: 5435:    // In the debug version, Visual Studio pops up a separate dialog
        -: 5436:    // offering a choice to debug the aborted program. We need to suppress
        -: 5437:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 5438:    // executed. Google Test will notify the user of any unexpected
        -: 5439:    // failure via stderr.
        -: 5440:    if (!GTEST_FLAG_GET(break_on_failure))
        -: 5441:      _set_abort_behavior(
        -: 5442:          0x0,                                    // Clear the following flags:
        -: 5443:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 5444:
        -: 5445:    // In debug mode, the Windows CRT can crash with an assertion over invalid
        -: 5446:    // input (e.g. passing an invalid file descriptor).  The default handling
        -: 5447:    // for these assertions is to pop up a dialog and wait for user input.
        -: 5448:    // Instead ask the CRT to dump such assertions to stderr non-interactively.
        -: 5449:    if (!IsDebuggerPresent()) {
        -: 5450:      (void)_CrtSetReportMode(_CRT_ASSERT,
        -: 5451:                              _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -: 5452:      (void)_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
        -: 5453:    }
        -: 5454:#endif
        -: 5455:  }
        -: 5456:#endif  // GTEST_OS_WINDOWS
        -: 5457:
        2: 5458:  return internal::HandleExceptionsInMethodIfSupported(
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        -: 5459:             impl(), &internal::UnitTestImpl::RunAllTests,
        -: 5460:             "auxiliary test code (environments or event listeners)")
       2*: 5461:             ? 0
        2: 5461-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5461-block  1
    %%%%%: 5461-block  2
        2: 5462:             : 1;
        2: 5462-block  0
        2: 5463:}
        2: 5463-block  0
call    0 returned 2
    $$$$$: 5463-block  1
call    1 never executed
        -: 5464:
        -: 5465:#if GTEST_HAS_FILE_SYSTEM
        -: 5466:// Returns the working directory when the first TEST() or TEST_F() was
        -: 5467:// executed.
function _ZNK7testing8UnitTest20original_working_dirEv called 0 returned 0% blocks executed 0%
    #####: 5468:const char* UnitTest::original_working_dir() const {
    #####: 5469:  return impl_->original_working_dir_.c_str();
    %%%%%: 5469-block  0
call    0 never executed
        -: 5470:}
        -: 5471:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 5472:
        -: 5473:// Returns the TestSuite object for the test that's currently running,
        -: 5474:// or NULL if no test is running.
function _ZNK7testing8UnitTest18current_test_suiteEv called 0 returned 0% blocks executed 0%
    #####: 5475:const TestSuite* UnitTest::current_test_suite() const
        -: 5476:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5477:  internal::MutexLock lock(&mutex_);
    %%%%%: 5477-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5478:  return impl_->current_test_suite();
    %%%%%: 5478-block  0
call    0 never executed
    %%%%%: 5478-block  1
    #####: 5479:}
call    0 never executed
        -: 5480:
        -: 5481:// Legacy API is still available but deprecated
        -: 5482:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest17current_test_caseEv called 0 returned 0% blocks executed 0%
    #####: 5483:const TestCase* UnitTest::current_test_case() const
        -: 5484:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5485:  internal::MutexLock lock(&mutex_);
    %%%%%: 5485-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5486:  return impl_->current_test_suite();
    %%%%%: 5486-block  0
call    0 never executed
    %%%%%: 5486-block  1
    #####: 5487:}
call    0 never executed
        -: 5488:#endif
        -: 5489:
        -: 5490:// Returns the TestInfo object for the test that's currently running,
        -: 5491:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 5492:const TestInfo* UnitTest::current_test_info() const
        -: 5493:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5494:  internal::MutexLock lock(&mutex_);
    %%%%%: 5494-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5495:  return impl_->current_test_info();
    %%%%%: 5495-block  0
call    0 never executed
    %%%%%: 5495-block  1
    #####: 5496:}
call    0 never executed
        -: 5497:
        -: 5498:// Returns the random seed used at the start of the current test run.
function _ZNK7testing8UnitTest11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 5499:int UnitTest::random_seed() const { return impl_->random_seed(); }
    %%%%%: 5499-block  0
call    0 never executed
        -: 5500:
        -: 5501:// Returns ParameterizedTestSuiteRegistry object used to keep track of
        -: 5502:// value-parameterized tests and instantiate and register them.
        -: 5503:internal::ParameterizedTestSuiteRegistry&
function _ZN7testing8UnitTest27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 5504:UnitTest::parameterized_test_registry() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5505:  return impl_->parameterized_test_registry();
    %%%%%: 5505-block  0
call    0 never executed
        -: 5506:}
        -: 5507:
        -: 5508:// Creates an empty UnitTest.
function _ZN7testing8UnitTestC2Ev called 2 returned 100% blocks executed 56%
        2: 5509:UnitTest::UnitTest() { impl_ = new internal::UnitTestImpl(this); }
        2: 5509-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 5509-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2: 5509-block  2
    $$$$$: 5509-block  3
branch  7 never executed
branch  8 never executed
    $$$$$: 5509-block  4
call    9 never executed
    $$$$$: 5509-block  5
call   10 never executed
        -: 5510:
        -: 5511:// Destructor of UnitTest.
       2*: 5512:UnitTest::~UnitTest() { delete impl_; }
------------------
_ZN7testing8UnitTestD0Ev:
function _ZN7testing8UnitTestD0Ev called 0 returned 0% blocks executed 0%
    #####: 5512:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5512-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8UnitTestD2Ev:
function _ZN7testing8UnitTestD2Ev called 2 returned 100% blocks executed 100%
        2: 5512:UnitTest::~UnitTest() { delete impl_; }
        2: 5512-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5512-block  1
call    2 returned 2
        2: 5512-block  2
call    3 returned 2
------------------
        -: 5513:
        -: 5514:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 5515:// Google Test trace stack.
function _ZN7testing8UnitTest14PushGTestTraceERKNS_8internal9TraceInfoE called 0 returned 0% blocks executed 0%
    #####: 5516:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
        -: 5517:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5518:  internal::MutexLock lock(&mutex_);
    %%%%%: 5518-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5519:  impl_->gtest_trace_stack().push_back(trace);
    %%%%%: 5519-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5519-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5520:}
    %%%%%: 5520-block  0
call    0 never executed
    $$$$$: 5520-block  1
call    1 never executed
        -: 5521:
        -: 5522:// Pops a trace from the per-thread Google Test trace stack.
function _ZN7testing8UnitTest13PopGTestTraceEv called 0 returned 0% blocks executed 0%
    #####: 5523:void UnitTest::PopGTestTrace() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5524:  internal::MutexLock lock(&mutex_);
    %%%%%: 5524-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5525:  impl_->gtest_trace_stack().pop_back();
    %%%%%: 5525-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5525-block  1
call    3 never executed
    #####: 5526:}
call    0 never executed
    $$$$$: 5526-block  0
call    1 never executed
        -: 5527:
        -: 5528:namespace internal {
        -: 5529:
function _ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE called 2 returned 100% blocks executed 42%
        2: 5530:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        2: 5531:    : parent_(parent),
        -: 5532:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        2: 5533:          default_global_test_part_result_reporter_(this),
call    0 returned 2
        2: 5534:      default_per_thread_test_part_result_reporter_(this),
call    0 returned 2
        2: 5535:      GTEST_DISABLE_MSC_WARNINGS_POP_() global_test_part_result_reporter_(
        -: 5536:          &default_global_test_part_result_reporter_),
        2: 5537:      per_thread_test_part_result_reporter_(
        2: 5537-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 5537-block  1
        -: 5538:          &default_per_thread_test_part_result_reporter_),
        2: 5539:      parameterized_test_registry_(),
call    0 returned 2
        2: 5540:      parameterized_tests_registered_(false),
        2: 5541:      last_death_test_suite_(-1),
        2: 5542:      current_test_suite_(nullptr),
        2: 5543:      current_test_info_(nullptr),
        2: 5544:      ad_hoc_test_result_(),
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 5545:      os_stack_trace_getter_(nullptr),
        2: 5546:      post_flag_parse_init_performed_(false),
        2: 5547:      random_seed_(0),  // Will be overridden by the flag before first use.
        2: 5548:      random_(0),       // Will be reseeded before first use.
        2: 5548-block  0
call    0 returned 2
        2: 5549:      start_timestamp_(0),
        2: 5550:      elapsed_time_(0),
        -: 5551:#if GTEST_HAS_DEATH_TEST
        2: 5552:      death_test_factory_(new DefaultDeathTestFactory),
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 5552-block  0
call    3 returned 2
call    4 returned 2
        -: 5553:#endif
        -: 5554:      // Will be overridden by the flag before first use.
       14: 5555:      catch_exceptions_(false) {
        2: 5555-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 5555-block  1
call    4 returned 2
call    5 returned 2
call    6 returned 2
call    7 returned 2
call    8 returned 2
        2: 5555-block  2
call    9 returned 2
branch 10 taken 2 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 2
call   13 returned 2
branch 14 taken 2 (fallthrough)
branch 15 taken 0 (throw)
        2: 5556:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
        2: 5556-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 5556-block  1
call    4 returned 2
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
    $$$$$: 5556-block  2
branch  8 never executed
branch  9 never executed
    $$$$$: 5556-block  3
call   10 never executed
        2: 5557:}
        2: 5557-block  0
    $$$$$: 5557-block  1
call    0 never executed
    $$$$$: 5557-block  2
call    1 never executed
    $$$$$: 5557-block  3
call    2 never executed
    $$$$$: 5557-block  4
call    3 never executed
    $$$$$: 5557-block  5
call    4 never executed
    $$$$$: 5557-block  6
call    5 never executed
    $$$$$: 5557-block  7
call    6 never executed
    $$$$$: 5557-block  8
call    7 never executed
    $$$$$: 5557-block  9
call    8 never executed
    $$$$$: 5557-block 10
call    9 never executed
    $$$$$: 5557-block 11
call   10 never executed
    $$$$$: 5557-block 12
call   11 never executed
    $$$$$: 5557-block 13
call   12 never executed
    $$$$$: 5557-block 14
call   13 never executed
    $$$$$: 5557-block 15
call   14 never executed
    $$$$$: 5557-block 16
call   15 never executed
        -: 5558:
        4: 5559:UnitTestImpl::~UnitTestImpl() {
        -: 5560:  // Deletes every TestSuite.
        2: 5561:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5562:
        -: 5563:  // Deletes every Environment.
        2: 5564:  ForEach(environments_, internal::Delete<Environment>);
        -: 5565:
        2: 5566:  delete os_stack_trace_getter_;
        4: 5567:}
------------------
_ZN7testing8internal12UnitTestImplD0Ev:
function _ZN7testing8internal12UnitTestImplD0Ev called 2 returned 100% blocks executed 100%
        2: 5559:UnitTestImpl::~UnitTestImpl() {
        -: 5560:  // Deletes every TestSuite.
        -: 5561:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5562:
        -: 5563:  // Deletes every Environment.
        -: 5564:  ForEach(environments_, internal::Delete<Environment>);
        -: 5565:
        -: 5566:  delete os_stack_trace_getter_;
        2: 5567:}
        2: 5567-block  0
call    0 returned 2
call    1 returned 2
------------------
_ZN7testing8internal12UnitTestImplD2Ev:
function _ZN7testing8internal12UnitTestImplD2Ev called 2 returned 100% blocks executed 100%
        2: 5559:UnitTestImpl::~UnitTestImpl() {
        -: 5560:  // Deletes every TestSuite.
        2: 5561:  ForEach(test_suites_, internal::Delete<TestSuite>);
        2: 5561-block  0
call    0 returned 2
        -: 5562:
        -: 5563:  // Deletes every Environment.
        2: 5564:  ForEach(environments_, internal::Delete<Environment>);
call    0 returned 2
        -: 5565:
        2: 5566:  delete os_stack_trace_getter_;
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 5566-block  0
call    2 returned 1
        2: 5567:}
        2: 5567-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
call    5 returned 2
call    6 returned 2
call    7 returned 2
call    8 returned 2
call    9 returned 2
call   10 returned 2
call   11 returned 2
call   12 returned 2
call   13 returned 2
call   14 returned 2
call   15 returned 2
------------------
        -: 5568:
        -: 5569:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 5570:// context of a test, to current test suite's ad_hoc_test_result when invoke
        -: 5571:// from SetUpTestSuite/TearDownTestSuite, or to the global property set
        -: 5572:// otherwise.  If the result already contains a property with the same key,
        -: 5573:// the value will be updated.
function _ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 5574:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    #####: 5575:  std::string xml_element;
    %%%%%: 5575-block  0
call    0 never executed
        -: 5576:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 5577:
    #####: 5578:  if (current_test_info_ != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 5579:    xml_element = "testcase";
    %%%%%: 5579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5580:    test_result = &(current_test_info_->result_);
    %%%%%: 5580-block  0
    #####: 5581:  } else if (current_test_suite_ != nullptr) {
    %%%%%: 5581-block  0
branch  0 never executed
branch  1 never executed
    #####: 5582:    xml_element = "testsuite";
    %%%%%: 5582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5583:    test_result = &(current_test_suite_->ad_hoc_test_result_);
    %%%%%: 5583-block  0
        -: 5584:  } else {
    #####: 5585:    xml_element = "testsuites";
    %%%%%: 5585-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5586:    test_result = &ad_hoc_test_result_;
    %%%%%: 5586-block  0
        -: 5587:  }
    #####: 5588:  test_result->RecordProperty(xml_element, test_property);
    %%%%%: 5588-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5589:}
    %%%%%: 5589-block  0
call    0 never executed
    $$$$$: 5589-block  1
call    1 never executed
        -: 5590:
        -: 5591:#if GTEST_HAS_DEATH_TEST
        -: 5592:// Disables event forwarding if the control is currently in a death test
        -: 5593:// subprocess. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl32SuppressTestEventsIfInSubprocessEv called 2 returned 100% blocks executed 60%
        2: 5594:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
        2: 5595:  if (internal_run_death_test_flag_.get() != nullptr)
        2: 5595-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####: 5596:    listeners()->SuppressEventForwarding();
    %%%%%: 5596-block  0
call    0 never executed
call    1 never executed
        2: 5597:}
        -: 5598:#endif  // GTEST_HAS_DEATH_TEST
        -: 5599:
        -: 5600:// Initializes event listeners performing XML output as specified by
        -: 5601:// UnitTestOptions. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl18ConfigureXmlOutputEv called 2 returned 100% blocks executed 20%
        2: 5602:void UnitTestImpl::ConfigureXmlOutput() {
        2: 5603:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        2: 5603-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 5604:#if GTEST_HAS_FILE_SYSTEM
        2: 5605:  if (output_format == "xml") {
        2: 5605-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####: 5606:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    %%%%%: 5606-block  0
call    0 never executed
    %%%%%: 5606-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5606-block  2
branch  4 never executed
branch  5 never executed
    #####: 5607:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5607-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5607-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5607-block  2
call   10 never executed
    $$$$$: 5607-block  3
call   11 never executed
    $$$$$: 5607-block  4
    $$$$$: 5607-block  5
call   12 never executed
        2: 5608:  } else if (output_format == "json") {
        2: 5608-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####: 5609:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    %%%%%: 5609-block  0
call    0 never executed
    %%%%%: 5609-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5609-block  2
branch  4 never executed
branch  5 never executed
    #####: 5610:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5610-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5610-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5610-block  2
call   10 never executed
    $$$$$: 5610-block  3
call   11 never executed
    $$$$$: 5610-block  4
    $$$$$: 5610-block  5
call   12 never executed
        2: 5611:  } else if (output_format != "") {
        2: 5611-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####: 5612:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    %%%%%: 5612-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5612-block  1
call    3 never executed
    %%%%%: 5612-block  2
call    4 never executed
    $$$$$: 5612-block  3
call    5 never executed
    $$$$$: 5612-block  4
    #####: 5613:                        << output_format << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5613-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5613-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5614:  }
        -: 5615:#else
        -: 5616:  GTEST_LOG_(ERROR) << "ERROR: alternative output formats require "
        -: 5617:                    << "GTEST_HAS_FILE_SYSTEM to be enabled";
        -: 5618:#endif  // GTEST_HAS_FILE_SYSTEM
        2: 5619:}
        2: 5619-block  0
call    0 returned 2
    $$$$$: 5619-block  1
call    1 never executed
        -: 5620:
        -: 5621:#if GTEST_CAN_STREAM_RESULTS_
        -: 5622:// Initializes event listeners for streaming test results in string form.
        -: 5623:// Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl24ConfigureStreamingOutputEv called 2 returned 100% blocks executed 12%
        2: 5624:void UnitTestImpl::ConfigureStreamingOutput() {
        2: 5625:  const std::string& target = GTEST_FLAG_GET(stream_result_to);
        2: 5626:  if (!target.empty()) {
        2: 5626-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####: 5627:    const size_t pos = target.find(':');
    %%%%%: 5627-block  0
call    0 never executed
    #####: 5628:    if (pos != std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####: 5629:      listeners()->Append(
    %%%%%: 5629-block  0
call    0 never executed
    %%%%%: 5629-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5629-block  2
branch  4 never executed
branch  5 never executed
    #####: 5630:          new StreamingListener(target.substr(0, pos), target.substr(pos + 1)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5630-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5630-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5630-block  2
call   10 never executed
call   11 never executed
    $$$$$: 5630-block  3
call   12 never executed
    $$$$$: 5630-block  4
    $$$$$: 5630-block  5
call   13 never executed
    $$$$$: 5630-block  6
    $$$$$: 5630-block  7
call   14 never executed
        -: 5631:    } else {
    #####: 5632:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
    %%%%%: 5632-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5632-block  1
call    3 never executed
    %%%%%: 5632-block  2
call    4 never executed
    $$$$$: 5632-block  3
call    5 never executed
    #####: 5633:                          << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5633-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5633-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5634:    }
        -: 5635:  }
        2: 5636:}
        2: 5636-block  0
        -: 5637:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5638:
        -: 5639:// Performs initialization dependent upon flag values obtained in
        -: 5640:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 5641:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 5642:// this function is also called from RunAllTests.  Since this function can be
        -: 5643:// called more than once, it has to be idempotent.
function _ZN7testing8internal12UnitTestImpl19PostFlagParsingInitEv called 4 returned 100% blocks executed 60%
        4: 5644:void UnitTestImpl::PostFlagParsingInit() {
        -: 5645:  // Ensures that this function does not execute more than once.
        4: 5646:  if (!post_flag_parse_init_performed_) {
        4: 5646-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2: 5647:    post_flag_parse_init_performed_ = true;
        -: 5648:
        -: 5649:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5650:    // Register to send notifications about key process state changes.
        -: 5651:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 5652:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5653:
        -: 5654:#if GTEST_HAS_DEATH_TEST
        2: 5655:    InitDeathTestSubprocessControlInfo();
        2: 5655-block  0
call    0 returned 2
        2: 5656:    SuppressTestEventsIfInSubprocess();
call    0 returned 2
        -: 5657:#endif  // GTEST_HAS_DEATH_TEST
        -: 5658:
        -: 5659:    // Registers parameterized tests. This makes parameterized tests
        -: 5660:    // available to the UnitTest reflection API without running
        -: 5661:    // RUN_ALL_TESTS.
        2: 5662:    RegisterParameterizedTests();
call    0 returned 2
        -: 5663:
        -: 5664:    // Configures listeners for XML output. This makes it possible for users
        -: 5665:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
        2: 5666:    ConfigureXmlOutput();
call    0 returned 2
        -: 5667:
        2: 5668:    if (GTEST_FLAG_GET(brief)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 5669:      listeners()->SetDefaultResultPrinter(new BriefUnitTestResultPrinter);
    %%%%%: 5669-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5669-block  1
branch  6 never executed
branch  7 never executed
    $$$$$: 5669-block  2
call    8 never executed
        -: 5670:    }
        -: 5671:
        -: 5672:#if GTEST_CAN_STREAM_RESULTS_
        -: 5673:    // Configures listeners for streaming test results to the specified server.
        2: 5674:    ConfigureStreamingOutput();
        2: 5674-block  0
call    0 returned 2
        -: 5675:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5676:
        -: 5677:#if GTEST_HAS_ABSL
        -: 5678:    if (GTEST_FLAG_GET(install_failure_signal_handler)) {
        -: 5679:      absl::FailureSignalHandlerOptions options;
        -: 5680:      absl::InstallFailureSignalHandler(options);
        -: 5681:    }
        -: 5682:#endif  // GTEST_HAS_ABSL
        -: 5683:  }
        4: 5684:}
        4: 5684-block  0
        -: 5685:
        -: 5686:// A predicate that checks the name of a TestSuite against a known
        -: 5687:// value.
        -: 5688://
        -: 5689:// This is used for implementation of the UnitTest class only.  We put
        -: 5690:// it in the anonymous namespace to prevent polluting the outer
        -: 5691:// namespace.
        -: 5692://
        -: 5693:// TestSuiteNameIs is copyable.
        -: 5694:class TestSuiteNameIs {
        -: 5695: public:
        -: 5696:  // Constructor.
function _ZN7testing8internal15TestSuiteNameIsC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 100%
        2: 5697:  explicit TestSuiteNameIs(const std::string& name) : name_(name) {}
        2: 5697-block  0
call    0 returned 2
        -: 5698:
        -: 5699:  // Returns true if and only if the name of test_suite matches name_.
function _ZNK7testing8internal15TestSuiteNameIsclEPKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 5700:  bool operator()(const TestSuite* test_suite) const {
    #####: 5701:    return test_suite != nullptr &&
    %%%%%: 5701-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5701-block  1
    %%%%%: 5701-block  2
    #####: 5702:           strcmp(test_suite->name(), name_.c_str()) == 0;
    %%%%%: 5702-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5702-block  1
        -: 5703:  }
        -: 5704:
        -: 5705: private:
        -: 5706:  std::string name_;
        -: 5707:};
        -: 5708:
        -: 5709:// Finds and returns a TestSuite with the given name.  If one doesn't
        -: 5710:// exist, creates one and returns it.  It's the CALLER'S
        -: 5711:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 5712:// TESTS ARE NOT SHUFFLED.
        -: 5713://
        -: 5714:// Arguments:
        -: 5715://
        -: 5716://   test_suite_name: name of the test suite
        -: 5717://   type_param:      the name of the test suite's type parameter, or NULL if
        -: 5718://                    this is not a typed or a type-parameterized test suite.
        -: 5719://   set_up_tc:       pointer to the function that sets up the test suite
        -: 5720://   tear_down_tc:    pointer to the function that tears down the test suite
function _ZN7testing8internal12UnitTestImpl12GetTestSuiteEPKcS3_PFvvES5_ called 2 returned 100% blocks executed 45%
        2: 5721:TestSuite* UnitTestImpl::GetTestSuite(
        -: 5722:    const char* test_suite_name, const char* type_param,
        -: 5723:    internal::SetUpTestSuiteFunc set_up_tc,
        -: 5724:    internal::TearDownTestSuiteFunc tear_down_tc) {
        -: 5725:  // Can we find a TestSuite with the given name?
        -: 5726:  const auto test_suite =
        2: 5727:      std::find_if(test_suites_.rbegin(), test_suites_.rend(),
        2: 5727-block  0
call    0 returned 2
call    1 returned 2
    $$$$$: 5727-block  1
    $$$$$: 5727-block  2
        4: 5728:                   TestSuiteNameIs(test_suite_name));
        2: 5728-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 5728-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 2
branch  8 taken 2 (fallthrough)
branch  9 taken 0 (throw)
        2: 5728-block  2
call   10 returned 2
call   11 returned 2
call   12 returned 2
    $$$$$: 5728-block  3
call   13 never executed
    $$$$$: 5728-block  4
call   14 never executed
    $$$$$: 5728-block  5
call   15 never executed
    $$$$$: 5728-block  6
    $$$$$: 5728-block  7
    $$$$$: 5728-block  8
        -: 5729:
       2*: 5730:  if (test_suite != test_suites_.rend()) return *test_suite;
call    0 returned 2
call    1 returned 2
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    %%%%%: 5730-block  0
call    4 never executed
        -: 5731:
        -: 5732:  // No.  Let's create one.
        -: 5733:  auto* const new_test_suite =
        2: 5734:      new TestSuite(test_suite_name, type_param, set_up_tc, tear_down_tc);
        2: 5734-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 5734-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5734-block  2
branch  6 never executed
branch  7 never executed
    $$$$$: 5734-block  3
call    8 never executed
        -: 5735:
        2: 5736:  const UnitTestFilter death_test_suite_filter(kDeathTestSuiteFilter);
        2: 5736-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 5736-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2: 5736-block  2
call    7 returned 2
call    8 returned 2
    $$$$$: 5736-block  3
call    9 never executed
    $$$$$: 5736-block  4
call   10 never executed
    $$$$$: 5736-block  5
    $$$$$: 5736-block  6
        -: 5737:  // Is this a death test suite?
        2: 5738:  if (death_test_suite_filter.MatchesName(test_suite_name)) {
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 5738-block  0
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2: 5738-block  1
call    7 returned 2
call    8 returned 2
branch  9 taken 0 (fallthrough)
branch 10 taken 2
    $$$$$: 5738-block  2
call   11 never executed
    $$$$$: 5738-block  3
call   12 never executed
    $$$$$: 5738-block  4
    $$$$$: 5738-block  5
        -: 5739:    // Yes.  Inserts the test suite after the last death test suite
        -: 5740:    // defined so far.  This only works when the test suites haven't
        -: 5741:    // been shuffled.  Otherwise we may end up running a death test
        -: 5742:    // after a non-death test.
    #####: 5743:    ++last_death_test_suite_;
    #####: 5744:    test_suites_.insert(test_suites_.begin() + last_death_test_suite_,
    %%%%%: 5744-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5744-block  1
    $$$$$: 5744-block  2
    $$$$$: 5744-block  3
    $$$$$: 5744-block  4
        -: 5745:                        new_test_suite);
        -: 5746:  } else {
        -: 5747:    // No.  Appends to the end of the list.
        2: 5748:    test_suites_.push_back(new_test_suite);
        2: 5748-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 5749:  }
        -: 5750:
        2: 5751:  test_suite_indices_.push_back(static_cast<int>(test_suite_indices_.size()));
        2: 5751-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 5751-block  1
        2: 5752:  return new_test_suite;
        2: 5753:}
        2: 5753-block  0
call    0 returned 2
    $$$$$: 5753-block  1
call    1 never executed
        -: 5754:
        -: 5755:// Helpers for setting up / tearing down the given environment.  They
        -: 5756:// are for use in the ForEach() function.
function _ZN7testing8internalL16SetUpEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5757:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    %%%%%: 5757-block  0
call    0 never executed
function _ZN7testing8internalL19TearDownEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5758:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    %%%%%: 5758-block  0
call    0 never executed
        -: 5759:
        -: 5760:// Runs all tests in this UnitTest object, prints the result, and
        -: 5761:// returns true if all tests are successful.  If any exception is
        -: 5762:// thrown during a test, the test is considered to be failed, but the
        -: 5763:// rest of the tests will still be run.
        -: 5764://
        -: 5765:// When parameterized tests are enabled, it expands and registers
        -: 5766:// parameterized tests first in RegisterParameterizedTests().
        -: 5767:// All other functions called from RunAllTests() may safely assume that
        -: 5768:// parameterized tests are ready to be counted and run.
function _ZN7testing8internal12UnitTestImpl11RunAllTestsEv called 2 returned 100% blocks executed 54%
        2: 5769:bool UnitTestImpl::RunAllTests() {
        -: 5770:  // True if and only if Google Test is initialized before RUN_ALL_TESTS() is
        -: 5771:  // called.
        2: 5772:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
        2: 5772-block  0
call    0 returned 2
        -: 5773:
        -: 5774:  // Do not run any test if the --help flag was specified.
       2*: 5775:  if (g_help_flag) return true;
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 5775-block  0
        -: 5776:
        -: 5777:  // Repeats the call to the post-flag parsing initialization in case the
        -: 5778:  // user didn't call InitGoogleTest.
        2: 5779:  PostFlagParsingInit();
        2: 5779-block  0
call    0 returned 2
        -: 5780:
        -: 5781:#if GTEST_HAS_FILE_SYSTEM
        -: 5782:  // Even if sharding is not on, test runners may want to use the
        -: 5783:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 5784:  // protocol.
        2: 5785:  internal::WriteToShardStatusFileIfNeeded();
call    0 returned 2
        -: 5786:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 5787:
        -: 5788:  // True if and only if we are in a subprocess for running a thread-safe-style
        -: 5789:  // death test.
        2: 5790:  bool in_subprocess_for_death_test = false;
        -: 5791:
        -: 5792:#if GTEST_HAS_DEATH_TEST
        2: 5793:  in_subprocess_for_death_test =
        2: 5794:      (internal_run_death_test_flag_.get() != nullptr);
call    0 returned 2
        -: 5795:#if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5796:  if (in_subprocess_for_death_test) {
        -: 5797:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 5798:  }
        -: 5799:#endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5800:#endif  // GTEST_HAS_DEATH_TEST
        -: 5801:
        2: 5802:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
call    0 returned 2
        -: 5803:                                        in_subprocess_for_death_test);
        -: 5804:
        -: 5805:  // Compares the full test names with the filter to decide which
        -: 5806:  // tests to run.
        -: 5807:  const bool has_tests_to_run =
       2*: 5808:      FilterTests(should_shard ? HONOR_SHARDING_PROTOCOL
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 5808-block  0
        2: 5808-block  1
        2: 5808-block  2
call    2 returned 2
        2: 5809:                               : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 5810:
        -: 5811:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
        2: 5812:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -: 5813:    // This must be called *after* FilterTests() has been called.
        1: 5814:    ListTestsMatchingFilter();
        1: 5814-block  0
call    0 returned 1
        1: 5815:    return true;
        -: 5816:  }
        -: 5817:
        1: 5818:  random_seed_ = GetRandomSeedFromFlag(GTEST_FLAG_GET(random_seed));
        1: 5818-block  0
call    0 returned 1
        -: 5819:
        -: 5820:  // True if and only if at least one test has failed.
        1: 5821:  bool failed = false;
        -: 5822:
        1: 5823:  TestEventListener* repeater = listeners()->repeater();
call    0 returned 1
call    1 returned 1
        -: 5824:
        1: 5825:  start_timestamp_ = GetTimeInMillis();
call    0 returned 1
        1: 5826:  repeater->OnTestProgramStart(*parent_);
call    0 returned 1
        -: 5827:
        -: 5828:  // How many times to repeat the tests?  We don't want to repeat them
        -: 5829:  // when we are inside the subprocess of a death test.
       1*: 5830:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG_GET(repeat);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5830-block  0
        1: 5830-block  1
        -: 5831:
        -: 5832:  // Repeats forever if the repeat count is negative.
        1: 5833:  const bool gtest_repeat_forever = repeat < 0;
        -: 5834:
        -: 5835:  // Should test environments be set up and torn down for each repeat, or only
        -: 5836:  // set up on the first and torn down on the last iteration? If there is no
        -: 5837:  // "last" iteration because the tests will repeat forever, always recreate the
        -: 5838:  // environments to avoid leaks in case one of the environments is using
        -: 5839:  // resources that are external to this process. Without this check there would
        -: 5840:  // be no way to clean up those external resources automatically.
        1: 5841:  const bool recreate_environments_when_repeating =
       1*: 5842:      GTEST_FLAG_GET(recreate_environments_when_repeating) ||
        1: 5842-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5842-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5842-block  2
        1: 5842-block  3
        -: 5843:      gtest_repeat_forever;
        -: 5844:
        2: 5845:  for (int i = 0; gtest_repeat_forever || i != repeat; i++) {
        1: 5845-block  0
        1: 5845-block  1
        2: 5845-block  2
branch  0 taken 0
branch  1 taken 2 (fallthrough)
        2: 5845-block  3
branch  2 taken 1
branch  3 taken 1 (fallthrough)
        -: 5846:    // We want to preserve failures generated by ad-hoc test
        -: 5847:    // assertions executed before RUN_ALL_TESTS().
        1: 5848:    ClearNonAdHocTestResult();
        1: 5848-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5849:
        1: 5850:    Timer timer;
        1: 5850-block  0
call    0 returned 1
        -: 5851:
        -: 5852:    // Shuffles test suites and tests if requested.
        1: 5853:    if (has_tests_to_run && GTEST_FLAG_GET(shuffle)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5853-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5854:      random()->Reseed(static_cast<uint32_t>(random_seed_));
    %%%%%: 5854-block  0
call    0 never executed
call    1 never executed
        -: 5855:      // This should be done before calling OnTestIterationStart(),
        -: 5856:      // such that a test event listener can see the actual test order
        -: 5857:      // in the event.
    #####: 5858:      ShuffleTests();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5859:    }
        -: 5860:
        -: 5861:    // Tells the unit test event listeners that the tests are about to start.
        1: 5862:    repeater->OnTestIterationStart(*parent_, i);
        1: 5862-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5863:
        -: 5864:    // Runs each test suite if there is at least one test to run.
        1: 5865:    if (has_tests_to_run) {
        1: 5865-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5866:      // Sets up all environments beforehand. If test environments aren't
        -: 5867:      // recreated for each iteration, only do so on the first iteration.
       1*: 5868:      if (i == 0 || recreate_environments_when_repeating) {
        1: 5868-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5868-block  1
branch  2 never executed
branch  3 never executed
        1: 5869:        repeater->OnEnvironmentsSetUpStart(*parent_);
        1: 5869-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5870:        ForEach(environments_, SetUpEnvironment);
        1: 5870-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5871:        repeater->OnEnvironmentsSetUpEnd(*parent_);
        1: 5871-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5872:      }
        -: 5873:
        -: 5874:      // Runs the tests only if there was no fatal failure or skip triggered
        -: 5875:      // during global set-up.
        1: 5876:      if (Test::IsSkipped()) {
        1: 5876-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5876-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 5877:        // Emit diagnostics when global set-up calls skip, as it will not be
        -: 5878:        // emitted by default.
        -: 5879:        TestResult& test_result =
    #####: 5880:            *internal::GetUnitTestImpl()->current_test_result();
    %%%%%: 5880-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5880-block  1
call    3 never executed
    #####: 5881:        for (int j = 0; j < test_result.total_part_count(); ++j) {
    %%%%%: 5881-block  0
    %%%%%: 5881-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5882:          const TestPartResult& test_part_result =
    #####: 5883:              test_result.GetTestPartResult(j);
    %%%%%: 5883-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5884:          if (test_part_result.type() == TestPartResult::kSkip) {
    %%%%%: 5884-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5885:            const std::string& result = test_part_result.message();
    %%%%%: 5885-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5885-block  1
call    5 never executed
    $$$$$: 5885-block  2
call    6 never executed
    $$$$$: 5885-block  3
    #####: 5886:            printf("%s\n", result.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5887:          }
    %%%%%: 5887-block  0
call    0 never executed
    $$$$$: 5887-block  1
call    1 never executed
        -: 5888:        }
    #####: 5889:        fflush(stdout);
    %%%%%: 5889-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        1: 5890:      } else if (!Test::HasFatalFailure()) {
        1: 5890-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5890-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        2: 5891:        for (int test_index = 0; test_index < total_test_suite_count();
        1: 5891-block  0
        1: 5891-block  1
        2: 5891-block  2
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        -: 5892:             test_index++) {
        1: 5893:          GetMutableSuiteCase(test_index)->Run();
        1: 5893-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5893-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
       1*: 5894:          if (GTEST_FLAG_GET(fail_fast) &&
        1: 5894-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5894-block  1
        1: 5894-block  2
        1: 5894-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5895:              GetMutableSuiteCase(test_index)->Failed()) {
    %%%%%: 5895-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5895-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5895-block  2
branch  6 never executed
branch  7 never executed
    #####: 5896:            for (int j = test_index + 1; j < total_test_suite_count(); j++) {
    %%%%%: 5896-block  0
    %%%%%: 5896-block  1
    %%%%%: 5896-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5897:              GetMutableSuiteCase(j)->Skip();
    %%%%%: 5897-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5897-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5898:            }
    #####: 5899:            break;
    %%%%%: 5899-block  0
        -: 5900:          }
        -: 5901:        }
    #####: 5902:      } else if (Test::HasFatalFailure()) {
    %%%%%: 5902-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5902-block  1
branch  3 never executed
branch  4 never executed
        -: 5903:        // If there was a fatal failure during the global setup then we know we
        -: 5904:        // aren't going to run any tests. Explicitly mark all of the tests as
        -: 5905:        // skipped to make this obvious in the output.
    #####: 5906:        for (int test_index = 0; test_index < total_test_suite_count();
    %%%%%: 5906-block  0
    %%%%%: 5906-block  1
    %%%%%: 5906-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5907:             test_index++) {
    #####: 5908:          GetMutableSuiteCase(test_index)->Skip();
    %%%%%: 5908-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5908-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5909:        }
        -: 5910:      }
        -: 5911:
        -: 5912:      // Tears down all environments in reverse order afterwards. If test
        -: 5913:      // environments aren't recreated for each iteration, only do so on the
        -: 5914:      // last iteration.
       1*: 5915:      if (i == repeat - 1 || recreate_environments_when_repeating) {
        1: 5915-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5915-block  1
branch  2 never executed
branch  3 never executed
        1: 5916:        repeater->OnEnvironmentsTearDownStart(*parent_);
        1: 5916-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5917:        std::for_each(environments_.rbegin(), environments_.rend(),
        1: 5917-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 5917-block  1
    $$$$$: 5917-block  2
        -: 5918:                      TearDownEnvironment);
        1: 5919:        repeater->OnEnvironmentsTearDownEnd(*parent_);
        1: 5919-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5920:      }
        -: 5921:    }
        -: 5922:
        1: 5923:    elapsed_time_ = timer.Elapsed();
        1: 5923-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5924:
        -: 5925:    // Tells the unit test event listener that the tests have just finished.
        1: 5926:    repeater->OnTestIterationEnd(*parent_, i);
        1: 5926-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5927:
        -: 5928:    // Gets the result and clears it.
        1: 5929:    if (!Passed()) {
        1: 5929-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5929-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 5930:      failed = true;
    %%%%%: 5930-block  0
        -: 5931:    }
        -: 5932:
        -: 5933:    // Restores the original test order after the iteration.  This
        -: 5934:    // allows the user to quickly repro a failure that happens in the
        -: 5935:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 5936:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 5937:    // case the user somehow changes the value of the flag somewhere
        -: 5938:    // (it's always safe to unshuffle the tests).
        1: 5939:    UnshuffleTests();
        1: 5939-block  0
call    0 returned 1
        -: 5940:
        1: 5941:    if (GTEST_FLAG_GET(shuffle)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5942:      // Picks a new random seed for each iteration.
    #####: 5943:      random_seed_ = GetNextRandomSeed(random_seed_);
    %%%%%: 5943-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5943-block  1
        -: 5944:    }
        -: 5945:  }
        -: 5946:
        1: 5947:  repeater->OnTestProgramEnd(*parent_);
        1: 5947-block  0
call    0 returned 1
        -: 5948:
        1: 5949:  if (!gtest_is_initialized_before_run_all_tests) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5950:    ColoredPrintf(
    %%%%%: 5950-block  0
call    0 never executed
        -: 5951:        GTestColor::kRed,
        -: 5952:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 5953:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 5954:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 5955:        " will start to enforce the valid usage. "
        -: 5956:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
        -: 5957:#if GTEST_FOR_GOOGLE_
        -: 5958:    ColoredPrintf(GTestColor::kRed,
        -: 5959:                  "For more details, see http://wiki/Main/ValidGUnitMain.\n");
        -: 5960:#endif  // GTEST_FOR_GOOGLE_
        -: 5961:  }
        -: 5962:
        1: 5963:  return !failed;
        1: 5963-block  0
        -: 5964:}
        -: 5965:
        -: 5966:#if GTEST_HAS_FILE_SYSTEM
        -: 5967:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 5968:// if the variable is present. If a file already exists at this location, this
        -: 5969:// function will write over it. If the variable is present, but the file cannot
        -: 5970:// be created, prints an error and exits.
function _ZN7testing8internal30WriteToShardStatusFileIfNeededEv called 2 returned 100% blocks executed 33%
        2: 5971:void WriteToShardStatusFileIfNeeded() {
        2: 5972:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
        2: 5972-block  0
call    0 returned 2
        2: 5973:  if (test_shard_file != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 5974:    FILE* const file = posix::FOpen(test_shard_file, "w");
    %%%%%: 5974-block  0
call    0 never executed
    #####: 5975:    if (file == nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 5976:      ColoredPrintf(GTestColor::kRed,
    %%%%%: 5976-block  0
call    0 never executed
        -: 5977:                    "Could not write to the test shard status file \"%s\" "
        -: 5978:                    "specified by the %s environment variable.\n",
        -: 5979:                    test_shard_file, kTestShardStatusFile);
    #####: 5980:      fflush(stdout);
call    0 never executed
    #####: 5981:      exit(EXIT_FAILURE);
call    0 never executed
        -: 5982:    }
    #####: 5983:    fclose(file);
    %%%%%: 5983-block  0
call    0 never executed
        -: 5984:  }
        2: 5985:}
        -: 5986:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 5987:
        -: 5988:// Checks whether sharding is enabled by examining the relevant
        -: 5989:// environment variable values. If the variables are present,
        -: 5990:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 5991:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 5992:// disabled because it must only be applied to the original test
        -: 5993:// process. Otherwise, we could filter out death tests we intended to execute.
function _ZN7testing8internal11ShouldShardEPKcS2_b called 3 returned 100% blocks executed 9%
        3: 5994:bool ShouldShard(const char* total_shards_env, const char* shard_index_env,
        -: 5995:                 bool in_subprocess_for_death_test) {
        3: 5996:  if (in_subprocess_for_death_test) {
        3: 5996-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 5997:    return false;
    %%%%%: 5997-block  0
        -: 5998:  }
        -: 5999:
        3: 6000:  const int32_t total_shards = Int32FromEnvOrDie(total_shards_env, -1);
        3: 6000-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 6001:  const int32_t shard_index = Int32FromEnvOrDie(shard_index_env, -1);
        3: 6001-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -: 6002:
        3: 6003:  if (total_shards == -1 && shard_index == -1) {
        3: 6003-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 6003-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        3: 6004:    return false;
        3: 6004-block  0
    #####: 6005:  } else if (total_shards == -1 && shard_index != -1) {
    %%%%%: 6005-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6005-block  1
branch  2 never executed
branch  3 never executed
    #####: 6006:    const Message msg = Message() << "Invalid environment variables: you have "
    %%%%%: 6006-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6006-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6006-block  2
call    6 never executed
    $$$$$: 6006-block  3
call    7 never executed
    $$$$$: 6006-block  4
    #####: 6007:                                  << kTestShardIndex << " = " << shard_index
    %%%%%: 6007-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6007-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6007-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6008:                                  << ", but have left " << kTestTotalShards
    %%%%%: 6008-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6008-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6009:                                  << " unset.\n";
    %%%%%: 6009-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6009-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6010:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6010-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6010-block  1
call    7 never executed
    $$$$$: 6010-block  2
call    8 never executed
    $$$$$: 6010-block  3
    #####: 6011:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6012:    exit(EXIT_FAILURE);
    %%%%%: 6012-block  0
call    0 never executed
    #####: 6013:  } else if (total_shards != -1 && shard_index == -1) {
    %%%%%: 6013-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6013-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6013-block  2
call    4 never executed
    #####: 6014:    const Message msg = Message()
    %%%%%: 6014-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6014-block  1
call    3 never executed
    $$$$$: 6014-block  2
call    4 never executed
    $$$$$: 6014-block  3
    #####: 6015:                        << "Invalid environment variables: you have "
    %%%%%: 6015-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6016:                        << kTestTotalShards << " = " << total_shards
    %%%%%: 6016-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6016-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6016-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6017:                        << ", but have left " << kTestShardIndex << " unset.\n";
    %%%%%: 6017-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6017-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6017-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6017-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6018:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6018-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6018-block  1
call    7 never executed
    $$$$$: 6018-block  2
call    8 never executed
    $$$$$: 6018-block  3
    #####: 6019:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6020:    exit(EXIT_FAILURE);
    %%%%%: 6020-block  0
call    0 never executed
    #####: 6021:  } else if (shard_index < 0 || shard_index >= total_shards) {
    %%%%%: 6021-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6021-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6021-block  2
call    4 never executed
        -: 6022:    const Message msg =
    #####: 6023:        Message() << "Invalid environment variables: we require 0 <= "
    %%%%%: 6023-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6023-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6023-block  2
call    6 never executed
    $$$$$: 6023-block  3
call    7 never executed
    $$$$$: 6023-block  4
    #####: 6024:                  << kTestShardIndex << " < " << kTestTotalShards
    %%%%%: 6024-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6024-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6024-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6025:                  << ", but you have " << kTestShardIndex << "=" << shard_index
    %%%%%: 6025-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6025-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6025-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6025-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6026:                  << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    %%%%%: 6026-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6026-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6026-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6026-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6026-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 6026-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    #####: 6027:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6027-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6027-block  1
call    7 never executed
    $$$$$: 6027-block  2
call    8 never executed
    $$$$$: 6027-block  3
    #####: 6028:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6029:    exit(EXIT_FAILURE);
    %%%%%: 6029-block  0
call    0 never executed
    =====: 6030:  }
    $$$$$: 6030-block  0
call    0 never executed
        -: 6031:
    #####: 6032:  return total_shards > 1;
    %%%%%: 6032-block  0
        -: 6033:}
        -: 6034:
        -: 6035:// Parses the environment variable var as an Int32. If it is unset,
        -: 6036:// returns default_val. If it is not an Int32, prints an error
        -: 6037:// and aborts.
function _ZN7testing8internal17Int32FromEnvOrDieEPKci called 6 returned 100% blocks executed 35%
        6: 6038:int32_t Int32FromEnvOrDie(const char* var, int32_t default_val) {
        6: 6039:  const char* str_val = posix::GetEnv(var);
        6: 6039-block  0
call    0 returned 6
        6: 6040:  if (str_val == nullptr) {
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6: 6041:    return default_val;
        6: 6041-block  0
        -: 6042:  }
        -: 6043:
        -: 6044:  int32_t result;
    #####: 6045:  if (!ParseInt32(Message() << "The value of environment variable " << var,
    %%%%%: 6045-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6045-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6045-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6045-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6045-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 6045-block  5
call   15 never executed
    $$$$$: 6045-block  6
        -: 6046:                  str_val, &result)) {
    #####: 6047:    exit(EXIT_FAILURE);
    %%%%%: 6047-block  0
call    0 never executed
        -: 6048:  }
    #####: 6049:  return result;
    %%%%%: 6049-block  0
        -: 6050:}
        -: 6051:
        -: 6052:// Given the total number of shards, the shard index, and the test id,
        -: 6053:// returns true if and only if the test should be run on this shard. The test id
        -: 6054:// is some arbitrary but unique non-negative integer assigned to each test
        -: 6055:// method. Assumes that 0 <= shard_index < total_shards.
function _ZN7testing8internal20ShouldRunTestOnShardEiii called 0 returned 0% blocks executed 0%
    #####: 6056:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    #####: 6057:  return (test_id % total_shards) == shard_index;
    %%%%%: 6057-block  0
        -: 6058:}
        -: 6059:
        -: 6060:// Compares the name of each test with the user-specified filter to
        -: 6061:// decide whether the test should be run, then records the result in
        -: 6062:// each TestSuite and TestInfo object.
        -: 6063:// If shard_tests == true, further filters tests based on sharding
        -: 6064:// variables in the environment - see
        -: 6065:// https://github.com/google/googletest/blob/main/docs/advanced.md
        -: 6066:// . Returns the number of tests that should run.
function _ZN7testing8internal12UnitTestImpl11FilterTestsENS1_18ReactionToShardingE called 2 returned 100% blocks executed 63%
        2: 6067:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        -: 6068:  const int32_t total_shards = shard_tests == HONOR_SHARDING_PROTOCOL
       2*: 6069:                                   ? Int32FromEnvOrDie(kTestTotalShards, -1)
        2: 6069-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 6069-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6069-block  2
        2: 6069-block  3
        2: 6070:                                   : -1;
        -: 6071:  const int32_t shard_index = shard_tests == HONOR_SHARDING_PROTOCOL
       2*: 6072:                                  ? Int32FromEnvOrDie(kTestShardIndex, -1)
        2: 6072-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 6072-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6072-block  2
        2: 6072-block  3
        2: 6073:                                  : -1;
        -: 6074:
        -: 6075:  const PositiveAndNegativeUnitTestFilter gtest_flag_filter(
        2: 6076:      GTEST_FLAG_GET(filter));
        2: 6076-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6077:  const UnitTestFilter disable_test_filter(kDisableTestFilter);
        2: 6077-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 6077-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2: 6077-block  2
call    7 returned 2
call    8 returned 2
    $$$$$: 6077-block  3
call    9 never executed
    $$$$$: 6077-block  4
call   10 never executed
    $$$$$: 6077-block  5
    $$$$$: 6077-block  6
        -: 6078:  // num_runnable_tests are the number of tests that will
        -: 6079:  // run across all shards (i.e., match filter and are not disabled).
        -: 6080:  // num_selected_tests are the number of tests to be run on
        -: 6081:  // this shard.
        2: 6082:  int num_runnable_tests = 0;
        2: 6083:  int num_selected_tests = 0;
        4: 6084:  for (auto* test_suite : test_suites_) {
call    0 returned 2
call    1 returned 2
        2: 6084-block  0
call    2 returned 2
call    3 returned 2
        4: 6084-block  1
call    4 returned 4
branch  5 taken 2
branch  6 taken 2 (fallthrough)
        2: 6085:    const std::string& test_suite_name = test_suite->name();
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2: 6085-block  0
call    5 returned 2
    $$$$$: 6085-block  1
call    6 never executed
    $$$$$: 6085-block  2
        2: 6086:    test_suite->set_should_run(false);
call    0 returned 2
        -: 6087:
        4: 6088:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
        4: 6088-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 2
branch  3 taken 2 (fallthrough)
        2: 6089:      TestInfo* const test_info = test_suite->test_info_list()[j];
        2: 6089-block  0
call    0 returned 2
call    1 returned 2
        2: 6090:      const std::string test_name(test_info->name());
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2: 6090-block  0
call    5 returned 2
    $$$$$: 6090-block  1
call    6 never executed
    $$$$$: 6090-block  2
        -: 6091:      // A test is disabled if test suite name or test name matches
        -: 6092:      // kDisableTestFilter.
        -: 6093:      const bool is_disabled =
       4*: 6094:          disable_test_filter.MatchesName(test_suite_name) ||
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6094-block  0
branch  3 taken 2 (fallthrough)
branch  4 taken 0
    %%%%%: 6094-block  1
        2: 6094-block  2
        2: 6095:          disable_test_filter.MatchesName(test_name);
        2: 6095-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6095-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
        2: 6096:      test_info->is_disabled_ = is_disabled;
        -: 6097:
        -: 6098:      const bool matches_filter =
        2: 6099:          gtest_flag_filter.MatchesTest(test_suite_name, test_name);
        2: 6099-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6100:      test_info->matches_filter_ = matches_filter;
        -: 6101:
        2: 6102:      const bool is_runnable =
       2*: 6103:          (GTEST_FLAG_GET(also_run_disabled_tests) || !is_disabled) &&
        2: 6103-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 6103-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 6103-block  2
branch  4 taken 2 (fallthrough)
branch  5 taken 0
        2: 6103-block  3
    %%%%%: 6103-block  4
        -: 6104:          matches_filter;
        -: 6105:
        -: 6106:      const bool is_in_another_shard =
       2*: 6107:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
        2: 6107-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 6107-block  1
        2: 6107-block  2
    #####: 6108:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    %%%%%: 6108-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        2: 6109:      test_info->is_in_another_shard_ = is_in_another_shard;
       2*: 6110:      const bool is_selected = is_runnable && !is_in_another_shard;
        2: 6110-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 6110-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 6110-block  2
    %%%%%: 6110-block  3
        -: 6111:
        2: 6112:      num_runnable_tests += is_runnable;
        2: 6113:      num_selected_tests += is_selected;
        -: 6114:
        2: 6115:      test_info->should_run_ = is_selected;
       2*: 6116:      test_suite->set_should_run(test_suite->should_run() || is_selected);
        2: 6116-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2: 6116-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 0
        2: 6116-block  2
    %%%%%: 6116-block  3
        2: 6116-block  4
call    5 returned 2
        2: 6117:    }
call    0 returned 2
    $$$$$: 6117-block  0
call    1 never executed
        2: 6118:  }
        2: 6118-block  0
call    0 returned 2
    $$$$$: 6118-block  1
call    1 never executed
        2: 6119:  return num_selected_tests;
        2: 6119-block  0
        2: 6120:}
        2: 6120-block  0
call    0 returned 2
call    1 returned 2
    $$$$$: 6120-block  1
call    2 never executed
    $$$$$: 6120-block  2
call    3 never executed
        -: 6121:
        -: 6122:// Prints the given C-string on a single line by replacing all '\n'
        -: 6123:// characters with string "\\n".  If the output takes more than
        -: 6124:// max_length characters, only prints the first max_length characters
        -: 6125:// and "...".
function _ZN7testing8internalL14PrintOnOneLineEPKci called 0 returned 0% blocks executed 0%
    #####: 6126:static void PrintOnOneLine(const char* str, int max_length) {
    #####: 6127:  if (str != nullptr) {
    %%%%%: 6127-block  0
branch  0 never executed
branch  1 never executed
    #####: 6128:    for (int i = 0; *str != '\0'; ++str) {
    %%%%%: 6128-block  0
    %%%%%: 6128-block  1
    %%%%%: 6128-block  2
branch  0 never executed
branch  1 never executed
    #####: 6129:      if (i >= max_length) {
    %%%%%: 6129-block  0
branch  0 never executed
branch  1 never executed
    #####: 6130:        printf("...");
    %%%%%: 6130-block  0
call    0 never executed
    #####: 6131:        break;
        -: 6132:      }
    #####: 6133:      if (*str == '\n') {
    %%%%%: 6133-block  0
branch  0 never executed
branch  1 never executed
    #####: 6134:        printf("\\n");
    %%%%%: 6134-block  0
call    0 never executed
    #####: 6135:        i += 2;
        -: 6136:      } else {
    #####: 6137:        printf("%c", *str);
    %%%%%: 6137-block  0
call    0 never executed
    #####: 6138:        ++i;
        -: 6139:      }
        -: 6140:    }
        -: 6141:  }
    #####: 6142:}
        -: 6143:
        -: 6144:// Prints the names of the tests matching the user-specified filter flag.
function _ZN7testing8internal12UnitTestImpl23ListTestsMatchingFilterEv called 1 returned 100% blocks executed 34%
        1: 6145:void UnitTestImpl::ListTestsMatchingFilter() {
        -: 6146:  // Print at most this many characters for each type/value parameter.
        1: 6147:  const int kMaxParamLength = 250;
        -: 6148:
        2: 6149:  for (auto* test_suite : test_suites_) {
        1: 6149-block  0
call    0 returned 1
call    1 returned 1
        1: 6149-block  1
call    2 returned 1
        1: 6149-block  2
call    3 returned 1
        2: 6149-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        1: 6150:    bool printed_test_suite_name = false;
        -: 6151:
        2: 6152:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
        1: 6152-block  0
        2: 6152-block  1
call    0 returned 2
call    1 returned 2
branch  2 taken 1
branch  3 taken 1 (fallthrough)
        1: 6153:      const TestInfo* const test_info = test_suite->test_info_list()[j];
        1: 6153-block  0
call    0 returned 1
call    1 returned 1
        1: 6154:      if (test_info->matches_filter_) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 6155:        if (!printed_test_suite_name) {
        1: 6155-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 6156:          printed_test_suite_name = true;
        1: 6157:          printf("%s.", test_suite->name());
        1: 6157-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 6158:          if (test_suite->type_param() != nullptr) {
        1: 6158-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 6159:            printf("  # %s = ", kTypeParamLabel);
    %%%%%: 6159-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6160:            // We print the type parameter on a single line to make
        -: 6161:            // the output easy to parse by a program.
    #####: 6162:            PrintOnOneLine(test_suite->type_param(), kMaxParamLength);
    %%%%%: 6162-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6163:          }
        1: 6164:          printf("\n");
        1: 6164-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 6165:        }
        1: 6166:        printf("  %s", test_info->name());
        1: 6166-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 6167:        if (test_info->value_param() != nullptr) {
        1: 6167-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 6168:          printf("  # %s = ", kValueParamLabel);
    %%%%%: 6168-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6169:          // We print the value parameter on a single line to make the
        -: 6170:          // output easy to parse by a program.
    #####: 6171:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
    %%%%%: 6171-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6172:        }
        1: 6173:        printf("\n");
        1: 6173-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 6174:      }
        -: 6175:    }
        -: 6176:  }
        1: 6177:  fflush(stdout);
        1: 6177-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 6178:#if GTEST_HAS_FILE_SYSTEM
        1: 6179:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        1: 6179-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*: 6180:  if (output_format == "xml" || output_format == "json") {
        1: 6180-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 6180-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 6180-block  2
        1: 6180-block  3
        1: 6180-block  4
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    #####: 6181:    FILE* fileout = OpenFileForWriting(
    %%%%%: 6181-block  0
call    0 never executed
    %%%%%: 6181-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6181-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6181-block  3
call    8 never executed
    $$$$$: 6181-block  4
call    9 never executed
    $$$$$: 6181-block  5
call   10 never executed
    $$$$$: 6181-block  6
    $$$$$: 6181-block  7
    #####: 6182:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    $$$$$: 6182-block  0
call    5 never executed
    $$$$$: 6182-block  1
    #####: 6183:    std::stringstream stream;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6184:    if (output_format == "xml") {
    %%%%%: 6184-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6185:      XmlUnitTestResultPrinter(
    %%%%%: 6185-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6185-block  1
call    4 never executed
    $$$$$: 6185-block  2
call    5 never executed
    $$$$$: 6185-block  3
    #####: 6186:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6186-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6186-block  1
call    4 never executed
    $$$$$: 6186-block  2
    #####: 6187:          .PrintXmlTestsList(&stream, test_suites_);
    %%%%%: 6187-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6188:    } else if (output_format == "json") {
    %%%%%: 6188-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6189:      JsonUnitTestResultPrinter(
    %%%%%: 6189-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6189-block  1
call    4 never executed
    $$$$$: 6189-block  2
call    5 never executed
    $$$$$: 6189-block  3
    #####: 6190:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6190-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6190-block  1
call    4 never executed
    $$$$$: 6190-block  2
    #####: 6191:          .PrintJsonTestList(&stream, test_suites_);
    %%%%%: 6191-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6192:    }
    #####: 6193:    fprintf(fileout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 6193-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6193-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6193-block  2
call    7 never executed
    $$$$$: 6193-block  3
call    8 never executed
    $$$$$: 6193-block  4
    #####: 6194:    fclose(fileout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6195:  }
    %%%%%: 6195-block  0
call    0 never executed
    $$$$$: 6195-block  1
call    1 never executed
        -: 6196:#endif  // GTEST_HAS_FILE_SYSTEM
        1: 6197:}
        1: 6197-block  0
call    0 returned 1
    $$$$$: 6197-block  1
call    1 never executed
        -: 6198:
        -: 6199:// Sets the OS stack trace getter.
        -: 6200://
        -: 6201:// Does nothing if the input and the current OS stack trace getter are
        -: 6202:// the same; otherwise, deletes the old getter and makes the input the
        -: 6203:// current getter.
function _ZN7testing8internal12UnitTestImpl25set_os_stack_trace_getterEPNS0_27OsStackTraceGetterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 6204:void UnitTestImpl::set_os_stack_trace_getter(
        -: 6205:    OsStackTraceGetterInterface* getter) {
    #####: 6206:  if (os_stack_trace_getter_ != getter) {
    %%%%%: 6206-block  0
branch  0 never executed
branch  1 never executed
    #####: 6207:    delete os_stack_trace_getter_;
    %%%%%: 6207-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6207-block  1
call    2 never executed
    #####: 6208:    os_stack_trace_getter_ = getter;
    %%%%%: 6208-block  0
        -: 6209:  }
    #####: 6210:}
        -: 6211:
        -: 6212:// Returns the current OS stack trace getter if it is not NULL;
        -: 6213:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 6214:// getter, and returns it.
function _ZN7testing8internal12UnitTestImpl21os_stack_trace_getterEv called 7 returned 100% blocks executed 100%
        7: 6215:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
        7: 6216:  if (os_stack_trace_getter_ == nullptr) {
        7: 6216-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        -: 6217:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 6218:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 6219:#else
        1: 6220:    os_stack_trace_getter_ = new OsStackTraceGetter;
        1: 6220-block  0
call    0 returned 1
call    1 returned 1
        -: 6221:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 6222:  }
        -: 6223:
        7: 6224:  return os_stack_trace_getter_;
        7: 6224-block  0
        -: 6225:}
        -: 6226:
        -: 6227:// Returns the most specific TestResult currently running.
function _ZN7testing8internal12UnitTestImpl19current_test_resultEv called 6 returned 100% blocks executed 83%
        6: 6228:TestResult* UnitTestImpl::current_test_result() {
        6: 6229:  if (current_test_info_ != nullptr) {
        6: 6229-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        4: 6230:    return &current_test_info_->result_;
        4: 6230-block  0
        -: 6231:  }
        2: 6232:  if (current_test_suite_ != nullptr) {
        2: 6232-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6233:    return &current_test_suite_->ad_hoc_test_result_;
    %%%%%: 6233-block  0
        -: 6234:  }
        2: 6235:  return &ad_hoc_test_result_;
        2: 6235-block  0
        -: 6236:}
        -: 6237:
        -: 6238:// Shuffles all test suites, and the tests within each test suite,
        -: 6239:// making sure that death tests are still run first.
function _ZN7testing8internal12UnitTestImpl12ShuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 6240:void UnitTestImpl::ShuffleTests() {
        -: 6241:  // Shuffles the death test suites.
    #####: 6242:  ShuffleRange(random(), 0, last_death_test_suite_ + 1, &test_suite_indices_);
    %%%%%: 6242-block  0
call    0 never executed
call    1 never executed
        -: 6243:
        -: 6244:  // Shuffles the non-death test suites.
    #####: 6245:  ShuffleRange(random(), last_death_test_suite_ + 1,
call    0 never executed
call    1 never executed
    #####: 6246:               static_cast<int>(test_suites_.size()), &test_suite_indices_);
call    0 never executed
        -: 6247:
        -: 6248:  // Shuffles the tests inside each test suite.
    #####: 6249:  for (auto& test_suite : test_suites_) {
call    0 never executed
call    1 never executed
    %%%%%: 6249-block  0
call    2 never executed
    %%%%%: 6249-block  1
call    3 never executed
    %%%%%: 6249-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 6250:    test_suite->ShuffleTests(random());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6251:  }
    #####: 6252:}
    %%%%%: 6252-block  0
        -: 6253:
        -: 6254:// Restores the test suites and tests to their order before the first shuffle.
function _ZN7testing8internal12UnitTestImpl14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 6255:void UnitTestImpl::UnshuffleTests() {
        2: 6256:  for (size_t i = 0; i < test_suites_.size(); i++) {
        1: 6256-block  0
        2: 6256-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        -: 6257:    // Unshuffles the tests in each test suite.
        1: 6258:    test_suites_[i]->UnshuffleTests();
        1: 6258-block  0
call    0 returned 1
call    1 returned 1
        -: 6259:    // Resets the index of each test suite.
        1: 6260:    test_suite_indices_[i] = static_cast<int>(i);
call    0 returned 1
        -: 6261:  }
        1: 6262:}
        -: 6263:
        -: 6264:// Returns the current OS stack trace as an std::string.
        -: 6265://
        -: 6266:// The maximum number of stack frames to be included is specified by
        -: 6267:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 6268:// specifies the number of top frames to be skipped, which doesn't
        -: 6269:// count against the number of frames to be included.
        -: 6270://
        -: 6271:// For example, if Foo() calls Bar(), which in turn calls
        -: 6272:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 6273:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
        -: 6274:GTEST_NO_INLINE_ GTEST_NO_TAIL_CALL_ std::string
function _ZN7testing8internal31GetCurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 6275:GetCurrentOsStackTraceExceptTop(int skip_count) {
        -: 6276:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 6277:  // to what the user really wants to skip.
    #####: 6278:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    %%%%%: 6278-block  0
call    0 never executed
call    1 never executed
        -: 6279:}
        -: 6280:
        -: 6281:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 6282:// suppress unreachable code warnings.
        -: 6283:namespace {
        -: 6284:class ClassUniqueToAlwaysTrue {};
        -: 6285:}  // namespace
        -: 6286:
function _ZN7testing8internal6IsTrueEb called 26 returned 100% blocks executed 100%
       26: 6287:bool IsTrue(bool condition) { return condition; }
       26: 6287-block  0
        -: 6288:
function _ZN7testing8internal10AlwaysTrueEv called 20 returned 100% blocks executed 67%
       20: 6289:bool AlwaysTrue() {
        -: 6290:#if GTEST_HAS_EXCEPTIONS
        -: 6291:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 6292:  // but it makes the compiler think that it may throw.
      20*: 6293:  if (IsTrue(false)) throw ClassUniqueToAlwaysTrue();
       20: 6293-block  0
call    0 returned 20
branch  1 taken 0 (fallthrough)
branch  2 taken 20
    %%%%%: 6293-block  1
call    3 never executed
call    4 never executed
        -: 6294:#endif  // GTEST_HAS_EXCEPTIONS
       20: 6295:  return true;
       20: 6295-block  0
        -: 6296:}
        -: 6297:
        -: 6298:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 6299:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 6300:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
function _ZN7testing8internal10SkipPrefixEPKcPS2_ called 0 returned 0% blocks executed 0%
    #####: 6301:bool SkipPrefix(const char* prefix, const char** pstr) {
    #####: 6302:  const size_t prefix_len = strlen(prefix);
    #####: 6303:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    %%%%%: 6303-block  0
branch  0 never executed
branch  1 never executed
    #####: 6304:    *pstr += prefix_len;
    #####: 6305:    return true;
    %%%%%: 6305-block  0
        -: 6306:  }
    #####: 6307:  return false;
    %%%%%: 6307-block  0
        -: 6308:}
        -: 6309:
        -: 6310:// Parses a string as a command line flag.  The string should have
        -: 6311:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 6312:// part can be omitted.
        -: 6313://
        -: 6314:// Returns the value of the flag, or NULL if the parsing failed.
function _ZN7testing8internalL14ParseFlagValueEPKcS2_b called 30 returned 100% blocks executed 67%
       30: 6315:static const char* ParseFlagValue(const char* str, const char* flag_name,
        -: 6316:                                  bool def_optional) {
        -: 6317:  // str and flag must not be NULL.
      30*: 6318:  if (str == nullptr || flag_name == nullptr) return nullptr;
       30: 6318-block  0
branch  0 taken 30 (fallthrough)
branch  1 taken 0
       30: 6318-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 30
    %%%%%: 6318-block  2
        -: 6319:
        -: 6320:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
        -: 6321:  const std::string flag_str =
       30: 6322:      std::string("--") + GTEST_FLAG_PREFIX_ + flag_name;
       30: 6322-block  0
call    0 returned 30
call    1 returned 30
branch  2 taken 30 (fallthrough)
branch  3 taken 0 (throw)
       30: 6322-block  1
call    4 returned 30
branch  5 taken 30 (fallthrough)
branch  6 taken 0 (throw)
       30: 6322-block  2
call    7 returned 30
branch  8 taken 30 (fallthrough)
branch  9 taken 0 (throw)
       30: 6322-block  3
call   10 returned 30
call   11 returned 30
call   12 returned 30
    $$$$$: 6322-block  4
call   13 never executed
    $$$$$: 6322-block  5
call   14 never executed
    $$$$$: 6322-block  6
call   15 never executed
    $$$$$: 6322-block  7
    $$$$$: 6322-block  8
    $$$$$: 6322-block  9
       30: 6323:  const size_t flag_len = flag_str.length();
call    0 returned 30
       30: 6324:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return nullptr;
call    0 returned 30
branch  1 taken 26 (fallthrough)
branch  2 taken 4
       26: 6324-block  0
        -: 6325:
        -: 6326:  // Skips the flag name.
        4: 6327:  const char* flag_end = str + flag_len;
        -: 6328:
        -: 6329:  // When def_optional is true, it's OK to not have a "=value" part.
        4: 6330:  if (def_optional && (flag_end[0] == '\0')) {
        4: 6330-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1: 6330-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 6331:    return flag_end;
        1: 6331-block  0
        -: 6332:  }
        -: 6333:
        -: 6334:  // If def_optional is true and there are more characters after the
        -: 6335:  // flag name, or if def_optional is false, there must be a '=' after
        -: 6336:  // the flag name.
       3*: 6337:  if (flag_end[0] != '=') return nullptr;
        3: 6337-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%: 6337-block  1
        -: 6338:
        -: 6339:  // Returns the string after "=".
        3: 6340:  return flag_end + 1;
        3: 6340-block  0
       30: 6341:}
       30: 6341-block  0
call    0 returned 30
        -: 6342:
        -: 6343:// Parses a string for a bool flag, in the form of either
        -: 6344:// "--flag=value" or "--flag".
        -: 6345://
        -: 6346:// In the former case, the value is taken as true as long as it does
        -: 6347:// not start with '0', 'f', or 'F'.
        -: 6348://
        -: 6349:// In the latter case, the value is taken as true.
        -: 6350://
        -: 6351:// On success, stores the value of the flag in *value, and returns
        -: 6352:// true.  On failure, returns false without changing *value.
function _ZN7testing8internalL9ParseFlagEPKcS2_Pb called 19 returned 100% blocks executed 90%
       19: 6353:static bool ParseFlag(const char* str, const char* flag_name, bool* value) {
        -: 6354:  // Gets the value of the flag as a string.
       19: 6355:  const char* const value_str = ParseFlagValue(str, flag_name, true);
       19: 6355-block  0
call    0 returned 19
        -: 6356:
        -: 6357:  // Aborts if the parsing failed.
       19: 6358:  if (value_str == nullptr) return false;
branch  0 taken 18 (fallthrough)
branch  1 taken 1
       18: 6358-block  0
        -: 6359:
        -: 6360:  // Converts the string value to a bool.
       1*: 6361:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
        1: 6361-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 6361-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 6361-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1: 6361-block  3
    %%%%%: 6361-block  4
        1: 6362:  return true;
        1: 6362-block  0
        -: 6363:}
        -: 6364:
        -: 6365:// Parses a string for an int32_t flag, in the form of "--flag=value".
        -: 6366://
        -: 6367:// On success, stores the value of the flag in *value, and returns
        -: 6368:// true.  On failure, returns false without changing *value.
function _ZN7testing8internal9ParseFlagEPKcS2_Pi called 0 returned 0% blocks executed 0%
    #####: 6369:bool ParseFlag(const char* str, const char* flag_name, int32_t* value) {
        -: 6370:  // Gets the value of the flag as a string.
    #####: 6371:  const char* const value_str = ParseFlagValue(str, flag_name, false);
    %%%%%: 6371-block  0
call    0 never executed
        -: 6372:
        -: 6373:  // Aborts if the parsing failed.
    #####: 6374:  if (value_str == nullptr) return false;
branch  0 never executed
branch  1 never executed
    %%%%%: 6374-block  0
        -: 6375:
        -: 6376:  // Sets *value to the value of the flag.
    #####: 6377:  return ParseInt32(Message() << "The value of flag --" << flag_name, value_str,
    %%%%%: 6377-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6377-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6377-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6377-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6377-block  4
call   12 never executed
    $$$$$: 6377-block  5
call   13 never executed
    #####: 6378:                    value);
    %%%%%: 6378-block  0
        -: 6379:}
        -: 6380:
        -: 6381:// Parses a string for a string flag, in the form of "--flag=value".
        -: 6382://
        -: 6383:// On success, stores the value of the flag in *value, and returns
        -: 6384:// true.  On failure, returns false without changing *value.
        -: 6385:template <typename String>
function _ZN7testing8internalL9ParseFlagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbPKcS9_PT_ called 11 returned 100% blocks executed 100%
       11: 6386:static bool ParseFlag(const char* str, const char* flag_name, String* value) {
        -: 6387:  // Gets the value of the flag as a string.
       11: 6388:  const char* const value_str = ParseFlagValue(str, flag_name, false);
       11: 6388-block  0
call    0 returned 11
        -: 6389:
        -: 6390:  // Aborts if the parsing failed.
       11: 6391:  if (value_str == nullptr) return false;
branch  0 taken 8 (fallthrough)
branch  1 taken 3
        8: 6391-block  0
        -: 6392:
        -: 6393:  // Sets *value to the value of the flag.
        3: 6394:  *value = value_str;
        3: 6394-block  0
call    0 returned 3
        3: 6395:  return true;
        -: 6396:}
        -: 6397:
        -: 6398:// Determines whether a string has a prefix that Google Test uses for its
        -: 6399:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 6400:// If Google Test detects that a command line flag has its prefix but is not
        -: 6401:// recognized, it will print its help message. Flags starting with
        -: 6402:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 6403:// internal flags and do not trigger the help message.
function _ZN7testing8internalL23HasGoogleTestFlagPrefixEPKc called 0 returned 0% blocks executed 0%
    #####: 6404:static bool HasGoogleTestFlagPrefix(const char* str) {
    #####: 6405:  return (SkipPrefix("--", &str) || SkipPrefix("-", &str) ||
    %%%%%: 6405-block  0
call    0 never executed
    %%%%%: 6405-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6406:          SkipPrefix("/", &str)) &&
    %%%%%: 6406-block  0
call    0 never executed
    #####: 6407:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
branch  0 never executed
branch  1 never executed
    %%%%%: 6407-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6407-block  1
    %%%%%: 6407-block  2
    #####: 6408:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    %%%%%: 6408-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6409:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    %%%%%: 6409-block  0
call    0 never executed
    %%%%%: 6409-block  1
        -: 6410:}
        -: 6411:
        -: 6412:// Prints a string containing code-encoded text.  The following escape
        -: 6413:// sequences can be used in the string to control the text color:
        -: 6414://
        -: 6415://   @@    prints a single '@' character.
        -: 6416://   @R    changes the color to red.
        -: 6417://   @G    changes the color to green.
        -: 6418://   @Y    changes the color to yellow.
        -: 6419://   @D    changes to the default terminal text color.
        -: 6420://
function _ZN7testing8internalL17PrintColorEncodedEPKc called 0 returned 0% blocks executed 0%
    #####: 6421:static void PrintColorEncoded(const char* str) {
    #####: 6422:  GTestColor color = GTestColor::kDefault;  // The current color.
    %%%%%: 6422-block  0
        -: 6423:
        -: 6424:  // Conceptually, we split the string into segments divided by escape
        -: 6425:  // sequences.  Then we print one segment at a time.  At the end of
        -: 6426:  // each iteration, the str pointer advances to the beginning of the
        -: 6427:  // next segment.
        -: 6428:  for (;;) {
    #####: 6429:    const char* p = strchr(str, '@');
    #####: 6430:    if (p == nullptr) {
    %%%%%: 6430-block  0
branch  0 never executed
branch  1 never executed
    #####: 6431:      ColoredPrintf(color, "%s", str);
    %%%%%: 6431-block  0
call    0 never executed
    #####: 6432:      return;
    %%%%%: 6432-block  0
        -: 6433:    }
        -: 6434:
    #####: 6435:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    %%%%%: 6435-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6435-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6435-block  2
call    8 never executed
call    9 never executed
    $$$$$: 6435-block  3
call   10 never executed
    $$$$$: 6435-block  4
call   11 never executed
    $$$$$: 6435-block  5
        -: 6436:
    #####: 6437:    const char ch = p[1];
    #####: 6438:    str = p + 2;
    #####: 6439:    if (ch == '@') {
branch  0 never executed
branch  1 never executed
    #####: 6440:      ColoredPrintf(color, "@");
    %%%%%: 6440-block  0
call    0 never executed
    #####: 6441:    } else if (ch == 'D') {
    %%%%%: 6441-block  0
branch  0 never executed
branch  1 never executed
    #####: 6442:      color = GTestColor::kDefault;
    %%%%%: 6442-block  0
    #####: 6443:    } else if (ch == 'R') {
    %%%%%: 6443-block  0
branch  0 never executed
branch  1 never executed
    #####: 6444:      color = GTestColor::kRed;
    %%%%%: 6444-block  0
    #####: 6445:    } else if (ch == 'G') {
    %%%%%: 6445-block  0
branch  0 never executed
branch  1 never executed
    #####: 6446:      color = GTestColor::kGreen;
    %%%%%: 6446-block  0
    #####: 6447:    } else if (ch == 'Y') {
    %%%%%: 6447-block  0
branch  0 never executed
branch  1 never executed
    #####: 6448:      color = GTestColor::kYellow;
    %%%%%: 6448-block  0
        -: 6449:    } else {
    #####: 6450:      --str;
    %%%%%: 6450-block  0
        -: 6451:    }
    #####: 6452:  }
    %%%%%: 6452-block  0
        -: 6453:}
        -: 6454:
        -: 6455:static const char kColorEncodedHelpMessage[] =
        -: 6456:    "This program contains tests written using " GTEST_NAME_
        -: 6457:    ". You can use the\n"
        -: 6458:    "following command line flags to control its behavior:\n"
        -: 6459:    "\n"
        -: 6460:    "Test Selection:\n"
        -: 6461:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6462:    "list_tests@D\n"
        -: 6463:    "      List the names of all tests instead of running them. The name of\n"
        -: 6464:    "      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 6465:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6466:    "filter=@YPOSITIVE_PATTERNS"
        -: 6467:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 6468:    "      Run only the tests whose name matches one of the positive patterns "
        -: 6469:    "but\n"
        -: 6470:    "      none of the negative patterns. '?' matches any single character; "
        -: 6471:    "'*'\n"
        -: 6472:    "      matches any substring; ':' separates two patterns.\n"
        -: 6473:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6474:    "also_run_disabled_tests@D\n"
        -: 6475:    "      Run all disabled tests too.\n"
        -: 6476:    "\n"
        -: 6477:    "Test Execution:\n"
        -: 6478:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6479:    "repeat=@Y[COUNT]@D\n"
        -: 6480:    "      Run the tests repeatedly; use a negative count to repeat forever.\n"
        -: 6481:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6482:    "shuffle@D\n"
        -: 6483:    "      Randomize tests' orders on every iteration.\n"
        -: 6484:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6485:    "random_seed=@Y[NUMBER]@D\n"
        -: 6486:    "      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 6487:    "      99999, or 0 to use a seed based on the current time).\n"
        -: 6488:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6489:    "recreate_environments_when_repeating@D\n"
        -: 6490:    "      Sets up and tears down the global test environment on each repeat\n"
        -: 6491:    "      of the test.\n"
        -: 6492:    "\n"
        -: 6493:    "Test Output:\n"
        -: 6494:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6495:    "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 6496:    "      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 6497:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6498:    "brief=1@D\n"
        -: 6499:    "      Only print test failures.\n"
        -: 6500:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6501:    "print_time=0@D\n"
        -: 6502:    "      Don't print the elapsed time of each test.\n"
        -: 6503:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6504:    "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G" GTEST_PATH_SEP_
        -: 6505:    "@Y|@G:@YFILE_PATH]@D\n"
        -: 6506:    "      Generate a JSON or XML report in the given directory or with the "
        -: 6507:    "given\n"
        -: 6508:    "      file name. @YFILE_PATH@D defaults to @Gtest_detail.xml@D.\n"
        -: 6509:#if GTEST_CAN_STREAM_RESULTS_
        -: 6510:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6511:    "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 6512:    "      Stream test results to the given server.\n"
        -: 6513:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 6514:    "\n"
        -: 6515:    "Assertion Behavior:\n"
        -: 6516:#if GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6517:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6518:    "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 6519:    "      Set the default death test style.\n"
        -: 6520:#endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6521:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6522:    "break_on_failure@D\n"
        -: 6523:    "      Turn assertion failures into debugger break-points.\n"
        -: 6524:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6525:    "throw_on_failure@D\n"
        -: 6526:    "      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 6527:    "      test framework.\n"
        -: 6528:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6529:    "catch_exceptions=0@D\n"
        -: 6530:    "      Do not report exceptions as test failures. Instead, allow them\n"
        -: 6531:    "      to crash the program or throw a pop-up (on Windows).\n"
        -: 6532:    "\n"
        -: 6533:    "Except for @G--" GTEST_FLAG_PREFIX_
        -: 6534:    "list_tests@D, you can alternatively set "
        -: 6535:    "the corresponding\n"
        -: 6536:    "environment variable of a flag (all letters in upper-case). For example, "
        -: 6537:    "to\n"
        -: 6538:    "disable colored text output, you can either specify "
        -: 6539:    "@G--" GTEST_FLAG_PREFIX_
        -: 6540:    "color=no@D or set\n"
        -: 6541:    "the @G" GTEST_FLAG_PREFIX_UPPER_
        -: 6542:    "COLOR@D environment variable to @Gno@D.\n"
        -: 6543:    "\n"
        -: 6544:    "For more information, please read the " GTEST_NAME_
        -: 6545:    " documentation at\n"
        -: 6546:    "@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_
        -: 6547:    "\n"
        -: 6548:    "(not one in your own code or tests), please report it to\n"
        -: 6549:    "@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 6550:
function _ZN7testing8internalL19ParseGoogleTestFlagEPKc called 4 returned 100% blocks executed 35%
        4: 6551:static bool ParseGoogleTestFlag(const char* const arg) {
        -: 6552:#define GTEST_INTERNAL_PARSE_FLAG(flag_name)  \
        -: 6553:  do {                                        \
        -: 6554:    auto value = GTEST_FLAG_GET(flag_name);   \
        -: 6555:    if (ParseFlag(arg, #flag_name, &value)) { \
        -: 6556:      GTEST_FLAG_SET(flag_name, value);       \
        -: 6557:      return true;                            \
        -: 6558:    }                                         \
        -: 6559:  } while (false)
        -: 6560:
       4*: 6561:  GTEST_INTERNAL_PARSE_FLAG(also_run_disabled_tests);
        4: 6561-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 6561-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 4
    %%%%%: 6561-block  2
       4*: 6562:  GTEST_INTERNAL_PARSE_FLAG(break_on_failure);
        4: 6562-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 6562-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 4
    %%%%%: 6562-block  2
       4*: 6563:  GTEST_INTERNAL_PARSE_FLAG(catch_exceptions);
        4: 6563-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 6563-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 4
    %%%%%: 6563-block  2
        4: 6564:  GTEST_INTERNAL_PARSE_FLAG(color);
        4: 6564-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 6564-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 6564-block  2
branch  6 taken 1 (fallthrough)
branch  7 taken 3
        1: 6564-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 6564-block  4
        3: 6564-block  5
        4: 6564-block  6
call   11 returned 4
branch 12 taken 3 (fallthrough)
branch 13 taken 1
    $$$$$: 6564-block  7
call   14 never executed
       3*: 6565:  GTEST_INTERNAL_PARSE_FLAG(death_test_style);
        3: 6565-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 6565-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3: 6565-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 3
    %%%%%: 6565-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6565-block  4
        3: 6565-block  5
        3: 6565-block  6
call   11 returned 3
branch 12 taken 3 (fallthrough)
branch 13 taken 0
    $$$$$: 6565-block  7
call   14 never executed
       3*: 6566:  GTEST_INTERNAL_PARSE_FLAG(death_test_use_fork);
        3: 6566-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 6566-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 3
    %%%%%: 6566-block  2
       3*: 6567:  GTEST_INTERNAL_PARSE_FLAG(fail_fast);
        3: 6567-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 6567-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 3
    %%%%%: 6567-block  2
        3: 6568:  GTEST_INTERNAL_PARSE_FLAG(filter);
        3: 6568-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 6568-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3: 6568-block  2
branch  6 taken 2 (fallthrough)
branch  7 taken 1
        2: 6568-block  3
call    8 returned 2
branch  9 taken 2 (fallthrough)
branch 10 taken 0 (throw)
        2: 6568-block  4
        1: 6568-block  5
        3: 6568-block  6
call   11 returned 3
branch 12 taken 1 (fallthrough)
branch 13 taken 2
    $$$$$: 6568-block  7
call   14 never executed
       1*: 6569:  GTEST_INTERNAL_PARSE_FLAG(internal_run_death_test);
        1: 6569-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6569-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6569-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%: 6569-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6569-block  4
        1: 6569-block  5
        1: 6569-block  6
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0
    $$$$$: 6569-block  7
call   14 never executed
        1: 6570:  GTEST_INTERNAL_PARSE_FLAG(list_tests);
        1: 6570-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6570-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 6570-block  2
    #####: 6571:  GTEST_INTERNAL_PARSE_FLAG(output);
    %%%%%: 6571-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6571-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6571-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6571-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6571-block  4
    %%%%%: 6571-block  5
    %%%%%: 6571-block  6
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 6571-block  7
call   14 never executed
    #####: 6572:  GTEST_INTERNAL_PARSE_FLAG(brief);
    %%%%%: 6572-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6572-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6572-block  2
    #####: 6573:  GTEST_INTERNAL_PARSE_FLAG(print_time);
    %%%%%: 6573-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6573-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6573-block  2
    #####: 6574:  GTEST_INTERNAL_PARSE_FLAG(print_utf8);
    %%%%%: 6574-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6574-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6574-block  2
    #####: 6575:  GTEST_INTERNAL_PARSE_FLAG(random_seed);
    %%%%%: 6575-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6575-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6575-block  2
    #####: 6576:  GTEST_INTERNAL_PARSE_FLAG(repeat);
    %%%%%: 6576-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6576-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6576-block  2
    #####: 6577:  GTEST_INTERNAL_PARSE_FLAG(recreate_environments_when_repeating);
    %%%%%: 6577-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6577-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6577-block  2
    #####: 6578:  GTEST_INTERNAL_PARSE_FLAG(shuffle);
    %%%%%: 6578-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6578-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6578-block  2
    #####: 6579:  GTEST_INTERNAL_PARSE_FLAG(stack_trace_depth);
    %%%%%: 6579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6579-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6579-block  2
    #####: 6580:  GTEST_INTERNAL_PARSE_FLAG(stream_result_to);
    %%%%%: 6580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6580-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6580-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6580-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6580-block  4
    %%%%%: 6580-block  5
    %%%%%: 6580-block  6
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 6580-block  7
call   14 never executed
    #####: 6581:  GTEST_INTERNAL_PARSE_FLAG(throw_on_failure);
    %%%%%: 6581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6581-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6581-block  2
    #####: 6582:  return false;
    %%%%%: 6582-block  0
        -: 6583:}
        -: 6584:
        -: 6585:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
function _ZN7testing8internalL17LoadFlagsFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6586:static void LoadFlagsFromFile(const std::string& path) {
    #####: 6587:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    %%%%%: 6587-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6588:  if (!flagfile) {
    %%%%%: 6588-block  0
branch  0 never executed
branch  1 never executed
    #####: 6589:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG_GET(flagfile)
    %%%%%: 6589-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6589-block  1
call    3 never executed
    %%%%%: 6589-block  2
call    4 never executed
    $$$$$: 6589-block  3
call    5 never executed
    $$$$$: 6589-block  4
    #####: 6590:                      << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6590-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6590-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 6591:  }
    #####: 6592:  std::string contents(ReadEntireFile(flagfile));
    %%%%%: 6592-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6593:  posix::FClose(flagfile);
    %%%%%: 6593-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6594:  std::vector<std::string> lines;
    #####: 6595:  SplitString(contents, '\n', &lines);
    %%%%%: 6595-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6596:  for (size_t i = 0; i < lines.size(); ++i) {
    %%%%%: 6596-block  0
    %%%%%: 6596-block  1
    %%%%%: 6596-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6597:    if (lines[i].empty()) continue;
    %%%%%: 6597-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6597-block  1
    #####: 6598:    if (!ParseGoogleTestFlag(lines[i].c_str())) g_help_flag = true;
    %%%%%: 6598-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6598-block  1
branch  5 never executed
branch  6 never executed
    %%%%%: 6598-block  2
        -: 6599:  }
    #####: 6600:}
    %%%%%: 6600-block  0
call    0 never executed
call    1 never executed
    $$$$$: 6600-block  1
call    2 never executed
    $$$$$: 6600-block  2
call    3 never executed
        -: 6601:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
        -: 6602:
        -: 6603:// Parses the command line for Google Test flags, without initializing
        -: 6604:// other parts of Google Test.  The type parameter CharType can be
        -: 6605:// instantiated to either char or wchar_t.
        -: 6606:template <typename CharType>
       2*: 6607:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
       2*: 6608:  std::string flagfile_value;
       6*: 6609:  for (int i = 1; i < *argc; i++) {
       4*: 6610:    const std::string arg_string = StreamableToString(argv[i]);
       4*: 6611:    const char* const arg = arg_string.c_str();
        -: 6612:
        -: 6613:    using internal::ParseFlag;
        -: 6614:
       4*: 6615:    bool remove_flag = false;
       4*: 6616:    if (ParseGoogleTestFlag(arg)) {
       4*: 6617:      remove_flag = true;
        -: 6618:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6619:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    #####: 6620:      GTEST_FLAG_SET(flagfile, flagfile_value);
    #####: 6621:      LoadFlagsFromFile(flagfile_value);
    #####: 6622:      remove_flag = true;
        -: 6623:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6624:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
        -: 6625:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6626:      // internal ones) trigger help display.
    #####: 6627:      g_help_flag = true;
        -: 6628:    }
        -: 6629:
       4*: 6630:    if (remove_flag) {
        -: 6631:      // Shift the remainder of the argv list left by one.  Note
        -: 6632:      // that argv has (*argc + 1) elements, the last one always being
        -: 6633:      // NULL.  The following loop moves the trailing NULL element as
        -: 6634:      // well.
      10*: 6635:      for (int j = i; j != *argc; j++) {
       6*: 6636:        argv[j] = argv[j + 1];
        -: 6637:      }
        -: 6638:
        -: 6639:      // Decrements the argument count.
       4*: 6640:      (*argc)--;
        -: 6641:
        -: 6642:      // We also need to decrement the iterator as we just removed
        -: 6643:      // an element.
       4*: 6644:      i--;
        -: 6645:    }
        -: 6646:  }
        -: 6647:
       2*: 6648:  if (g_help_flag) {
        -: 6649:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6650:    // latter may not be called at all if the user is using Google
        -: 6651:    // Test with another testing framework.
    #####: 6652:    PrintColorEncoded(kColorEncodedHelpMessage);
        -: 6653:  }
       2*: 6654:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6607:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 6608:  std::string flagfile_value;
    %%%%%: 6608-block  0
call    0 never executed
    #####: 6609:  for (int i = 1; i < *argc; i++) {
    %%%%%: 6609-block  0
call    0 never executed
    %%%%%: 6609-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 6609-block  2
call    3 never executed
    #####: 6610:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 6610-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6611:    const char* const arg = arg_string.c_str();
    %%%%%: 6611-block  0
call    0 never executed
        -: 6612:
        -: 6613:    using internal::ParseFlag;
        -: 6614:
    #####: 6615:    bool remove_flag = false;
    #####: 6616:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6616-block  0
branch  3 never executed
branch  4 never executed
    #####: 6617:      remove_flag = true;
    %%%%%: 6617-block  0
        -: 6618:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6619:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6619-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6619-block  1
branch  3 never executed
branch  4 never executed
    #####: 6620:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6620-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6621:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6621-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6622:      remove_flag = true;
    %%%%%: 6622-block  0
        -: 6623:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6624:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6624-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6624-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6624-block  2
    %%%%%: 6624-block  3
    %%%%%: 6624-block  4
branch  6 never executed
branch  7 never executed
        -: 6625:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6626:      // internal ones) trigger help display.
    #####: 6627:      g_help_flag = true;
    %%%%%: 6627-block  0
        -: 6628:    }
        -: 6629:
    #####: 6630:    if (remove_flag) {
    %%%%%: 6630-block  0
branch  0 never executed
branch  1 never executed
        -: 6631:      // Shift the remainder of the argv list left by one.  Note
        -: 6632:      // that argv has (*argc + 1) elements, the last one always being
        -: 6633:      // NULL.  The following loop moves the trailing NULL element as
        -: 6634:      // well.
    #####: 6635:      for (int j = i; j != *argc; j++) {
    %%%%%: 6635-block  0
    %%%%%: 6635-block  1
branch  0 never executed
branch  1 never executed
    #####: 6636:        argv[j] = argv[j + 1];
    %%%%%: 6636-block  0
        -: 6637:      }
        -: 6638:
        -: 6639:      // Decrements the argument count.
    #####: 6640:      (*argc)--;
        -: 6641:
        -: 6642:      // We also need to decrement the iterator as we just removed
        -: 6643:      // an element.
    #####: 6644:      i--;
    %%%%%: 6644-block  0
        -: 6645:    }
        -: 6646:  }
        -: 6647:
    #####: 6648:  if (g_help_flag) {
    %%%%%: 6648-block  0
branch  0 never executed
branch  1 never executed
        -: 6649:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6650:    // latter may not be called at all if the user is using Google
        -: 6651:    // Test with another testing framework.
    #####: 6652:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6652-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6653:  }
    #####: 6654:}
    %%%%%: 6654-block  0
call    0 never executed
    $$$$$: 6654-block  1
call    1 never executed
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_ called 2 returned 100% blocks executed 50%
        2: 6607:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
        2: 6608:  std::string flagfile_value;
        2: 6608-block  0
call    0 returned 2
        6: 6609:  for (int i = 1; i < *argc; i++) {
        4: 6609-block  0
call    0 returned 4
        6: 6609-block  1
branch  1 taken 4
branch  2 taken 2 (fallthrough)
    $$$$$: 6609-block  2
call    3 never executed
        4: 6610:    const std::string arg_string = StreamableToString(argv[i]);
        4: 6610-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 6611:    const char* const arg = arg_string.c_str();
        4: 6611-block  0
call    0 returned 4
        -: 6612:
        -: 6613:    using internal::ParseFlag;
        -: 6614:
        4: 6615:    bool remove_flag = false;
        4: 6616:    if (ParseGoogleTestFlag(arg)) {
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 6616-block  0
branch  3 taken 4 (fallthrough)
branch  4 taken 0
        4: 6617:      remove_flag = true;
        4: 6617-block  0
        -: 6618:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6619:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6619-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6619-block  1
branch  3 never executed
branch  4 never executed
    #####: 6620:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6620-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6621:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6621-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6622:      remove_flag = true;
    %%%%%: 6622-block  0
        -: 6623:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6624:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6624-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6624-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6624-block  2
    %%%%%: 6624-block  3
    %%%%%: 6624-block  4
branch  6 never executed
branch  7 never executed
        -: 6625:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6626:      // internal ones) trigger help display.
    #####: 6627:      g_help_flag = true;
    %%%%%: 6627-block  0
        -: 6628:    }
        -: 6629:
        4: 6630:    if (remove_flag) {
        4: 6630-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        -: 6631:      // Shift the remainder of the argv list left by one.  Note
        -: 6632:      // that argv has (*argc + 1) elements, the last one always being
        -: 6633:      // NULL.  The following loop moves the trailing NULL element as
        -: 6634:      // well.
       10: 6635:      for (int j = i; j != *argc; j++) {
        4: 6635-block  0
       10: 6635-block  1
branch  0 taken 6
branch  1 taken 4 (fallthrough)
        6: 6636:        argv[j] = argv[j + 1];
        6: 6636-block  0
        -: 6637:      }
        -: 6638:
        -: 6639:      // Decrements the argument count.
        4: 6640:      (*argc)--;
        -: 6641:
        -: 6642:      // We also need to decrement the iterator as we just removed
        -: 6643:      // an element.
        4: 6644:      i--;
        4: 6644-block  0
        -: 6645:    }
        -: 6646:  }
        -: 6647:
        2: 6648:  if (g_help_flag) {
        2: 6648-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 6649:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6650:    // latter may not be called at all if the user is using Google
        -: 6651:    // Test with another testing framework.
    #####: 6652:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6652-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6653:  }
        2: 6654:}
        2: 6654-block  0
call    0 returned 2
    $$$$$: 6654-block  1
call    1 never executed
------------------
        -: 6655:
        -: 6656:// Parses the command line for Google Test flags, without initializing
        -: 6657:// other parts of Google Test.
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPc called 2 returned 100% blocks executed 100%
        2: 6658:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        -: 6659:#if GTEST_HAS_ABSL
        -: 6660:  if (*argc > 0) {
        -: 6661:    // absl::ParseCommandLine() requires *argc > 0.
        -: 6662:    auto positional_args = absl::flags_internal::ParseCommandLineImpl(
        -: 6663:        *argc, argv, absl::flags_internal::ArgvListAction::kRemoveParsedArgs,
        -: 6664:        absl::flags_internal::UsageFlagsAction::kHandleUsage,
        -: 6665:        absl::flags_internal::OnUndefinedFlag::kReportUndefined);
        -: 6666:    // Any command-line positional arguments not part of any command-line flag
        -: 6667:    // (or arguments to a flag) are copied back out to argv, with the program
        -: 6668:    // invocation name at position 0, and argc is resized. This includes
        -: 6669:    // positional arguments after the flag-terminating delimiter '--'.
        -: 6670:    // See https://abseil.io/docs/cpp/guides/flags.
        -: 6671:    std::copy(positional_args.begin(), positional_args.end(), argv);
        -: 6672:    if (static_cast<int>(positional_args.size()) < *argc) {
        -: 6673:      argv[positional_args.size()] = nullptr;
        -: 6674:      *argc = static_cast<int>(positional_args.size());
        -: 6675:    }
        -: 6676:  }
        -: 6677:#else
        2: 6678:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
        2: 6678-block  0
call    0 returned 2
        -: 6679:#endif
        -: 6680:
        -: 6681:  // Fix the value of *_NSGetArgc() on macOS, but if and only if
        -: 6682:  // *_NSGetArgv() == argv
        -: 6683:  // Only applicable to char** version of argv
        -: 6684:#if GTEST_OS_MAC
        -: 6685:#ifndef GTEST_OS_IOS
        -: 6686:  if (*_NSGetArgv() == argv) {
        -: 6687:    *_NSGetArgc() = *argc;
        -: 6688:  }
        -: 6689:#endif
        -: 6690:#endif
        2: 6691:}
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6692:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    #####: 6693:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 6693-block  0
call    0 never executed
    #####: 6694:}
        -: 6695:
        -: 6696:// The internal implementation of InitGoogleTest().
        -: 6697://
        -: 6698:// The type parameter CharType can be instantiated to either char or
        -: 6699:// wchar_t.
        -: 6700:template <typename CharType>
       2*: 6701:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6702:  // We don't want to run the initialization code twice.
       2*: 6703:  if (GTestIsInitialized()) return;
        -: 6704:
       2*: 6705:  if (*argc <= 0) return;
        -: 6706:
       2*: 6707:  g_argvs.clear();
       8*: 6708:  for (int i = 0; i != *argc; i++) {
       6*: 6709:    g_argvs.push_back(StreamableToString(argv[i]));
        -: 6710:  }
        -: 6711:
        -: 6712:#if GTEST_HAS_ABSL
        -: 6713:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6714:
        -: 6715:  // When using the Abseil Flags library, set the program usage message to the
        -: 6716:  // help message, but remove the color-encoding from the message first.
        -: 6717:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6718:      kColorEncodedHelpMessage,
        -: 6719:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6720:#endif  // GTEST_HAS_ABSL
        -: 6721:
       2*: 6722:  ParseGoogleTestFlagsOnly(argc, argv);
       2*: 6723:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 6724:}
------------------
_ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6701:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6702:  // We don't want to run the initialization code twice.
    #####: 6703:  if (GTestIsInitialized()) return;
    %%%%%: 6703-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6703-block  1
        -: 6704:
    #####: 6705:  if (*argc <= 0) return;
    %%%%%: 6705-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6705-block  1
        -: 6706:
    #####: 6707:  g_argvs.clear();
    %%%%%: 6707-block  0
call    0 never executed
    #####: 6708:  for (int i = 0; i != *argc; i++) {
    %%%%%: 6708-block  0
branch  0 never executed
branch  1 never executed
    #####: 6709:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 6709-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6709-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6709-block  2
call    6 never executed
    $$$$$: 6709-block  3
call    7 never executed
        -: 6710:  }
        -: 6711:
        -: 6712:#if GTEST_HAS_ABSL
        -: 6713:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6714:
        -: 6715:  // When using the Abseil Flags library, set the program usage message to the
        -: 6716:  // help message, but remove the color-encoding from the message first.
        -: 6717:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6718:      kColorEncodedHelpMessage,
        -: 6719:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6720:#endif  // GTEST_HAS_ABSL
        -: 6721:
    #####: 6722:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 6722-block  0
call    0 never executed
    #####: 6723:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
        -: 6724:}
------------------
_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_ called 2 returned 100% blocks executed 79%
        2: 6701:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6702:  // We don't want to run the initialization code twice.
       2*: 6703:  if (GTestIsInitialized()) return;
        2: 6703-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    %%%%%: 6703-block  1
        -: 6704:
       2*: 6705:  if (*argc <= 0) return;
        2: 6705-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 6705-block  1
        -: 6706:
        2: 6707:  g_argvs.clear();
        2: 6707-block  0
call    0 returned 2
        8: 6708:  for (int i = 0; i != *argc; i++) {
        8: 6708-block  0
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        6: 6709:    g_argvs.push_back(StreamableToString(argv[i]));
        6: 6709-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6: 6709-block  1
call    3 returned 6
branch  4 taken 6 (fallthrough)
branch  5 taken 0 (throw)
        6: 6709-block  2
call    6 returned 6
    $$$$$: 6709-block  3
call    7 never executed
        -: 6710:  }
        -: 6711:
        -: 6712:#if GTEST_HAS_ABSL
        -: 6713:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6714:
        -: 6715:  // When using the Abseil Flags library, set the program usage message to the
        -: 6716:  // help message, but remove the color-encoding from the message first.
        -: 6717:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6718:      kColorEncodedHelpMessage,
        -: 6719:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6720:#endif  // GTEST_HAS_ABSL
        -: 6721:
        2: 6722:  ParseGoogleTestFlagsOnly(argc, argv);
        2: 6722-block  0
call    0 returned 2
        2: 6723:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 returned 2
call    1 returned 2
        -: 6724:}
------------------
        -: 6725:
        -: 6726:}  // namespace internal
        -: 6727:
        -: 6728:// Initializes Google Test.  This must be called before calling
        -: 6729:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 6730:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 6731:// seen, it is removed from argv, and *argc is decremented.
        -: 6732://
        -: 6733:// No value is returned.  Instead, the Google Test flag variables are
        -: 6734:// updated.
        -: 6735://
        -: 6736:// Calling the function for the second time has no user-visible effect.
function _ZN7testing14InitGoogleTestEPiPPc called 2 returned 100% blocks executed 100%
        2: 6737:void InitGoogleTest(int* argc, char** argv) {
        -: 6738:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6739:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6740:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        2: 6741:  internal::InitGoogleTestImpl(argc, argv);
        2: 6741-block  0
call    0 returned 2
        -: 6742:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        2: 6743:}
        -: 6744:
        -: 6745:// This overloaded version can be used in Windows programs compiled in
        -: 6746:// UNICODE mode.
function _ZN7testing14InitGoogleTestEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6747:void InitGoogleTest(int* argc, wchar_t** argv) {
        -: 6748:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6749:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6750:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6751:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 6751-block  0
call    0 never executed
        -: 6752:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6753:}
        -: 6754:
        -: 6755:// This overloaded version can be used on Arduino/embedded platforms where
        -: 6756:// there is no argc/argv.
function _ZN7testing14InitGoogleTestEv called 0 returned 0% blocks executed 0%
    #####: 6757:void InitGoogleTest() {
        -: 6758:  // Since Arduino doesn't have a command line, fake out the argc/argv arguments
    #####: 6759:  int argc = 1;
    #####: 6760:  const auto arg0 = "dummy";
    #####: 6761:  char* argv0 = const_cast<char*>(arg0);
    #####: 6762:  char** argv = &argv0;
        -: 6763:
        -: 6764:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6765:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
        -: 6766:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6767:  internal::InitGoogleTestImpl(&argc, argv);
    %%%%%: 6767-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6768:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6769:}
    %%%%%: 6769-block  0
        -: 6770:
        -: 6771:#if !defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_) || \
        -: 6772:    !defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 6773:// Returns the value of the first environment variable that is set and contains
        -: 6774:// a non-empty string. If there are none, returns the "fallback" string. Adds
        -: 6775:// the director-separator character as a suffix if not provided in the
        -: 6776:// environment variable value.
function _ZN7testingL13GetDirFromEnvESt16initializer_listIPKcES2_c called 0 returned 0% blocks executed 0%
    #####: 6777:static std::string GetDirFromEnv(
        -: 6778:    std::initializer_list<const char*> environment_variables,
        -: 6779:    const char* fallback, char separator) {
    #####: 6780:  for (const char* variable_name : environment_variables) {
    %%%%%: 6780-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6780-block  1
    %%%%%: 6780-block  2
branch  2 never executed
branch  3 never executed
    #####: 6781:    const char* value = internal::posix::GetEnv(variable_name);
    %%%%%: 6781-block  0
call    0 never executed
    #####: 6782:    if (value != nullptr && value[0] != '\0') {
branch  0 never executed
branch  1 never executed
    %%%%%: 6782-block  0
branch  2 never executed
branch  3 never executed
    #####: 6783:      if (value[strlen(value) - 1] != separator) {
    %%%%%: 6783-block  0
branch  0 never executed
branch  1 never executed
    #####: 6784:        return std::string(value).append(1, separator);
    %%%%%: 6784-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6784-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6784-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 6784-block  3
call   10 never executed
call   11 never executed
    $$$$$: 6784-block  4
call   12 never executed
    $$$$$: 6784-block  5
call   13 never executed
    $$$$$: 6784-block  6
    $$$$$: 6784-block  7
        -: 6785:      }
    #####: 6786:      return value;
    %%%%%: 6786-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6786-block  1
call    4 never executed
    $$$$$: 6786-block  2
call    5 never executed
    $$$$$: 6786-block  3
        -: 6787:    }
        -: 6788:  }
    #####: 6789:  return fallback;
    %%%%%: 6789-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6789-block  1
call    4 never executed
    $$$$$: 6789-block  2
call    5 never executed
        -: 6790:}
        -: 6791:#endif
        -: 6792:
function _ZN7testing7TempDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6793:std::string TempDir() {
        -: 6794:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 6795:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 6796:#elif GTEST_OS_WINDOWS || GTEST_OS_WINDOWS_MOBILE
        -: 6797:  return GetDirFromEnv({"TEST_TMPDIR", "TEMP"}, "\\temp\\", '\\');
        -: 6798:#elif GTEST_OS_LINUX_ANDROID
        -: 6799:  return GetDirFromEnv({"TEST_TMPDIR", "TMPDIR"}, "/data/local/tmp/", '/');
        -: 6800:#else
    #####: 6801:  return GetDirFromEnv({"TEST_TMPDIR", "TMPDIR"}, "/tmp/", '/');
    %%%%%: 6801-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6801-block  1
    %%%%%: 6801-block  2
        -: 6802:#endif
        -: 6803:}
        -: 6804:
        -: 6805:#if !defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 6806:// Returns the directory path (including terminating separator) of the current
        -: 6807:// executable as derived from argv[0].
function _ZN7testingL29GetCurrentExecutableDirectoryEv called 0 returned 0% blocks executed 0%
    #####: 6808:static std::string GetCurrentExecutableDirectory() {
    #####: 6809:  internal::FilePath argv_0(internal::GetArgvs()[0]);
    %%%%%: 6809-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6809-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6809-block  2
call    7 never executed
    $$$$$: 6809-block  3
call    8 never executed
    $$$$$: 6809-block  4
    #####: 6810:  return argv_0.RemoveFileName().string();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6810-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6810-block  1
call    7 never executed
    %%%%%: 6810-block  2
    $$$$$: 6810-block  3
call    8 never executed
    $$$$$: 6810-block  4
    #####: 6811:}
call    0 never executed
    $$$$$: 6811-block  0
call    1 never executed
        -: 6812:#endif
        -: 6813:
function _ZN7testing6SrcDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6814:std::string SrcDir() {
        -: 6815:#if defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 6816:  return GTEST_CUSTOM_SRCDIR_FUNCTION_();
        -: 6817:#elif GTEST_OS_WINDOWS || GTEST_OS_WINDOWS_MOBILE
        -: 6818:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
        -: 6819:                       '\\');
        -: 6820:#elif GTEST_OS_LINUX_ANDROID
        -: 6821:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
        -: 6822:                       '/');
        -: 6823:#else
    #####: 6824:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
    %%%%%: 6824-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6824-block  1
call    3 never executed
    #####: 6825:                       '/');
    %%%%%: 6825-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6825-block  1
call    4 never executed
    %%%%%: 6825-block  2
    $$$$$: 6825-block  3
        -: 6826:#endif
        -: 6827:}
        -: 6828:
        -: 6829:// Class ScopedTrace
        -: 6830:
        -: 6831:// Pushes the given source file location and message onto a per-thread
        -: 6832:// trace stack maintained by Google Test.
function _ZN7testing11ScopedTrace9PushTraceEPKciNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6833:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    #####: 6834:  internal::TraceInfo trace;
    %%%%%: 6834-block  0
call    0 never executed
    #####: 6835:  trace.file = file;
    #####: 6836:  trace.line = line;
    #####: 6837:  trace.message.swap(message);
call    0 never executed
        -: 6838:
    #####: 6839:  UnitTest::GetInstance()->PushGTestTrace(trace);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6839-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6840:}
    %%%%%: 6840-block  0
call    0 never executed
    $$$$$: 6840-block  1
call    1 never executed
        -: 6841:
        -: 6842:// Pops the info pushed by the c'tor.
function _ZN7testing11ScopedTraceD2Ev called 0 returned 0% blocks executed 0%
    #####: 6843:ScopedTrace::~ScopedTrace() GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 6844:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 6844-block  0
call    0 never executed
call    1 never executed
    #####: 6845:}
        -: 6846:
        -: 6847:}  // namespace testing
