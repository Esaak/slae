        -:    0:Source:/home/ilya/slae_lab/slae/tests/TEST_04_03/Number3.cpp
        -:    0:Graph:/home/ilya/slae_lab/slae/cmake-build-debug-coverage/tests/CMakeFiles/Number3.dir/TEST_04_03/Number3.cpp.gcno
        -:    0:Data:/home/ilya/slae_lab/slae/cmake-build-debug-coverage/tests/CMakeFiles/Number3.dir/TEST_04_03/Number3.cpp.gcda
        -:    0:Runs:2
        -:    1:#include <gtest/gtest.h>
        -:    2:#include <fstream>
        -:    3:#include <cmath>
        -:    4:#include <string>
        -:    5:#include <random>
        -:    6:#include "../../src/CSR_matrix.hpp"
        -:    7:
        -:    8:using namespace DOK_space;
        -:    9:using namespace CSR_matrix_space;
        -:   10:
        4:   11:TEST(tests, first){
        1:   12:    std::vector<DOK<double>> D;
        1:   13:    std::vector<int> i{0, 0, 1, 1, 2, 2};
        1:   14:    std::vector<int> j{0, 1, 0, 1, 1, 2};
        1:   15:    std::vector<double> data{10, 1, 1, 7, 0.1, 1};
        1:   16:    std::vector<double> x0{0, 0, 0};
        1:   17:    std::vector<double> b{20, 30, 1};
        1:   18:    std::ofstream file;
        1:   19:    file.open("/home/ilya/slae_lab/slae/tests/TEST_04_03/test3_data.txt");
        7:   20:    for(std::size_t z = 0; z<i.size(); z++){
        6:   21:        D.emplace_back(DOK<double>{static_cast<size_t>(i[z]), static_cast<size_t>(j[z]), data[z]});
        -:   22:    }
        1:   23:    CSR_matrix<double> ANSW(D, 3, 3);
        1:   24:    double r = pow(10, -12);
        1:   25:    std::cout<<r;
        1:   26:    double tau = 0.1;
        2:   27:    for(std::size_t p = 0; p < 1; p++) {
        1:   28:        std::pair<std::vector<double>, std::size_t> a = ANSW.MPI(ANSW, b, tau, r, x0);
        -:   29:
        4:   30:        for(auto& it: a.first){
        3:   31:            std::cout<< it<<" ";
        -:   32:        }
        1:   33:        std::cout<<"\n";
        -:   34:        //file<<a.second<<" ";
        1:   35:        tau +=tau;
        1:   36:    }
        1:   37:    file.close();
        1:   38:}
------------------
_ZN16tests_first_TestC2Ev:
function _ZN16tests_first_TestC2Ev called 1 returned 100% blocks executed 100%
        1:   11:TEST(tests, first){
        1:   11-block  0
call    0 returned 1
------------------
_ZN16tests_first_TestD0Ev:
function _ZN16tests_first_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   11:TEST(tests, first){
        1:   11-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN16tests_first_TestD2Ev:
function _ZN16tests_first_TestD2Ev called 1 returned 100% blocks executed 100%
        1:   11:TEST(tests, first){
        1:   11-block  0
call    0 returned 1
------------------
_ZN16tests_first_Test8TestBodyEv:
function _ZN16tests_first_Test8TestBodyEv called 1 returned 100% blocks executed 56%
        1:   11:TEST(tests, first){
        1:   12:    std::vector<DOK<double>> D;
        1:   13:    std::vector<int> i{0, 0, 1, 1, 2, 2};
        1:   13-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   13-block  1
call    4 returned 1
    $$$$$:   13-block  2
call    5 never executed
    $$$$$:   13-block  3
    $$$$$:   13-block  4
        1:   14:    std::vector<int> j{0, 1, 0, 1, 1, 2};
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   14-block  0
call    4 returned 1
    $$$$$:   14-block  1
call    5 never executed
    $$$$$:   14-block  2
    $$$$$:   14-block  3
        1:   15:    std::vector<double> data{10, 1, 1, 7, 0.1, 1};
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   15-block  0
call    4 returned 1
    $$$$$:   15-block  1
call    5 never executed
    $$$$$:   15-block  2
    $$$$$:   15-block  3
        1:   16:    std::vector<double> x0{0, 0, 0};
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   16-block  0
call    4 returned 1
    $$$$$:   16-block  1
call    5 never executed
    $$$$$:   16-block  2
    $$$$$:   16-block  3
        1:   17:    std::vector<double> b{20, 30, 1};
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   17-block  0
call    4 returned 1
    $$$$$:   17-block  1
call    5 never executed
    $$$$$:   17-block  2
    $$$$$:   17-block  3
        1:   18:    std::ofstream file;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   19:    file.open("/home/ilya/slae_lab/slae/tests/TEST_04_03/test3_data.txt");
        1:   19-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        7:   20:    for(std::size_t z = 0; z<i.size(); z++){
        1:   20-block  0
        7:   20-block  1
call    0 returned 7
branch  1 taken 6
branch  2 taken 1 (fallthrough)
        6:   21:        D.emplace_back(DOK<double>{static_cast<size_t>(i[z]), static_cast<size_t>(j[z]), data[z]});
        6:   21-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
call    3 returned 6
branch  4 taken 6 (fallthrough)
branch  5 taken 0 (throw)
        6:   21-block  1
    $$$$$:   21-block  2
        -:   22:    }
        1:   23:    CSR_matrix<double> ANSW(D, 3, 3);
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   24:    double r = pow(10, -12);
        1:   25:    std::cout<<r;
        1:   25-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   26:    double tau = 0.1;
        2:   27:    for(std::size_t p = 0; p < 1; p++) {
        1:   27-block  0
        2:   27-block  1
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:   28:        std::pair<std::vector<double>, std::size_t> a = ANSW.MPI(ANSW, b, tau, r, x0);
        1:   28-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   29:
        4:   30:        for(auto& it: a.first){
        1:   30-block  0
call    0 returned 1
call    1 returned 1
        3:   30-block  1
call    2 returned 3
        3:   30-block  2
call    3 returned 3
        4:   30-block  3
call    4 returned 4
branch  5 taken 3
branch  6 taken 1 (fallthrough)
        3:   31:            std::cout<< it<<" ";
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   31-block  0
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        -:   32:        }
        1:   33:        std::cout<<"\n";
        1:   33-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   34:        //file<<a.second<<" ";
        1:   35:        tau +=tau;
        1:   36:    }
        1:   36-block  0
call    0 returned 1
    $$$$$:   36-block  1
call    1 never executed
        1:   37:    file.close();
        1:   37-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   38:}
        1:   38-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
    $$$$$:   38-block  1
call    8 never executed
    $$$$$:   38-block  2
call    9 never executed
    $$$$$:   38-block  3
call   10 never executed
    $$$$$:   38-block  4
call   11 never executed
    $$$$$:   38-block  5
call   12 never executed
    $$$$$:   38-block  6
call   13 never executed
    $$$$$:   38-block  7
call   14 never executed
    $$$$$:   38-block  8
call   15 never executed
------------------
